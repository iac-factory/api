/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface Parameter {
    AllowedPattern?: string;
    AllowedValues?: unknown[];
    ConstraintDescription?: string;
    Default?: string;
    Description?: string;
    MaxLength?: string;
    MaxValue?: string;
    MinLength?: string;
    MinValue?: string;
    NoEcho?: string | boolean;
    Type:
        | "String"
        | "Number"
        | "List<Number>"
        | "CommaDelimitedList"
        | "AWS::EC2::AvailabilityZone::Name"
        | "AWS::EC2::Image::Id"
        | "AWS::EC2::Instance::Id"
        | "AWS::EC2::KeyPair::KeyName"
        | "AWS::EC2::SecurityGroup::GroupName"
        | "AWS::EC2::SecurityGroup::Id"
        | "AWS::EC2::Subnet::Id"
        | "AWS::EC2::Volume::Id"
        | "AWS::EC2::VPC::Id"
        | "AWS::Route53::HostedZone::Id"
        | "List<AWS::EC2::AvailabilityZone::Name>"
        | "List<AWS::EC2::Image::Id>"
        | "List<AWS::EC2::Instance::Id>"
        | "List<AWS::EC2::SecurityGroup::GroupName>"
        | "List<AWS::EC2::SecurityGroup::Id>"
        | "List<AWS::EC2::Subnet::Id>"
        | "List<AWS::EC2::Volume::Id>"
        | "List<AWS::EC2::VPC::Id>"
        | "List<AWS::Route53::HostedZone::Id>"
        | "List<String>"
        | "AWS::SSM::Parameter::Name"
        | "AWS::SSM::Parameter::Value<String>"
        | "AWS::SSM::Parameter::Value<List<String>>"
        | "AWS::SSM::Parameter::Value<CommaDelimitedList>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::AvailabilityZone::Name>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::Instance::Id>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::GroupName>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::Volume::Id>"
        | "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>"
        | "AWS::SSM::Parameter::Value<AWS::Route53::HostedZone::Id>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::AvailabilityZone::Name>>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::Image::Id>>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::Instance::Id>>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::SecurityGroup::GroupName>>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::SecurityGroup::Id>>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::Volume::Id>>"
        | "AWS::SSM::Parameter::Value<List<AWS::EC2::VPC::Id>>"
        | "AWS::SSM::Parameter::Value<List<AWS::Route53::HostedZone::Id>>";
}
export interface AWSACMPCACertificate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiPassthrough?: AWSACMPCACertificateApiPassthrough;
        CertificateAuthorityArn: string;
        CertificateSigningRequest: string;
        SigningAlgorithm: string;
        TemplateArn?: string;
        Validity: AWSACMPCACertificateValidity;
        ValidityNotBefore?: AWSACMPCACertificateValidity;
    };
    Type: "AWS::ACMPCA::Certificate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSACMPCACertificateApiPassthrough {
    Extensions?: AWSACMPCACertificateExtensions;
    Subject?: AWSACMPCACertificateSubject;
}
export interface AWSACMPCACertificateExtensions {
    CertificatePolicies?: AWSACMPCACertificatePolicyInformation[];
    ExtendedKeyUsage?: AWSACMPCACertificateExtendedKeyUsage[];
    KeyUsage?: AWSACMPCACertificateKeyUsage;
    SubjectAlternativeNames?: AWSACMPCACertificateGeneralName[];
}
export interface AWSACMPCACertificatePolicyInformation {
    CertPolicyId: string;
    PolicyQualifiers?: AWSACMPCACertificatePolicyQualifierInfo[];
}
export interface AWSACMPCACertificatePolicyQualifierInfo {
    PolicyQualifierId: string;
    Qualifier: AWSACMPCACertificateQualifier;
}
export interface AWSACMPCACertificateQualifier {
    CpsUri: string;
}
export interface AWSACMPCACertificateExtendedKeyUsage {
    ExtendedKeyUsageObjectIdentifier?: string;
    ExtendedKeyUsageType?: string;
}
export interface AWSACMPCACertificateKeyUsage {
    CRLSign?: boolean;
    DataEncipherment?: boolean;
    DecipherOnly?: boolean;
    DigitalSignature?: boolean;
    EncipherOnly?: boolean;
    KeyAgreement?: boolean;
    KeyCertSign?: boolean;
    KeyEncipherment?: boolean;
    NonRepudiation?: boolean;
}
export interface AWSACMPCACertificateGeneralName {
    DirectoryName?: AWSACMPCACertificateSubject;
    DnsName?: string;
    EdiPartyName?: AWSACMPCACertificateEdiPartyName;
    IpAddress?: string;
    OtherName?: AWSACMPCACertificateOtherName;
    RegisteredId?: string;
    Rfc822Name?: string;
    UniformResourceIdentifier?: string;
}
export interface AWSACMPCACertificateSubject {
    CommonName?: string;
    Country?: string;
    DistinguishedNameQualifier?: string;
    GenerationQualifier?: string;
    GivenName?: string;
    Initials?: string;
    Locality?: string;
    Organization?: string;
    OrganizationalUnit?: string;
    Pseudonym?: string;
    SerialNumber?: string;
    State?: string;
    Surname?: string;
    Title?: string;
}
export interface AWSACMPCACertificateEdiPartyName {
    NameAssigner: string;
    PartyName: string;
}
export interface AWSACMPCACertificateOtherName {
    TypeId: string;
    Value: string;
}
export interface AWSACMPCACertificateValidity {
    Type: string;
    Value: number;
}
export interface AWSACMPCACertificateAuthority {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CsrExtensions?: AWSACMPCACertificateAuthorityCsrExtensions;
        KeyAlgorithm: string;
        KeyStorageSecurityStandard?: string;
        RevocationConfiguration?: AWSACMPCACertificateAuthorityRevocationConfiguration;
        SigningAlgorithm: string;
        Subject: AWSACMPCACertificateAuthoritySubject;
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::ACMPCA::CertificateAuthority";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSACMPCACertificateAuthorityCsrExtensions {
    KeyUsage?: AWSACMPCACertificateAuthorityKeyUsage;
    SubjectInformationAccess?: AWSACMPCACertificateAuthorityAccessDescription[];
}
export interface AWSACMPCACertificateAuthorityKeyUsage {
    CRLSign?: boolean;
    DataEncipherment?: boolean;
    DecipherOnly?: boolean;
    DigitalSignature?: boolean;
    EncipherOnly?: boolean;
    KeyAgreement?: boolean;
    KeyCertSign?: boolean;
    KeyEncipherment?: boolean;
    NonRepudiation?: boolean;
}
export interface AWSACMPCACertificateAuthorityAccessDescription {
    AccessLocation: AWSACMPCACertificateAuthorityGeneralName;
    AccessMethod: AWSACMPCACertificateAuthorityAccessMethod;
}
export interface AWSACMPCACertificateAuthorityGeneralName {
    DirectoryName?: AWSACMPCACertificateAuthoritySubject;
    DnsName?: string;
    EdiPartyName?: AWSACMPCACertificateAuthorityEdiPartyName;
    IpAddress?: string;
    OtherName?: AWSACMPCACertificateAuthorityOtherName;
    RegisteredId?: string;
    Rfc822Name?: string;
    UniformResourceIdentifier?: string;
}
export interface AWSACMPCACertificateAuthoritySubject {
    CommonName?: string;
    Country?: string;
    DistinguishedNameQualifier?: string;
    GenerationQualifier?: string;
    GivenName?: string;
    Initials?: string;
    Locality?: string;
    Organization?: string;
    OrganizationalUnit?: string;
    Pseudonym?: string;
    SerialNumber?: string;
    State?: string;
    Surname?: string;
    Title?: string;
}
export interface AWSACMPCACertificateAuthorityEdiPartyName {
    NameAssigner: string;
    PartyName: string;
}
export interface AWSACMPCACertificateAuthorityOtherName {
    TypeId: string;
    Value: string;
}
export interface AWSACMPCACertificateAuthorityAccessMethod {
    AccessMethodType?: string;
    CustomObjectIdentifier?: string;
}
export interface AWSACMPCACertificateAuthorityRevocationConfiguration {
    CrlConfiguration?: AWSACMPCACertificateAuthorityCrlConfiguration;
    OcspConfiguration?: AWSACMPCACertificateAuthorityOcspConfiguration;
}
export interface AWSACMPCACertificateAuthorityCrlConfiguration {
    CustomCname?: string;
    Enabled?: boolean;
    ExpirationInDays?: number;
    S3BucketName?: string;
    S3ObjectAcl?: string;
}
export interface AWSACMPCACertificateAuthorityOcspConfiguration {
    Enabled?: boolean;
    OcspCustomCname?: string;
}
export interface Tag {
    Key: string;
    Value: string;
}
export interface AWSACMPCACertificateAuthorityActivation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Certificate: string;
        CertificateAuthorityArn: string;
        CertificateChain?: string;
        Status?: string;
    };
    Type: "AWS::ACMPCA::CertificateAuthorityActivation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSACMPCAPermission {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Actions: string[];
        CertificateAuthorityArn: string;
        Principal: string;
        SourceAccount?: string;
    };
    Type: "AWS::ACMPCA::Permission";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAPSRuleGroupsNamespace {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Data: string;
        Name?: string;
        Tags?: Tag[];
        Workspace: string;
    };
    Type: "AWS::APS::RuleGroupsNamespace";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAPSWorkspace {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AlertManagerDefinition?: string;
        Alias?: string;
        Tags?: Tag[];
    };
    Type: "AWS::APS::Workspace";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAccessAnalyzerAnalyzer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AnalyzerName?: string;
        ArchiveRules?: AWSAccessAnalyzerAnalyzerArchiveRule[];
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::AccessAnalyzer::Analyzer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAccessAnalyzerAnalyzerArchiveRule {
    Filter: AWSAccessAnalyzerAnalyzerFilter[];
    RuleName: string;
}
export interface AWSAccessAnalyzerAnalyzerFilter {
    Contains?: string[];
    Eq?: string[];
    Exists?: boolean;
    Neq?: string[];
    Property: string;
}
export interface AWSAmazonMQBroker {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthenticationStrategy?: string;
        AutoMinorVersionUpgrade: boolean;
        BrokerName: string;
        Configuration?: AWSAmazonMQBrokerConfigurationId;
        DeploymentMode: string;
        EncryptionOptions?: AWSAmazonMQBrokerEncryptionOptions;
        EngineType: string;
        EngineVersion: string;
        HostInstanceType: string;
        LdapServerMetadata?: AWSAmazonMQBrokerLdapServerMetadata;
        Logs?: AWSAmazonMQBrokerLogList;
        MaintenanceWindowStartTime?: AWSAmazonMQBrokerMaintenanceWindow;
        PubliclyAccessible: boolean;
        SecurityGroups?: string[];
        StorageType?: string;
        SubnetIds?: string[];
        Tags?: AWSAmazonMQBrokerTagsEntry[];
        Users: AWSAmazonMQBrokerUser[];
    };
    Type: "AWS::AmazonMQ::Broker";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAmazonMQBrokerConfigurationId {
    Id: string;
    Revision: number;
}
export interface AWSAmazonMQBrokerEncryptionOptions {
    KmsKeyId?: string;
    UseAwsOwnedKey: boolean;
}
export interface AWSAmazonMQBrokerLdapServerMetadata {
    Hosts: string[];
    RoleBase: string;
    RoleName?: string;
    RoleSearchMatching: string;
    RoleSearchSubtree?: boolean;
    ServiceAccountPassword: string;
    ServiceAccountUsername: string;
    UserBase: string;
    UserRoleName?: string;
    UserSearchMatching: string;
    UserSearchSubtree?: boolean;
}
export interface AWSAmazonMQBrokerLogList {
    Audit?: boolean;
    General?: boolean;
}
export interface AWSAmazonMQBrokerMaintenanceWindow {
    DayOfWeek: string;
    TimeOfDay: string;
    TimeZone: string;
}
export interface AWSAmazonMQBrokerTagsEntry {
    Key: string;
    Value: string;
}
export interface AWSAmazonMQBrokerUser {
    ConsoleAccess?: boolean;
    Groups?: string[];
    Password: string;
    Username: string;
}
export interface AWSAmazonMQConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthenticationStrategy?: string;
        Data: string;
        Description?: string;
        EngineType: string;
        EngineVersion: string;
        Name: string;
        Tags?: AWSAmazonMQConfigurationTagsEntry[];
    };
    Type: "AWS::AmazonMQ::Configuration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAmazonMQConfigurationTagsEntry {
    Key: string;
    Value: string;
}
export interface AWSAmazonMQConfigurationAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Broker: string;
        Configuration: AWSAmazonMQConfigurationAssociationConfigurationId;
    };
    Type: "AWS::AmazonMQ::ConfigurationAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAmazonMQConfigurationAssociationConfigurationId {
    Id: string;
    Revision: number;
}
export interface AWSAmplifyApp {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessToken?: string;
        AutoBranchCreationConfig?: AWSAmplifyAppAutoBranchCreationConfig;
        BasicAuthConfig?: AWSAmplifyAppBasicAuthConfig;
        BuildSpec?: string;
        CustomHeaders?: string;
        CustomRules?: AWSAmplifyAppCustomRule[];
        Description?: string;
        EnableBranchAutoDeletion?: boolean;
        EnvironmentVariables?: AWSAmplifyAppEnvironmentVariable[];
        IAMServiceRole?: string;
        Name: string;
        OauthToken?: string;
        Repository?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Amplify::App";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAmplifyAppAutoBranchCreationConfig {
    AutoBranchCreationPatterns?: string[];
    BasicAuthConfig?: AWSAmplifyAppBasicAuthConfig;
    BuildSpec?: string;
    EnableAutoBranchCreation?: boolean;
    EnableAutoBuild?: boolean;
    EnablePerformanceMode?: boolean;
    EnablePullRequestPreview?: boolean;
    EnvironmentVariables?: AWSAmplifyAppEnvironmentVariable[];
    PullRequestEnvironmentName?: string;
    Stage?: string;
}
export interface AWSAmplifyAppBasicAuthConfig {
    EnableBasicAuth?: boolean;
    Password?: string;
    Username?: string;
}
export interface AWSAmplifyAppEnvironmentVariable {
    Name: string;
    Value: string;
}
export interface AWSAmplifyAppCustomRule {
    Condition?: string;
    Source: string;
    Status?: string;
    Target: string;
}
export interface AWSAmplifyBranch {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AppId: string;
        BasicAuthConfig?: AWSAmplifyBranchBasicAuthConfig;
        BranchName: string;
        BuildSpec?: string;
        Description?: string;
        EnableAutoBuild?: boolean;
        EnablePerformanceMode?: boolean;
        EnablePullRequestPreview?: boolean;
        EnvironmentVariables?: AWSAmplifyBranchEnvironmentVariable[];
        PullRequestEnvironmentName?: string;
        Stage?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Amplify::Branch";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAmplifyBranchBasicAuthConfig {
    EnableBasicAuth?: boolean;
    Password: string;
    Username: string;
}
export interface AWSAmplifyBranchEnvironmentVariable {
    Name: string;
    Value: string;
}
export interface AWSAmplifyDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AppId: string;
        AutoSubDomainCreationPatterns?: string[];
        AutoSubDomainIAMRole?: string;
        DomainName: string;
        EnableAutoSubDomain?: boolean;
        SubDomainSettings: AWSAmplifyDomainSubDomainSetting[];
    };
    Type: "AWS::Amplify::Domain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAmplifyDomainSubDomainSetting {
    BranchName: string;
    Prefix: string;
}
export interface AWSApiGatewayAccount {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CloudWatchRoleArn?: string;
    };
    Type: "AWS::ApiGateway::Account";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayApiKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CustomerId?: string;
        Description?: string;
        Enabled?: boolean;
        GenerateDistinctId?: boolean;
        Name?: string;
        StageKeys?: AWSApiGatewayApiKeyStageKey[];
        Tags?: Tag[];
        Value?: string;
    };
    Type: "AWS::ApiGateway::ApiKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayApiKeyStageKey {
    RestApiId?: string;
    StageName?: string;
}
export interface AWSApiGatewayAuthorizer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthType?: string;
        AuthorizerCredentials?: string;
        AuthorizerResultTtlInSeconds?: number;
        AuthorizerUri?: string;
        IdentitySource?: string;
        IdentityValidationExpression?: string;
        Name?: string;
        ProviderARNs?: string[];
        RestApiId: string;
        Type: string;
    };
    Type: "AWS::ApiGateway::Authorizer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayBasePathMapping {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BasePath?: string;
        DomainName: string;
        RestApiId?: string;
        Stage?: string;
    };
    Type: "AWS::ApiGateway::BasePathMapping";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayClientCertificate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        Tags?: Tag[];
    };
    Type: "AWS::ApiGateway::ClientCertificate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayDeployment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeploymentCanarySettings?: AWSApiGatewayDeploymentDeploymentCanarySettings;
        Description?: string;
        RestApiId: string;
        StageDescription?: AWSApiGatewayDeploymentStageDescription;
        StageName?: string;
    };
    Type: "AWS::ApiGateway::Deployment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayDeploymentDeploymentCanarySettings {
    PercentTraffic?: number;
    StageVariableOverrides?: {
        [k: string]: unknown;
    };
    UseStageCache?: boolean;
}
export interface AWSApiGatewayDeploymentStageDescription {
    AccessLogSetting?: AWSApiGatewayDeploymentAccessLogSetting;
    CacheClusterEnabled?: boolean;
    CacheClusterSize?: string;
    CacheDataEncrypted?: boolean;
    CacheTtlInSeconds?: number;
    CachingEnabled?: boolean;
    CanarySetting?: AWSApiGatewayDeploymentCanarySetting;
    ClientCertificateId?: string;
    DataTraceEnabled?: boolean;
    Description?: string;
    DocumentationVersion?: string;
    LoggingLevel?: string;
    MethodSettings?: AWSApiGatewayDeploymentMethodSetting[];
    MetricsEnabled?: boolean;
    Tags?: Tag[];
    ThrottlingBurstLimit?: number;
    ThrottlingRateLimit?: number;
    TracingEnabled?: boolean;
    Variables?: {
        [k: string]: unknown;
    };
}
export interface AWSApiGatewayDeploymentAccessLogSetting {
    DestinationArn?: string;
    Format?: string;
}
export interface AWSApiGatewayDeploymentCanarySetting {
    PercentTraffic?: number;
    StageVariableOverrides?: {
        [k: string]: unknown;
    };
    UseStageCache?: boolean;
}
export interface AWSApiGatewayDeploymentMethodSetting {
    CacheDataEncrypted?: boolean;
    CacheTtlInSeconds?: number;
    CachingEnabled?: boolean;
    DataTraceEnabled?: boolean;
    HttpMethod?: string;
    LoggingLevel?: string;
    MetricsEnabled?: boolean;
    ResourcePath?: string;
    ThrottlingBurstLimit?: number;
    ThrottlingRateLimit?: number;
}
export interface AWSApiGatewayDocumentationPart {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Location: AWSApiGatewayDocumentationPartLocation;
        Properties: string;
        RestApiId: string;
    };
    Type: "AWS::ApiGateway::DocumentationPart";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayDocumentationPartLocation {
    Method?: string;
    Name?: string;
    Path?: string;
    StatusCode?: string;
    Type?: string;
}
export interface AWSApiGatewayDocumentationVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        DocumentationVersion: string;
        RestApiId: string;
    };
    Type: "AWS::ApiGateway::DocumentationVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayDomainName {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CertificateArn?: string;
        DomainName?: string;
        EndpointConfiguration?: AWSApiGatewayDomainNameEndpointConfiguration;
        MutualTlsAuthentication?: AWSApiGatewayDomainNameMutualTlsAuthentication;
        OwnershipVerificationCertificateArn?: string;
        RegionalCertificateArn?: string;
        SecurityPolicy?: string;
        Tags?: Tag[];
    };
    Type: "AWS::ApiGateway::DomainName";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayDomainNameEndpointConfiguration {
    Types?: string[];
}
export interface AWSApiGatewayDomainNameMutualTlsAuthentication {
    TruststoreUri?: string;
    TruststoreVersion?: string;
}
export interface AWSApiGatewayGatewayResponse {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResponseParameters?: {
            [k: string]: unknown;
        };
        ResponseTemplates?: {
            [k: string]: unknown;
        };
        ResponseType: string;
        RestApiId: string;
        StatusCode?: string;
    };
    Type: "AWS::ApiGateway::GatewayResponse";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayMethod {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiKeyRequired?: boolean;
        AuthorizationScopes?: string[];
        AuthorizationType?: string;
        AuthorizerId?: string;
        HttpMethod: string;
        Integration?: AWSApiGatewayMethodIntegration;
        MethodResponses?: AWSApiGatewayMethodMethodResponse[];
        OperationName?: string;
        RequestModels?: {
            [k: string]: unknown;
        };
        RequestParameters?: {
            [k: string]: unknown;
        };
        RequestValidatorId?: string;
        ResourceId: string;
        RestApiId: string;
    };
    Type: "AWS::ApiGateway::Method";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayMethodIntegration {
    CacheKeyParameters?: string[];
    CacheNamespace?: string;
    ConnectionId?: string;
    ConnectionType?: string;
    ContentHandling?: string;
    Credentials?: string;
    IntegrationHttpMethod?: string;
    IntegrationResponses?: AWSApiGatewayMethodIntegrationResponse[];
    PassthroughBehavior?: string;
    RequestParameters?: {
        [k: string]: unknown;
    };
    RequestTemplates?: {
        [k: string]: unknown;
    };
    TimeoutInMillis?: number;
    Type?: string;
    Uri?: string;
}
export interface AWSApiGatewayMethodIntegrationResponse {
    ContentHandling?: string;
    ResponseParameters?: {
        [k: string]: unknown;
    };
    ResponseTemplates?: {
        [k: string]: unknown;
    };
    SelectionPattern?: string;
    StatusCode: string;
}
export interface AWSApiGatewayMethodMethodResponse {
    ResponseModels?: {
        [k: string]: unknown;
    };
    ResponseParameters?: {
        [k: string]: unknown;
    };
    StatusCode: string;
}
export interface AWSApiGatewayModel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ContentType?: string;
        Description?: string;
        Name?: string;
        RestApiId: string;
        Schema?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ApiGateway::Model";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayRequestValidator {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        RestApiId: string;
        ValidateRequestBody?: boolean;
        ValidateRequestParameters?: boolean;
    };
    Type: "AWS::ApiGateway::RequestValidator";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayResource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ParentId: string;
        PathPart: string;
        RestApiId: string;
    };
    Type: "AWS::ApiGateway::Resource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayRestApi {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ApiKeySourceType?: string;
        BinaryMediaTypes?: string[];
        Body?: {
            [k: string]: unknown;
        };
        BodyS3Location?: AWSApiGatewayRestApiS3Location;
        CloneFrom?: string;
        Description?: string;
        DisableExecuteApiEndpoint?: boolean;
        EndpointConfiguration?: AWSApiGatewayRestApiEndpointConfiguration;
        FailOnWarnings?: boolean;
        MinimumCompressionSize?: number;
        Mode?: string;
        Name?: string;
        Parameters?: {
            [k: string]: unknown;
        };
        Policy?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::ApiGateway::RestApi";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayRestApiS3Location {
    Bucket?: string;
    ETag?: string;
    Key?: string;
    Version?: string;
}
export interface AWSApiGatewayRestApiEndpointConfiguration {
    Types?: string[];
    VpcEndpointIds?: string[];
}
export interface AWSApiGatewayStage {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessLogSetting?: AWSApiGatewayStageAccessLogSetting;
        CacheClusterEnabled?: boolean;
        CacheClusterSize?: string;
        CanarySetting?: AWSApiGatewayStageCanarySetting;
        ClientCertificateId?: string;
        DeploymentId?: string;
        Description?: string;
        DocumentationVersion?: string;
        MethodSettings?: AWSApiGatewayStageMethodSetting[];
        RestApiId: string;
        StageName?: string;
        Tags?: Tag[];
        TracingEnabled?: boolean;
        Variables?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ApiGateway::Stage";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayStageAccessLogSetting {
    DestinationArn?: string;
    Format?: string;
}
export interface AWSApiGatewayStageCanarySetting {
    DeploymentId?: string;
    PercentTraffic?: number;
    StageVariableOverrides?: {
        [k: string]: unknown;
    };
    UseStageCache?: boolean;
}
export interface AWSApiGatewayStageMethodSetting {
    CacheDataEncrypted?: boolean;
    CacheTtlInSeconds?: number;
    CachingEnabled?: boolean;
    DataTraceEnabled?: boolean;
    HttpMethod?: string;
    LoggingLevel?: string;
    MetricsEnabled?: boolean;
    ResourcePath?: string;
    ThrottlingBurstLimit?: number;
    ThrottlingRateLimit?: number;
}
export interface AWSApiGatewayUsagePlan {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ApiStages?: AWSApiGatewayUsagePlanApiStage[];
        Description?: string;
        Quota?: AWSApiGatewayUsagePlanQuotaSettings;
        Tags?: Tag[];
        Throttle?: AWSApiGatewayUsagePlanThrottleSettings;
        UsagePlanName?: string;
    };
    Type: "AWS::ApiGateway::UsagePlan";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayUsagePlanApiStage {
    ApiId?: string;
    Stage?: string;
    Throttle?: {
        [k: string]: AWSApiGatewayUsagePlanThrottleSettings;
    };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSApiGatewayUsagePlanThrottleSettings {
    BurstLimit?: number;
    RateLimit?: number;
}
export interface AWSApiGatewayUsagePlanQuotaSettings {
    Limit?: number;
    Offset?: number;
    Period?: string;
}
export interface AWSApiGatewayUsagePlanKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        KeyId: string;
        KeyType: string;
        UsagePlanId: string;
    };
    Type: "AWS::ApiGateway::UsagePlanKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayVpcLink {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        TargetArns: string[];
    };
    Type: "AWS::ApiGateway::VpcLink";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2Api {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ApiKeySelectionExpression?: string;
        BasePath?: string;
        Body?: {
            [k: string]: unknown;
        };
        BodyS3Location?: AWSApiGatewayV2ApiBodyS3Location;
        CorsConfiguration?: AWSApiGatewayV2ApiCors;
        CredentialsArn?: string;
        Description?: string;
        DisableExecuteApiEndpoint?: boolean;
        DisableSchemaValidation?: boolean;
        FailOnWarnings?: boolean;
        Name?: string;
        ProtocolType?: string;
        RouteKey?: string;
        RouteSelectionExpression?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Target?: string;
        Version?: string;
    };
    Type: "AWS::ApiGatewayV2::Api";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2ApiBodyS3Location {
    Bucket?: string;
    Etag?: string;
    Key?: string;
    Version?: string;
}
export interface AWSApiGatewayV2ApiCors {
    AllowCredentials?: boolean;
    AllowHeaders?: string[];
    AllowMethods?: string[];
    AllowOrigins?: string[];
    ExposeHeaders?: string[];
    MaxAge?: number;
}
export interface AWSApiGatewayV2ApiGatewayManagedOverrides {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        Integration?: AWSApiGatewayV2ApiGatewayManagedOverridesIntegrationOverrides;
        Route?: AWSApiGatewayV2ApiGatewayManagedOverridesRouteOverrides;
        Stage?: AWSApiGatewayV2ApiGatewayManagedOverridesStageOverrides;
    };
    Type: "AWS::ApiGatewayV2::ApiGatewayManagedOverrides";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2ApiGatewayManagedOverridesIntegrationOverrides {
    Description?: string;
    IntegrationMethod?: string;
    PayloadFormatVersion?: string;
    TimeoutInMillis?: number;
}
export interface AWSApiGatewayV2ApiGatewayManagedOverridesRouteOverrides {
    AuthorizationScopes?: string[];
    AuthorizationType?: string;
    AuthorizerId?: string;
    OperationName?: string;
    Target?: string;
}
export interface AWSApiGatewayV2ApiGatewayManagedOverridesStageOverrides {
    AccessLogSettings?: AWSApiGatewayV2ApiGatewayManagedOverridesAccessLogSettings;
    AutoDeploy?: boolean;
    DefaultRouteSettings?: AWSApiGatewayV2ApiGatewayManagedOverridesRouteSettings;
    Description?: string;
    RouteSettings?: {
        [k: string]: unknown;
    };
    StageVariables?: {
        [k: string]: unknown;
    };
}
export interface AWSApiGatewayV2ApiGatewayManagedOverridesAccessLogSettings {
    DestinationArn?: string;
    Format?: string;
}
export interface AWSApiGatewayV2ApiGatewayManagedOverridesRouteSettings {
    DataTraceEnabled?: boolean;
    DetailedMetricsEnabled?: boolean;
    LoggingLevel?: string;
    ThrottlingBurstLimit?: number;
    ThrottlingRateLimit?: number;
}
export interface AWSApiGatewayV2ApiMapping {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        ApiMappingKey?: string;
        DomainName: string;
        Stage: string;
    };
    Type: "AWS::ApiGatewayV2::ApiMapping";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2Authorizer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        AuthorizerCredentialsArn?: string;
        AuthorizerPayloadFormatVersion?: string;
        AuthorizerResultTtlInSeconds?: number;
        AuthorizerType: string;
        AuthorizerUri?: string;
        EnableSimpleResponses?: boolean;
        IdentitySource?: string[];
        IdentityValidationExpression?: string;
        JwtConfiguration?: AWSApiGatewayV2AuthorizerJWTConfiguration;
        Name: string;
    };
    Type: "AWS::ApiGatewayV2::Authorizer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2AuthorizerJWTConfiguration {
    Audience?: string[];
    Issuer?: string;
}
export interface AWSApiGatewayV2Deployment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        Description?: string;
        StageName?: string;
    };
    Type: "AWS::ApiGatewayV2::Deployment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2DomainName {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DomainName: string;
        DomainNameConfigurations?: AWSApiGatewayV2DomainNameDomainNameConfiguration[];
        MutualTlsAuthentication?: AWSApiGatewayV2DomainNameMutualTlsAuthentication;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ApiGatewayV2::DomainName";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2DomainNameDomainNameConfiguration {
    CertificateArn?: string;
    CertificateName?: string;
    EndpointType?: string;
    OwnershipVerificationCertificateArn?: string;
    SecurityPolicy?: string;
}
export interface AWSApiGatewayV2DomainNameMutualTlsAuthentication {
    TruststoreUri?: string;
    TruststoreVersion?: string;
}
export interface AWSApiGatewayV2Integration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        ConnectionId?: string;
        ConnectionType?: string;
        ContentHandlingStrategy?: string;
        CredentialsArn?: string;
        Description?: string;
        IntegrationMethod?: string;
        IntegrationSubtype?: string;
        IntegrationType: string;
        IntegrationUri?: string;
        PassthroughBehavior?: string;
        PayloadFormatVersion?: string;
        RequestParameters?: {
            [k: string]: unknown;
        };
        RequestTemplates?: {
            [k: string]: unknown;
        };
        ResponseParameters?: {
            [k: string]: unknown;
        };
        TemplateSelectionExpression?: string;
        TimeoutInMillis?: number;
        TlsConfig?: AWSApiGatewayV2IntegrationTlsConfig;
    };
    Type: "AWS::ApiGatewayV2::Integration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2IntegrationTlsConfig {
    ServerNameToVerify?: string;
}
export interface AWSApiGatewayV2IntegrationResponse {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        ContentHandlingStrategy?: string;
        IntegrationId: string;
        IntegrationResponseKey: string;
        ResponseParameters?: {
            [k: string]: unknown;
        };
        ResponseTemplates?: {
            [k: string]: unknown;
        };
        TemplateSelectionExpression?: string;
    };
    Type: "AWS::ApiGatewayV2::IntegrationResponse";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2Model {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        ContentType?: string;
        Description?: string;
        Name: string;
        Schema: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ApiGatewayV2::Model";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2Route {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        ApiKeyRequired?: boolean;
        AuthorizationScopes?: string[];
        AuthorizationType?: string;
        AuthorizerId?: string;
        ModelSelectionExpression?: string;
        OperationName?: string;
        RequestModels?: {
            [k: string]: unknown;
        };
        RequestParameters?: {
            [k: string]: unknown;
        };
        RouteKey: string;
        RouteResponseSelectionExpression?: string;
        Target?: string;
    };
    Type: "AWS::ApiGatewayV2::Route";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2RouteResponse {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        ModelSelectionExpression?: string;
        ResponseModels?: {
            [k: string]: unknown;
        };
        ResponseParameters?: {
            [k: string]: unknown;
        };
        RouteId: string;
        RouteResponseKey: string;
    };
    Type: "AWS::ApiGatewayV2::RouteResponse";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2Stage {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessLogSettings?: AWSApiGatewayV2StageAccessLogSettings;
        AccessPolicyId?: string;
        ApiId: string;
        AutoDeploy?: boolean;
        ClientCertificateId?: string;
        DefaultRouteSettings?: AWSApiGatewayV2StageRouteSettings;
        DeploymentId?: string;
        Description?: string;
        RouteSettings?: {
            [k: string]: unknown;
        };
        StageName: string;
        StageVariables?: {
            [k: string]: unknown;
        };
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ApiGatewayV2::Stage";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApiGatewayV2StageAccessLogSettings {
    DestinationArn?: string;
    Format?: string;
}
export interface AWSApiGatewayV2StageRouteSettings {
    DataTraceEnabled?: boolean;
    DetailedMetricsEnabled?: boolean;
    LoggingLevel?: string;
    ThrottlingBurstLimit?: number;
    ThrottlingRateLimit?: number;
}
export interface AWSApiGatewayV2VpcLink {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        SecurityGroupIds?: string[];
        SubnetIds: string[];
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ApiGatewayV2::VpcLink";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppConfigApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Tags?: AWSAppConfigApplicationTags[];
    };
    Type: "AWS::AppConfig::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppConfigApplicationTags {
    Key?: string;
    Value?: string;
}
export interface AWSAppConfigConfigurationProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        Description?: string;
        LocationUri: string;
        Name: string;
        RetrievalRoleArn?: string;
        Tags?: AWSAppConfigConfigurationProfileTags[];
        Validators?: AWSAppConfigConfigurationProfileValidators[];
    };
    Type: "AWS::AppConfig::ConfigurationProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppConfigConfigurationProfileTags {
    Key?: string;
    Value?: string;
}
export interface AWSAppConfigConfigurationProfileValidators {
    Content?: string;
    Type?: string;
}
export interface AWSAppConfigDeployment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        ConfigurationProfileId: string;
        ConfigurationVersion: string;
        DeploymentStrategyId: string;
        Description?: string;
        EnvironmentId: string;
        Tags?: AWSAppConfigDeploymentTags[];
    };
    Type: "AWS::AppConfig::Deployment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppConfigDeploymentTags {
    Key?: string;
    Value?: string;
}
export interface AWSAppConfigDeploymentStrategy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeploymentDurationInMinutes: number;
        Description?: string;
        FinalBakeTimeInMinutes?: number;
        GrowthFactor: number;
        GrowthType?: string;
        Name: string;
        ReplicateTo: string;
        Tags?: AWSAppConfigDeploymentStrategyTags[];
    };
    Type: "AWS::AppConfig::DeploymentStrategy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppConfigDeploymentStrategyTags {
    Key?: string;
    Value?: string;
}
export interface AWSAppConfigEnvironment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        Description?: string;
        Monitors?: AWSAppConfigEnvironmentMonitors[];
        Name: string;
        Tags?: AWSAppConfigEnvironmentTags[];
    };
    Type: "AWS::AppConfig::Environment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppConfigEnvironmentMonitors {
    AlarmArn?: string;
    AlarmRoleArn?: string;
}
export interface AWSAppConfigEnvironmentTags {
    Key?: string;
    Value?: string;
}
export interface AWSAppConfigHostedConfigurationVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        ConfigurationProfileId: string;
        Content: string;
        ContentType: string;
        Description?: string;
        LatestVersionNumber?: number;
    };
    Type: "AWS::AppConfig::HostedConfigurationVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppFlowConnectorProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectionMode: string;
        ConnectorProfileConfig?: AWSAppFlowConnectorProfileConnectorProfileConfig;
        ConnectorProfileName: string;
        ConnectorType: string;
        KMSArn?: string;
    };
    Type: "AWS::AppFlow::ConnectorProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppFlowConnectorProfileConnectorProfileConfig {
    ConnectorProfileCredentials: AWSAppFlowConnectorProfileConnectorProfileCredentials;
    ConnectorProfileProperties?: AWSAppFlowConnectorProfileConnectorProfileProperties;
}
export interface AWSAppFlowConnectorProfileConnectorProfileCredentials {
    Amplitude?: AWSAppFlowConnectorProfileAmplitudeConnectorProfileCredentials;
    Datadog?: AWSAppFlowConnectorProfileDatadogConnectorProfileCredentials;
    Dynatrace?: AWSAppFlowConnectorProfileDynatraceConnectorProfileCredentials;
    GoogleAnalytics?: AWSAppFlowConnectorProfileGoogleAnalyticsConnectorProfileCredentials;
    InforNexus?: AWSAppFlowConnectorProfileInforNexusConnectorProfileCredentials;
    Marketo?: AWSAppFlowConnectorProfileMarketoConnectorProfileCredentials;
    Redshift?: AWSAppFlowConnectorProfileRedshiftConnectorProfileCredentials;
    Salesforce?: AWSAppFlowConnectorProfileSalesforceConnectorProfileCredentials;
    ServiceNow?: AWSAppFlowConnectorProfileServiceNowConnectorProfileCredentials;
    Singular?: AWSAppFlowConnectorProfileSingularConnectorProfileCredentials;
    Slack?: AWSAppFlowConnectorProfileSlackConnectorProfileCredentials;
    Snowflake?: AWSAppFlowConnectorProfileSnowflakeConnectorProfileCredentials;
    Trendmicro?: AWSAppFlowConnectorProfileTrendmicroConnectorProfileCredentials;
    Veeva?: AWSAppFlowConnectorProfileVeevaConnectorProfileCredentials;
    Zendesk?: AWSAppFlowConnectorProfileZendeskConnectorProfileCredentials;
}
export interface AWSAppFlowConnectorProfileAmplitudeConnectorProfileCredentials {
    ApiKey: string;
    SecretKey: string;
}
export interface AWSAppFlowConnectorProfileDatadogConnectorProfileCredentials {
    ApiKey: string;
    ApplicationKey: string;
}
export interface AWSAppFlowConnectorProfileDynatraceConnectorProfileCredentials {
    ApiToken: string;
}
export interface AWSAppFlowConnectorProfileGoogleAnalyticsConnectorProfileCredentials {
    AccessToken?: string;
    ClientId: string;
    ClientSecret: string;
    ConnectorOAuthRequest?: AWSAppFlowConnectorProfileConnectorOAuthRequest;
    RefreshToken?: string;
}
export interface AWSAppFlowConnectorProfileConnectorOAuthRequest {
    AuthCode?: string;
    RedirectUri?: string;
}
export interface AWSAppFlowConnectorProfileInforNexusConnectorProfileCredentials {
    AccessKeyId: string;
    Datakey: string;
    SecretAccessKey: string;
    UserId: string;
}
export interface AWSAppFlowConnectorProfileMarketoConnectorProfileCredentials {
    AccessToken?: string;
    ClientId: string;
    ClientSecret: string;
    ConnectorOAuthRequest?: AWSAppFlowConnectorProfileConnectorOAuthRequest;
}
export interface AWSAppFlowConnectorProfileRedshiftConnectorProfileCredentials {
    Password: string;
    Username: string;
}
export interface AWSAppFlowConnectorProfileSalesforceConnectorProfileCredentials {
    AccessToken?: string;
    ClientCredentialsArn?: string;
    ConnectorOAuthRequest?: AWSAppFlowConnectorProfileConnectorOAuthRequest;
    RefreshToken?: string;
}
export interface AWSAppFlowConnectorProfileServiceNowConnectorProfileCredentials {
    Password: string;
    Username: string;
}
export interface AWSAppFlowConnectorProfileSingularConnectorProfileCredentials {
    ApiKey: string;
}
export interface AWSAppFlowConnectorProfileSlackConnectorProfileCredentials {
    AccessToken?: string;
    ClientId: string;
    ClientSecret: string;
    ConnectorOAuthRequest?: AWSAppFlowConnectorProfileConnectorOAuthRequest;
}
export interface AWSAppFlowConnectorProfileSnowflakeConnectorProfileCredentials {
    Password: string;
    Username: string;
}
export interface AWSAppFlowConnectorProfileTrendmicroConnectorProfileCredentials {
    ApiSecretKey: string;
}
export interface AWSAppFlowConnectorProfileVeevaConnectorProfileCredentials {
    Password: string;
    Username: string;
}
export interface AWSAppFlowConnectorProfileZendeskConnectorProfileCredentials {
    AccessToken?: string;
    ClientId: string;
    ClientSecret: string;
    ConnectorOAuthRequest?: AWSAppFlowConnectorProfileConnectorOAuthRequest;
}
export interface AWSAppFlowConnectorProfileConnectorProfileProperties {
    Datadog?: AWSAppFlowConnectorProfileDatadogConnectorProfileProperties;
    Dynatrace?: AWSAppFlowConnectorProfileDynatraceConnectorProfileProperties;
    InforNexus?: AWSAppFlowConnectorProfileInforNexusConnectorProfileProperties;
    Marketo?: AWSAppFlowConnectorProfileMarketoConnectorProfileProperties;
    Redshift?: AWSAppFlowConnectorProfileRedshiftConnectorProfileProperties;
    Salesforce?: AWSAppFlowConnectorProfileSalesforceConnectorProfileProperties;
    ServiceNow?: AWSAppFlowConnectorProfileServiceNowConnectorProfileProperties;
    Slack?: AWSAppFlowConnectorProfileSlackConnectorProfileProperties;
    Snowflake?: AWSAppFlowConnectorProfileSnowflakeConnectorProfileProperties;
    Veeva?: AWSAppFlowConnectorProfileVeevaConnectorProfileProperties;
    Zendesk?: AWSAppFlowConnectorProfileZendeskConnectorProfileProperties;
}
export interface AWSAppFlowConnectorProfileDatadogConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowConnectorProfileDynatraceConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowConnectorProfileInforNexusConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowConnectorProfileMarketoConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowConnectorProfileRedshiftConnectorProfileProperties {
    BucketName: string;
    BucketPrefix?: string;
    DatabaseUrl: string;
    RoleArn: string;
}
export interface AWSAppFlowConnectorProfileSalesforceConnectorProfileProperties {
    InstanceUrl?: string;
    isSandboxEnvironment?: boolean;
}
export interface AWSAppFlowConnectorProfileServiceNowConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowConnectorProfileSlackConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowConnectorProfileSnowflakeConnectorProfileProperties {
    AccountName?: string;
    BucketName: string;
    BucketPrefix?: string;
    PrivateLinkServiceName?: string;
    Region?: string;
    Stage: string;
    Warehouse: string;
}
export interface AWSAppFlowConnectorProfileVeevaConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowConnectorProfileZendeskConnectorProfileProperties {
    InstanceUrl: string;
}
export interface AWSAppFlowFlow {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        DestinationFlowConfigList: AWSAppFlowFlowDestinationFlowConfig[];
        FlowName: string;
        KMSArn?: string;
        SourceFlowConfig: AWSAppFlowFlowSourceFlowConfig;
        Tags?: Tag[];
        Tasks: AWSAppFlowFlowTask[];
        TriggerConfig: AWSAppFlowFlowTriggerConfig;
    };
    Type: "AWS::AppFlow::Flow";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppFlowFlowDestinationFlowConfig {
    ConnectorProfileName?: string;
    ConnectorType: string;
    DestinationConnectorProperties: AWSAppFlowFlowDestinationConnectorProperties;
}
export interface AWSAppFlowFlowDestinationConnectorProperties {
    EventBridge?: AWSAppFlowFlowEventBridgeDestinationProperties;
    LookoutMetrics?: AWSAppFlowFlowLookoutMetricsDestinationProperties;
    Redshift?: AWSAppFlowFlowRedshiftDestinationProperties;
    S3?: AWSAppFlowFlowS3DestinationProperties;
    Salesforce?: AWSAppFlowFlowSalesforceDestinationProperties;
    Snowflake?: AWSAppFlowFlowSnowflakeDestinationProperties;
    Upsolver?: AWSAppFlowFlowUpsolverDestinationProperties;
    Zendesk?: AWSAppFlowFlowZendeskDestinationProperties;
}
export interface AWSAppFlowFlowEventBridgeDestinationProperties {
    ErrorHandlingConfig?: AWSAppFlowFlowErrorHandlingConfig;
    Object: string;
}
export interface AWSAppFlowFlowErrorHandlingConfig {
    BucketName?: string;
    BucketPrefix?: string;
    FailOnFirstError?: boolean;
}
export interface AWSAppFlowFlowLookoutMetricsDestinationProperties {
    Object?: string;
}
export interface AWSAppFlowFlowRedshiftDestinationProperties {
    BucketPrefix?: string;
    ErrorHandlingConfig?: AWSAppFlowFlowErrorHandlingConfig;
    IntermediateBucketName: string;
    Object: string;
}
export interface AWSAppFlowFlowS3DestinationProperties {
    BucketName: string;
    BucketPrefix?: string;
    S3OutputFormatConfig?: AWSAppFlowFlowS3OutputFormatConfig;
}
export interface AWSAppFlowFlowS3OutputFormatConfig {
    AggregationConfig?: AWSAppFlowFlowAggregationConfig;
    FileType?: string;
    PrefixConfig?: AWSAppFlowFlowPrefixConfig;
}
export interface AWSAppFlowFlowAggregationConfig {
    AggregationType?: string;
}
export interface AWSAppFlowFlowPrefixConfig {
    PrefixFormat?: string;
    PrefixType?: string;
}
export interface AWSAppFlowFlowSalesforceDestinationProperties {
    ErrorHandlingConfig?: AWSAppFlowFlowErrorHandlingConfig;
    IdFieldNames?: string[];
    Object: string;
    WriteOperationType?: string;
}
export interface AWSAppFlowFlowSnowflakeDestinationProperties {
    BucketPrefix?: string;
    ErrorHandlingConfig?: AWSAppFlowFlowErrorHandlingConfig;
    IntermediateBucketName: string;
    Object: string;
}
export interface AWSAppFlowFlowUpsolverDestinationProperties {
    BucketName: string;
    BucketPrefix?: string;
    S3OutputFormatConfig: AWSAppFlowFlowUpsolverS3OutputFormatConfig;
}
export interface AWSAppFlowFlowUpsolverS3OutputFormatConfig {
    AggregationConfig?: AWSAppFlowFlowAggregationConfig;
    FileType?: string;
    PrefixConfig: AWSAppFlowFlowPrefixConfig;
}
export interface AWSAppFlowFlowZendeskDestinationProperties {
    ErrorHandlingConfig?: AWSAppFlowFlowErrorHandlingConfig;
    IdFieldNames?: string[];
    Object: string;
    WriteOperationType?: string;
}
export interface AWSAppFlowFlowSourceFlowConfig {
    ConnectorProfileName?: string;
    ConnectorType: string;
    IncrementalPullConfig?: AWSAppFlowFlowIncrementalPullConfig;
    SourceConnectorProperties: AWSAppFlowFlowSourceConnectorProperties;
}
export interface AWSAppFlowFlowIncrementalPullConfig {
    DatetimeTypeFieldName?: string;
}
export interface AWSAppFlowFlowSourceConnectorProperties {
    Amplitude?: AWSAppFlowFlowAmplitudeSourceProperties;
    Datadog?: AWSAppFlowFlowDatadogSourceProperties;
    Dynatrace?: AWSAppFlowFlowDynatraceSourceProperties;
    GoogleAnalytics?: AWSAppFlowFlowGoogleAnalyticsSourceProperties;
    InforNexus?: AWSAppFlowFlowInforNexusSourceProperties;
    Marketo?: AWSAppFlowFlowMarketoSourceProperties;
    S3?: AWSAppFlowFlowS3SourceProperties;
    Salesforce?: AWSAppFlowFlowSalesforceSourceProperties;
    ServiceNow?: AWSAppFlowFlowServiceNowSourceProperties;
    Singular?: AWSAppFlowFlowSingularSourceProperties;
    Slack?: AWSAppFlowFlowSlackSourceProperties;
    Trendmicro?: AWSAppFlowFlowTrendmicroSourceProperties;
    Veeva?: AWSAppFlowFlowVeevaSourceProperties;
    Zendesk?: AWSAppFlowFlowZendeskSourceProperties;
}
export interface AWSAppFlowFlowAmplitudeSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowDatadogSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowDynatraceSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowGoogleAnalyticsSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowInforNexusSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowMarketoSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowS3SourceProperties {
    BucketName: string;
    BucketPrefix: string;
}
export interface AWSAppFlowFlowSalesforceSourceProperties {
    EnableDynamicFieldUpdate?: boolean;
    IncludeDeletedRecords?: boolean;
    Object: string;
}
export interface AWSAppFlowFlowServiceNowSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowSingularSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowSlackSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowTrendmicroSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowVeevaSourceProperties {
    DocumentType?: string;
    IncludeAllVersions?: boolean;
    IncludeRenditions?: boolean;
    IncludeSourceFiles?: boolean;
    Object: string;
}
export interface AWSAppFlowFlowZendeskSourceProperties {
    Object: string;
}
export interface AWSAppFlowFlowTask {
    ConnectorOperator?: AWSAppFlowFlowConnectorOperator;
    DestinationField?: string;
    SourceFields: string[];
    TaskProperties?: AWSAppFlowFlowTaskPropertiesObject[];
    TaskType: string;
}
export interface AWSAppFlowFlowConnectorOperator {
    Amplitude?: string;
    Datadog?: string;
    Dynatrace?: string;
    GoogleAnalytics?: string;
    InforNexus?: string;
    Marketo?: string;
    S3?: string;
    Salesforce?: string;
    ServiceNow?: string;
    Singular?: string;
    Slack?: string;
    Trendmicro?: string;
    Veeva?: string;
    Zendesk?: string;
}
export interface AWSAppFlowFlowTaskPropertiesObject {
    Key: string;
    Value: string;
}
export interface AWSAppFlowFlowTriggerConfig {
    TriggerProperties?: AWSAppFlowFlowScheduledTriggerProperties;
    TriggerType: string;
}
export interface AWSAppFlowFlowScheduledTriggerProperties {
    DataPullMode?: string;
    ScheduleEndTime?: number;
    ScheduleExpression: string;
    ScheduleOffset?: number;
    ScheduleStartTime?: number;
    TimeZone?: string;
}
export interface AWSAppIntegrationsEventIntegration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        EventBridgeBus: string;
        EventFilter: AWSAppIntegrationsEventIntegrationEventFilter;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::AppIntegrations::EventIntegration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppIntegrationsEventIntegrationEventFilter {
    Source: string;
}
export interface AWSAppMeshGatewayRoute {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GatewayRouteName?: string;
        MeshName: string;
        MeshOwner?: string;
        Spec: AWSAppMeshGatewayRouteGatewayRouteSpec;
        Tags?: Tag[];
        VirtualGatewayName: string;
    };
    Type: "AWS::AppMesh::GatewayRoute";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppMeshGatewayRouteGatewayRouteSpec {
    GrpcRoute?: AWSAppMeshGatewayRouteGrpcGatewayRoute;
    Http2Route?: AWSAppMeshGatewayRouteHttpGatewayRoute;
    HttpRoute?: AWSAppMeshGatewayRouteHttpGatewayRoute;
}
export interface AWSAppMeshGatewayRouteGrpcGatewayRoute {
    Action: AWSAppMeshGatewayRouteGrpcGatewayRouteAction;
    Match: AWSAppMeshGatewayRouteGrpcGatewayRouteMatch;
}
export interface AWSAppMeshGatewayRouteGrpcGatewayRouteAction {
    Rewrite?: AWSAppMeshGatewayRouteGrpcGatewayRouteRewrite;
    Target: AWSAppMeshGatewayRouteGatewayRouteTarget;
}
export interface AWSAppMeshGatewayRouteGrpcGatewayRouteRewrite {
    Hostname?: AWSAppMeshGatewayRouteGatewayRouteHostnameRewrite;
}
export interface AWSAppMeshGatewayRouteGatewayRouteHostnameRewrite {
    DefaultTargetHostname?: string;
}
export interface AWSAppMeshGatewayRouteGatewayRouteTarget {
    VirtualService: AWSAppMeshGatewayRouteGatewayRouteVirtualService;
}
export interface AWSAppMeshGatewayRouteGatewayRouteVirtualService {
    VirtualServiceName: string;
}
export interface AWSAppMeshGatewayRouteGrpcGatewayRouteMatch {
    Hostname?: AWSAppMeshGatewayRouteGatewayRouteHostnameMatch;
    Metadata?: AWSAppMeshGatewayRouteGrpcGatewayRouteMetadata[];
    ServiceName?: string;
}
export interface AWSAppMeshGatewayRouteGatewayRouteHostnameMatch {
    Exact?: string;
    Suffix?: string;
}
export interface AWSAppMeshGatewayRouteGrpcGatewayRouteMetadata {
    Invert?: boolean;
    Match?: AWSAppMeshGatewayRouteGatewayRouteMetadataMatch;
    Name: string;
}
export interface AWSAppMeshGatewayRouteGatewayRouteMetadataMatch {
    Exact?: string;
    Prefix?: string;
    Range?: AWSAppMeshGatewayRouteGatewayRouteRangeMatch;
    Regex?: string;
    Suffix?: string;
}
export interface AWSAppMeshGatewayRouteGatewayRouteRangeMatch {
    End: number;
    Start: number;
}
export interface AWSAppMeshGatewayRouteHttpGatewayRoute {
    Action: AWSAppMeshGatewayRouteHttpGatewayRouteAction;
    Match: AWSAppMeshGatewayRouteHttpGatewayRouteMatch;
}
export interface AWSAppMeshGatewayRouteHttpGatewayRouteAction {
    Rewrite?: AWSAppMeshGatewayRouteHttpGatewayRouteRewrite;
    Target: AWSAppMeshGatewayRouteGatewayRouteTarget;
}
export interface AWSAppMeshGatewayRouteHttpGatewayRouteRewrite {
    Hostname?: AWSAppMeshGatewayRouteGatewayRouteHostnameRewrite;
    Path?: AWSAppMeshGatewayRouteHttpGatewayRoutePathRewrite;
    Prefix?: AWSAppMeshGatewayRouteHttpGatewayRoutePrefixRewrite;
}
export interface AWSAppMeshGatewayRouteHttpGatewayRoutePathRewrite {
    Exact?: string;
}
export interface AWSAppMeshGatewayRouteHttpGatewayRoutePrefixRewrite {
    DefaultPrefix?: string;
    Value?: string;
}
export interface AWSAppMeshGatewayRouteHttpGatewayRouteMatch {
    Headers?: AWSAppMeshGatewayRouteHttpGatewayRouteHeader[];
    Hostname?: AWSAppMeshGatewayRouteGatewayRouteHostnameMatch;
    Method?: string;
    Path?: AWSAppMeshGatewayRouteHttpPathMatch;
    Prefix?: string;
    QueryParameters?: AWSAppMeshGatewayRouteQueryParameter[];
}
export interface AWSAppMeshGatewayRouteHttpGatewayRouteHeader {
    Invert?: boolean;
    Match?: AWSAppMeshGatewayRouteHttpGatewayRouteHeaderMatch;
    Name: string;
}
export interface AWSAppMeshGatewayRouteHttpGatewayRouteHeaderMatch {
    Exact?: string;
    Prefix?: string;
    Range?: AWSAppMeshGatewayRouteGatewayRouteRangeMatch;
    Regex?: string;
    Suffix?: string;
}
export interface AWSAppMeshGatewayRouteHttpPathMatch {
    Exact?: string;
    Regex?: string;
}
export interface AWSAppMeshGatewayRouteQueryParameter {
    Match?: AWSAppMeshGatewayRouteHttpQueryParameterMatch;
    Name: string;
}
export interface AWSAppMeshGatewayRouteHttpQueryParameterMatch {
    Exact?: string;
}
export interface AWSAppMeshMesh {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        MeshName?: string;
        Spec?: AWSAppMeshMeshMeshSpec;
        Tags?: Tag[];
    };
    Type: "AWS::AppMesh::Mesh";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppMeshMeshMeshSpec {
    EgressFilter?: AWSAppMeshMeshEgressFilter;
}
export interface AWSAppMeshMeshEgressFilter {
    Type: string;
}
export interface AWSAppMeshRoute {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MeshName: string;
        MeshOwner?: string;
        RouteName?: string;
        Spec: AWSAppMeshRouteRouteSpec;
        Tags?: Tag[];
        VirtualRouterName: string;
    };
    Type: "AWS::AppMesh::Route";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppMeshRouteRouteSpec {
    GrpcRoute?: AWSAppMeshRouteGrpcRoute;
    Http2Route?: AWSAppMeshRouteHttpRoute;
    HttpRoute?: AWSAppMeshRouteHttpRoute;
    Priority?: number;
    TcpRoute?: AWSAppMeshRouteTcpRoute;
}
export interface AWSAppMeshRouteGrpcRoute {
    Action: AWSAppMeshRouteGrpcRouteAction;
    Match: AWSAppMeshRouteGrpcRouteMatch;
    RetryPolicy?: AWSAppMeshRouteGrpcRetryPolicy;
    Timeout?: AWSAppMeshRouteGrpcTimeout;
}
export interface AWSAppMeshRouteGrpcRouteAction {
    WeightedTargets: AWSAppMeshRouteWeightedTarget[];
}
export interface AWSAppMeshRouteWeightedTarget {
    VirtualNode: string;
    Weight: number;
}
export interface AWSAppMeshRouteGrpcRouteMatch {
    Metadata?: AWSAppMeshRouteGrpcRouteMetadata[];
    MethodName?: string;
    ServiceName?: string;
}
export interface AWSAppMeshRouteGrpcRouteMetadata {
    Invert?: boolean;
    Match?: AWSAppMeshRouteGrpcRouteMetadataMatchMethod;
    Name: string;
}
export interface AWSAppMeshRouteGrpcRouteMetadataMatchMethod {
    Exact?: string;
    Prefix?: string;
    Range?: AWSAppMeshRouteMatchRange;
    Regex?: string;
    Suffix?: string;
}
export interface AWSAppMeshRouteMatchRange {
    End: number;
    Start: number;
}
export interface AWSAppMeshRouteGrpcRetryPolicy {
    GrpcRetryEvents?: string[];
    HttpRetryEvents?: string[];
    MaxRetries: number;
    PerRetryTimeout: AWSAppMeshRouteDuration;
    TcpRetryEvents?: string[];
}
export interface AWSAppMeshRouteDuration {
    Unit: string;
    Value: number;
}
export interface AWSAppMeshRouteGrpcTimeout {
    Idle?: AWSAppMeshRouteDuration;
    PerRequest?: AWSAppMeshRouteDuration;
}
export interface AWSAppMeshRouteHttpRoute {
    Action: AWSAppMeshRouteHttpRouteAction;
    Match: AWSAppMeshRouteHttpRouteMatch;
    RetryPolicy?: AWSAppMeshRouteHttpRetryPolicy;
    Timeout?: AWSAppMeshRouteHttpTimeout;
}
export interface AWSAppMeshRouteHttpRouteAction {
    WeightedTargets: AWSAppMeshRouteWeightedTarget[];
}
export interface AWSAppMeshRouteHttpRouteMatch {
    Headers?: AWSAppMeshRouteHttpRouteHeader[];
    Method?: string;
    Path?: AWSAppMeshRouteHttpPathMatch;
    Prefix?: string;
    QueryParameters?: AWSAppMeshRouteQueryParameter[];
    Scheme?: string;
}
export interface AWSAppMeshRouteHttpRouteHeader {
    Invert?: boolean;
    Match?: AWSAppMeshRouteHeaderMatchMethod;
    Name: string;
}
export interface AWSAppMeshRouteHeaderMatchMethod {
    Exact?: string;
    Prefix?: string;
    Range?: AWSAppMeshRouteMatchRange;
    Regex?: string;
    Suffix?: string;
}
export interface AWSAppMeshRouteHttpPathMatch {
    Exact?: string;
    Regex?: string;
}
export interface AWSAppMeshRouteQueryParameter {
    Match?: AWSAppMeshRouteHttpQueryParameterMatch;
    Name: string;
}
export interface AWSAppMeshRouteHttpQueryParameterMatch {
    Exact?: string;
}
export interface AWSAppMeshRouteHttpRetryPolicy {
    HttpRetryEvents?: string[];
    MaxRetries: number;
    PerRetryTimeout: AWSAppMeshRouteDuration;
    TcpRetryEvents?: string[];
}
export interface AWSAppMeshRouteHttpTimeout {
    Idle?: AWSAppMeshRouteDuration;
    PerRequest?: AWSAppMeshRouteDuration;
}
export interface AWSAppMeshRouteTcpRoute {
    Action: AWSAppMeshRouteTcpRouteAction;
    Timeout?: AWSAppMeshRouteTcpTimeout;
}
export interface AWSAppMeshRouteTcpRouteAction {
    WeightedTargets: AWSAppMeshRouteWeightedTarget[];
}
export interface AWSAppMeshRouteTcpTimeout {
    Idle?: AWSAppMeshRouteDuration;
}
export interface AWSAppMeshVirtualGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MeshName: string;
        MeshOwner?: string;
        Spec: AWSAppMeshVirtualGatewayVirtualGatewaySpec;
        Tags?: Tag[];
        VirtualGatewayName?: string;
    };
    Type: "AWS::AppMesh::VirtualGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppMeshVirtualGatewayVirtualGatewaySpec {
    BackendDefaults?: AWSAppMeshVirtualGatewayVirtualGatewayBackendDefaults;
    Listeners: AWSAppMeshVirtualGatewayVirtualGatewayListener[];
    Logging?: AWSAppMeshVirtualGatewayVirtualGatewayLogging;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayBackendDefaults {
    ClientPolicy?: AWSAppMeshVirtualGatewayVirtualGatewayClientPolicy;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayClientPolicy {
    TLS?: AWSAppMeshVirtualGatewayVirtualGatewayClientPolicyTls;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayClientPolicyTls {
    Certificate?: AWSAppMeshVirtualGatewayVirtualGatewayClientTlsCertificate;
    Enforce?: boolean;
    Ports?: number[];
    Validation: AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContext;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayClientTlsCertificate {
    File?: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsFileCertificate;
    SDS?: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsSdsCertificate;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsFileCertificate {
    CertificateChain: string;
    PrivateKey: string;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsSdsCertificate {
    SecretName: string;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContext {
    SubjectAlternativeNames?: AWSAppMeshVirtualGatewaySubjectAlternativeNames;
    Trust: AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextTrust;
}
export interface AWSAppMeshVirtualGatewaySubjectAlternativeNames {
    Match: AWSAppMeshVirtualGatewaySubjectAlternativeNameMatchers;
}
export interface AWSAppMeshVirtualGatewaySubjectAlternativeNameMatchers {
    Exact?: string[];
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextTrust {
    ACM?: AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextAcmTrust;
    File?: AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextFileTrust;
    SDS?: AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextSdsTrust;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextAcmTrust {
    CertificateAuthorityArns: string[];
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextFileTrust {
    CertificateChain: string;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextSdsTrust {
    SecretName: string;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListener {
    ConnectionPool?: AWSAppMeshVirtualGatewayVirtualGatewayConnectionPool;
    HealthCheck?: AWSAppMeshVirtualGatewayVirtualGatewayHealthCheckPolicy;
    PortMapping: AWSAppMeshVirtualGatewayVirtualGatewayPortMapping;
    TLS?: AWSAppMeshVirtualGatewayVirtualGatewayListenerTls;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayConnectionPool {
    GRPC?: AWSAppMeshVirtualGatewayVirtualGatewayGrpcConnectionPool;
    HTTP?: AWSAppMeshVirtualGatewayVirtualGatewayHttpConnectionPool;
    HTTP2?: AWSAppMeshVirtualGatewayVirtualGatewayHttp2ConnectionPool;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayGrpcConnectionPool {
    MaxRequests: number;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayHttpConnectionPool {
    MaxConnections: number;
    MaxPendingRequests?: number;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayHttp2ConnectionPool {
    MaxRequests: number;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayHealthCheckPolicy {
    HealthyThreshold: number;
    IntervalMillis: number;
    Path?: string;
    Port?: number;
    Protocol: string;
    TimeoutMillis: number;
    UnhealthyThreshold: number;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayPortMapping {
    Port: number;
    Protocol: string;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListenerTls {
    Certificate: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsCertificate;
    Mode: string;
    Validation?: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsValidationContext;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsCertificate {
    ACM?: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsAcmCertificate;
    File?: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsFileCertificate;
    SDS?: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsSdsCertificate;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsAcmCertificate {
    CertificateArn: string;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsValidationContext {
    SubjectAlternativeNames?: AWSAppMeshVirtualGatewaySubjectAlternativeNames;
    Trust: AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsValidationContextTrust;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayListenerTlsValidationContextTrust {
    File?: AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextFileTrust;
    SDS?: AWSAppMeshVirtualGatewayVirtualGatewayTlsValidationContextSdsTrust;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayLogging {
    AccessLog?: AWSAppMeshVirtualGatewayVirtualGatewayAccessLog;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayAccessLog {
    File?: AWSAppMeshVirtualGatewayVirtualGatewayFileAccessLog;
}
export interface AWSAppMeshVirtualGatewayVirtualGatewayFileAccessLog {
    Path: string;
}
export interface AWSAppMeshVirtualNode {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MeshName: string;
        MeshOwner?: string;
        Spec: AWSAppMeshVirtualNodeVirtualNodeSpec;
        Tags?: Tag[];
        VirtualNodeName?: string;
    };
    Type: "AWS::AppMesh::VirtualNode";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppMeshVirtualNodeVirtualNodeSpec {
    BackendDefaults?: AWSAppMeshVirtualNodeBackendDefaults;
    Backends?: AWSAppMeshVirtualNodeBackend[];
    Listeners?: AWSAppMeshVirtualNodeListener[];
    Logging?: AWSAppMeshVirtualNodeLogging;
    ServiceDiscovery?: AWSAppMeshVirtualNodeServiceDiscovery;
}
export interface AWSAppMeshVirtualNodeBackendDefaults {
    ClientPolicy?: AWSAppMeshVirtualNodeClientPolicy;
}
export interface AWSAppMeshVirtualNodeClientPolicy {
    TLS?: AWSAppMeshVirtualNodeClientPolicyTls;
}
export interface AWSAppMeshVirtualNodeClientPolicyTls {
    Certificate?: AWSAppMeshVirtualNodeClientTlsCertificate;
    Enforce?: boolean;
    Ports?: number[];
    Validation: AWSAppMeshVirtualNodeTlsValidationContext;
}
export interface AWSAppMeshVirtualNodeClientTlsCertificate {
    File?: AWSAppMeshVirtualNodeListenerTlsFileCertificate;
    SDS?: AWSAppMeshVirtualNodeListenerTlsSdsCertificate;
}
export interface AWSAppMeshVirtualNodeListenerTlsFileCertificate {
    CertificateChain: string;
    PrivateKey: string;
}
export interface AWSAppMeshVirtualNodeListenerTlsSdsCertificate {
    SecretName: string;
}
export interface AWSAppMeshVirtualNodeTlsValidationContext {
    SubjectAlternativeNames?: AWSAppMeshVirtualNodeSubjectAlternativeNames;
    Trust: AWSAppMeshVirtualNodeTlsValidationContextTrust;
}
export interface AWSAppMeshVirtualNodeSubjectAlternativeNames {
    Match: AWSAppMeshVirtualNodeSubjectAlternativeNameMatchers;
}
export interface AWSAppMeshVirtualNodeSubjectAlternativeNameMatchers {
    Exact?: string[];
}
export interface AWSAppMeshVirtualNodeTlsValidationContextTrust {
    ACM?: AWSAppMeshVirtualNodeTlsValidationContextAcmTrust;
    File?: AWSAppMeshVirtualNodeTlsValidationContextFileTrust;
    SDS?: AWSAppMeshVirtualNodeTlsValidationContextSdsTrust;
}
export interface AWSAppMeshVirtualNodeTlsValidationContextAcmTrust {
    CertificateAuthorityArns: string[];
}
export interface AWSAppMeshVirtualNodeTlsValidationContextFileTrust {
    CertificateChain: string;
}
export interface AWSAppMeshVirtualNodeTlsValidationContextSdsTrust {
    SecretName: string;
}
export interface AWSAppMeshVirtualNodeBackend {
    VirtualService?: AWSAppMeshVirtualNodeVirtualServiceBackend;
}
export interface AWSAppMeshVirtualNodeVirtualServiceBackend {
    ClientPolicy?: AWSAppMeshVirtualNodeClientPolicy;
    VirtualServiceName: string;
}
export interface AWSAppMeshVirtualNodeListener {
    ConnectionPool?: AWSAppMeshVirtualNodeVirtualNodeConnectionPool;
    HealthCheck?: AWSAppMeshVirtualNodeHealthCheck;
    OutlierDetection?: AWSAppMeshVirtualNodeOutlierDetection;
    PortMapping: AWSAppMeshVirtualNodePortMapping;
    TLS?: AWSAppMeshVirtualNodeListenerTls;
    Timeout?: AWSAppMeshVirtualNodeListenerTimeout;
}
export interface AWSAppMeshVirtualNodeVirtualNodeConnectionPool {
    GRPC?: AWSAppMeshVirtualNodeVirtualNodeGrpcConnectionPool;
    HTTP?: AWSAppMeshVirtualNodeVirtualNodeHttpConnectionPool;
    HTTP2?: AWSAppMeshVirtualNodeVirtualNodeHttp2ConnectionPool;
    TCP?: AWSAppMeshVirtualNodeVirtualNodeTcpConnectionPool;
}
export interface AWSAppMeshVirtualNodeVirtualNodeGrpcConnectionPool {
    MaxRequests: number;
}
export interface AWSAppMeshVirtualNodeVirtualNodeHttpConnectionPool {
    MaxConnections: number;
    MaxPendingRequests?: number;
}
export interface AWSAppMeshVirtualNodeVirtualNodeHttp2ConnectionPool {
    MaxRequests: number;
}
export interface AWSAppMeshVirtualNodeVirtualNodeTcpConnectionPool {
    MaxConnections: number;
}
export interface AWSAppMeshVirtualNodeHealthCheck {
    HealthyThreshold: number;
    IntervalMillis: number;
    Path?: string;
    Port?: number;
    Protocol: string;
    TimeoutMillis: number;
    UnhealthyThreshold: number;
}
export interface AWSAppMeshVirtualNodeOutlierDetection {
    BaseEjectionDuration: AWSAppMeshVirtualNodeDuration;
    Interval: AWSAppMeshVirtualNodeDuration;
    MaxEjectionPercent: number;
    MaxServerErrors: number;
}
export interface AWSAppMeshVirtualNodeDuration {
    Unit: string;
    Value: number;
}
export interface AWSAppMeshVirtualNodePortMapping {
    Port: number;
    Protocol: string;
}
export interface AWSAppMeshVirtualNodeListenerTls {
    Certificate: AWSAppMeshVirtualNodeListenerTlsCertificate;
    Mode: string;
    Validation?: AWSAppMeshVirtualNodeListenerTlsValidationContext;
}
export interface AWSAppMeshVirtualNodeListenerTlsCertificate {
    ACM?: AWSAppMeshVirtualNodeListenerTlsAcmCertificate;
    File?: AWSAppMeshVirtualNodeListenerTlsFileCertificate;
    SDS?: AWSAppMeshVirtualNodeListenerTlsSdsCertificate;
}
export interface AWSAppMeshVirtualNodeListenerTlsAcmCertificate {
    CertificateArn: string;
}
export interface AWSAppMeshVirtualNodeListenerTlsValidationContext {
    SubjectAlternativeNames?: AWSAppMeshVirtualNodeSubjectAlternativeNames;
    Trust: AWSAppMeshVirtualNodeListenerTlsValidationContextTrust;
}
export interface AWSAppMeshVirtualNodeListenerTlsValidationContextTrust {
    File?: AWSAppMeshVirtualNodeTlsValidationContextFileTrust;
    SDS?: AWSAppMeshVirtualNodeTlsValidationContextSdsTrust;
}
export interface AWSAppMeshVirtualNodeListenerTimeout {
    GRPC?: AWSAppMeshVirtualNodeGrpcTimeout;
    HTTP?: AWSAppMeshVirtualNodeHttpTimeout;
    HTTP2?: AWSAppMeshVirtualNodeHttpTimeout;
    TCP?: AWSAppMeshVirtualNodeTcpTimeout;
}
export interface AWSAppMeshVirtualNodeGrpcTimeout {
    Idle?: AWSAppMeshVirtualNodeDuration;
    PerRequest?: AWSAppMeshVirtualNodeDuration;
}
export interface AWSAppMeshVirtualNodeHttpTimeout {
    Idle?: AWSAppMeshVirtualNodeDuration;
    PerRequest?: AWSAppMeshVirtualNodeDuration;
}
export interface AWSAppMeshVirtualNodeTcpTimeout {
    Idle?: AWSAppMeshVirtualNodeDuration;
}
export interface AWSAppMeshVirtualNodeLogging {
    AccessLog?: AWSAppMeshVirtualNodeAccessLog;
}
export interface AWSAppMeshVirtualNodeAccessLog {
    File?: AWSAppMeshVirtualNodeFileAccessLog;
}
export interface AWSAppMeshVirtualNodeFileAccessLog {
    Path: string;
}
export interface AWSAppMeshVirtualNodeServiceDiscovery {
    AWSCloudMap?: AWSAppMeshVirtualNodeAwsCloudMapServiceDiscovery;
    DNS?: AWSAppMeshVirtualNodeDnsServiceDiscovery;
}
export interface AWSAppMeshVirtualNodeAwsCloudMapServiceDiscovery {
    Attributes?: AWSAppMeshVirtualNodeAwsCloudMapInstanceAttribute[];
    NamespaceName: string;
    ServiceName: string;
}
export interface AWSAppMeshVirtualNodeAwsCloudMapInstanceAttribute {
    Key: string;
    Value: string;
}
export interface AWSAppMeshVirtualNodeDnsServiceDiscovery {
    Hostname: string;
    ResponseType?: string;
}
export interface AWSAppMeshVirtualRouter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MeshName: string;
        MeshOwner?: string;
        Spec: AWSAppMeshVirtualRouterVirtualRouterSpec;
        Tags?: Tag[];
        VirtualRouterName?: string;
    };
    Type: "AWS::AppMesh::VirtualRouter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppMeshVirtualRouterVirtualRouterSpec {
    Listeners: AWSAppMeshVirtualRouterVirtualRouterListener[];
}
export interface AWSAppMeshVirtualRouterVirtualRouterListener {
    PortMapping: AWSAppMeshVirtualRouterPortMapping;
}
export interface AWSAppMeshVirtualRouterPortMapping {
    Port: number;
    Protocol: string;
}
export interface AWSAppMeshVirtualService {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MeshName: string;
        MeshOwner?: string;
        Spec: AWSAppMeshVirtualServiceVirtualServiceSpec;
        Tags?: Tag[];
        VirtualServiceName: string;
    };
    Type: "AWS::AppMesh::VirtualService";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppMeshVirtualServiceVirtualServiceSpec {
    Provider?: AWSAppMeshVirtualServiceVirtualServiceProvider;
}
export interface AWSAppMeshVirtualServiceVirtualServiceProvider {
    VirtualNode?: AWSAppMeshVirtualServiceVirtualNodeServiceProvider;
    VirtualRouter?: AWSAppMeshVirtualServiceVirtualRouterServiceProvider;
}
export interface AWSAppMeshVirtualServiceVirtualNodeServiceProvider {
    VirtualNodeName: string;
}
export interface AWSAppMeshVirtualServiceVirtualRouterServiceProvider {
    VirtualRouterName: string;
}
export interface AWSAppRunnerService {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingConfigurationArn?: string;
        EncryptionConfiguration?: AWSAppRunnerServiceEncryptionConfiguration;
        HealthCheckConfiguration?: AWSAppRunnerServiceHealthCheckConfiguration;
        InstanceConfiguration?: AWSAppRunnerServiceInstanceConfiguration;
        ServiceName?: string;
        SourceConfiguration: AWSAppRunnerServiceSourceConfiguration;
        Tags?: Tag[];
    };
    Type: "AWS::AppRunner::Service";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppRunnerServiceEncryptionConfiguration {
    KmsKey: string;
}
export interface AWSAppRunnerServiceHealthCheckConfiguration {
    HealthyThreshold?: number;
    Interval?: number;
    Path?: string;
    Protocol?: string;
    Timeout?: number;
    UnhealthyThreshold?: number;
}
export interface AWSAppRunnerServiceInstanceConfiguration {
    Cpu?: string;
    InstanceRoleArn?: string;
    Memory?: string;
}
export interface AWSAppRunnerServiceSourceConfiguration {
    AuthenticationConfiguration?: AWSAppRunnerServiceAuthenticationConfiguration;
    AutoDeploymentsEnabled?: boolean;
    CodeRepository?: AWSAppRunnerServiceCodeRepository;
    ImageRepository?: AWSAppRunnerServiceImageRepository;
}
export interface AWSAppRunnerServiceAuthenticationConfiguration {
    AccessRoleArn?: string;
    ConnectionArn?: string;
}
export interface AWSAppRunnerServiceCodeRepository {
    CodeConfiguration?: AWSAppRunnerServiceCodeConfiguration;
    RepositoryUrl: string;
    SourceCodeVersion: AWSAppRunnerServiceSourceCodeVersion;
}
export interface AWSAppRunnerServiceCodeConfiguration {
    CodeConfigurationValues?: AWSAppRunnerServiceCodeConfigurationValues;
    ConfigurationSource: string;
}
export interface AWSAppRunnerServiceCodeConfigurationValues {
    BuildCommand?: string;
    Port?: string;
    Runtime: string;
    RuntimeEnvironmentVariables?: AWSAppRunnerServiceKeyValuePair[];
    StartCommand?: string;
}
export interface AWSAppRunnerServiceKeyValuePair {
    Name?: string;
    Value?: string;
}
export interface AWSAppRunnerServiceSourceCodeVersion {
    Type: string;
    Value: string;
}
export interface AWSAppRunnerServiceImageRepository {
    ImageConfiguration?: AWSAppRunnerServiceImageConfiguration;
    ImageIdentifier: string;
    ImageRepositoryType: string;
}
export interface AWSAppRunnerServiceImageConfiguration {
    Port?: string;
    RuntimeEnvironmentVariables?: AWSAppRunnerServiceKeyValuePair[];
    StartCommand?: string;
}
export interface AWSAppStreamDirectoryConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DirectoryName: string;
        OrganizationalUnitDistinguishedNames: string[];
        ServiceAccountCredentials: AWSAppStreamDirectoryConfigServiceAccountCredentials;
    };
    Type: "AWS::AppStream::DirectoryConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppStreamDirectoryConfigServiceAccountCredentials {
    AccountName: string;
    AccountPassword: string;
}
export interface AWSAppStreamFleet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ComputeCapacity: AWSAppStreamFleetComputeCapacity;
        Description?: string;
        DisconnectTimeoutInSeconds?: number;
        DisplayName?: string;
        DomainJoinInfo?: AWSAppStreamFleetDomainJoinInfo;
        EnableDefaultInternetAccess?: boolean;
        FleetType?: string;
        IamRoleArn?: string;
        IdleDisconnectTimeoutInSeconds?: number;
        ImageArn?: string;
        ImageName?: string;
        InstanceType: string;
        MaxUserDurationInSeconds?: number;
        Name: string;
        StreamView?: string;
        Tags?: Tag[];
        VpcConfig?: AWSAppStreamFleetVpcConfig;
    };
    Type: "AWS::AppStream::Fleet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppStreamFleetComputeCapacity {
    DesiredInstances: number;
}
export interface AWSAppStreamFleetDomainJoinInfo {
    DirectoryName?: string;
    OrganizationalUnitDistinguishedName?: string;
}
export interface AWSAppStreamFleetVpcConfig {
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSAppStreamImageBuilder {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessEndpoints?: AWSAppStreamImageBuilderAccessEndpoint[];
        AppstreamAgentVersion?: string;
        Description?: string;
        DisplayName?: string;
        DomainJoinInfo?: AWSAppStreamImageBuilderDomainJoinInfo;
        EnableDefaultInternetAccess?: boolean;
        IamRoleArn?: string;
        ImageArn?: string;
        ImageName?: string;
        InstanceType: string;
        Name: string;
        Tags?: Tag[];
        VpcConfig?: AWSAppStreamImageBuilderVpcConfig;
    };
    Type: "AWS::AppStream::ImageBuilder";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppStreamImageBuilderAccessEndpoint {
    EndpointType: string;
    VpceId: string;
}
export interface AWSAppStreamImageBuilderDomainJoinInfo {
    DirectoryName?: string;
    OrganizationalUnitDistinguishedName?: string;
}
export interface AWSAppStreamImageBuilderVpcConfig {
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSAppStreamStack {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AccessEndpoints?: AWSAppStreamStackAccessEndpoint[];
        ApplicationSettings?: AWSAppStreamStackApplicationSettings;
        AttributesToDelete?: string[];
        DeleteStorageConnectors?: boolean;
        Description?: string;
        DisplayName?: string;
        EmbedHostDomains?: string[];
        FeedbackURL?: string;
        Name?: string;
        RedirectURL?: string;
        StorageConnectors?: AWSAppStreamStackStorageConnector[];
        Tags?: Tag[];
        UserSettings?: AWSAppStreamStackUserSetting[];
    };
    Type: "AWS::AppStream::Stack";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppStreamStackAccessEndpoint {
    EndpointType: string;
    VpceId: string;
}
export interface AWSAppStreamStackApplicationSettings {
    Enabled: boolean;
    SettingsGroup?: string;
}
export interface AWSAppStreamStackStorageConnector {
    ConnectorType: string;
    Domains?: string[];
    ResourceIdentifier?: string;
}
export interface AWSAppStreamStackUserSetting {
    Action: string;
    Permission: string;
}
export interface AWSAppStreamStackFleetAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FleetName: string;
        StackName: string;
    };
    Type: "AWS::AppStream::StackFleetAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppStreamStackUserAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthenticationType: string;
        SendEmailNotification?: boolean;
        StackName: string;
        UserName: string;
    };
    Type: "AWS::AppStream::StackUserAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppStreamUser {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthenticationType: string;
        FirstName?: string;
        LastName?: string;
        MessageAction?: string;
        UserName: string;
    };
    Type: "AWS::AppStream::User";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncApiCache {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiCachingBehavior: string;
        ApiId: string;
        AtRestEncryptionEnabled?: boolean;
        TransitEncryptionEnabled?: boolean;
        Ttl: number;
        Type: string;
    };
    Type: "AWS::AppSync::ApiCache";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncApiKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        ApiKeyId?: string;
        Description?: string;
        Expires?: number;
    };
    Type: "AWS::AppSync::ApiKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncDataSource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        Description?: string;
        DynamoDBConfig?: AWSAppSyncDataSourceDynamoDBConfig;
        ElasticsearchConfig?: AWSAppSyncDataSourceElasticsearchConfig;
        HttpConfig?: AWSAppSyncDataSourceHttpConfig;
        LambdaConfig?: AWSAppSyncDataSourceLambdaConfig;
        Name: string;
        OpenSearchServiceConfig?: AWSAppSyncDataSourceOpenSearchServiceConfig;
        RelationalDatabaseConfig?: AWSAppSyncDataSourceRelationalDatabaseConfig;
        ServiceRoleArn?: string;
        Type: string;
    };
    Type: "AWS::AppSync::DataSource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncDataSourceDynamoDBConfig {
    AwsRegion: string;
    DeltaSyncConfig?: AWSAppSyncDataSourceDeltaSyncConfig;
    TableName: string;
    UseCallerCredentials?: boolean;
    Versioned?: boolean;
}
export interface AWSAppSyncDataSourceDeltaSyncConfig {
    BaseTableTTL: string;
    DeltaSyncTableName: string;
    DeltaSyncTableTTL: string;
}
export interface AWSAppSyncDataSourceElasticsearchConfig {
    AwsRegion: string;
    Endpoint: string;
}
export interface AWSAppSyncDataSourceHttpConfig {
    AuthorizationConfig?: AWSAppSyncDataSourceAuthorizationConfig;
    Endpoint: string;
}
export interface AWSAppSyncDataSourceAuthorizationConfig {
    AuthorizationType: string;
    AwsIamConfig?: AWSAppSyncDataSourceAwsIamConfig;
}
export interface AWSAppSyncDataSourceAwsIamConfig {
    SigningRegion?: string;
    SigningServiceName?: string;
}
export interface AWSAppSyncDataSourceLambdaConfig {
    LambdaFunctionArn: string;
}
export interface AWSAppSyncDataSourceOpenSearchServiceConfig {
    AwsRegion: string;
    Endpoint: string;
}
export interface AWSAppSyncDataSourceRelationalDatabaseConfig {
    RdsHttpEndpointConfig?: AWSAppSyncDataSourceRdsHttpEndpointConfig;
    RelationalDatabaseSourceType: string;
}
export interface AWSAppSyncDataSourceRdsHttpEndpointConfig {
    AwsRegion: string;
    AwsSecretStoreArn: string;
    DatabaseName?: string;
    DbClusterIdentifier: string;
    Schema?: string;
}
export interface AWSAppSyncFunctionConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        DataSourceName: string;
        Description?: string;
        FunctionVersion: string;
        Name: string;
        RequestMappingTemplate?: string;
        RequestMappingTemplateS3Location?: string;
        ResponseMappingTemplate?: string;
        ResponseMappingTemplateS3Location?: string;
        SyncConfig?: AWSAppSyncFunctionConfigurationSyncConfig;
    };
    Type: "AWS::AppSync::FunctionConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncFunctionConfigurationSyncConfig {
    ConflictDetection: string;
    ConflictHandler?: string;
    LambdaConflictHandlerConfig?: AWSAppSyncFunctionConfigurationLambdaConflictHandlerConfig;
}
export interface AWSAppSyncFunctionConfigurationLambdaConflictHandlerConfig {
    LambdaConflictHandlerArn?: string;
}
export interface AWSAppSyncGraphQLApi {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdditionalAuthenticationProviders?: AWSAppSyncGraphQLApiAdditionalAuthenticationProviders;
        AuthenticationType: string;
        LambdaAuthorizerConfig?: AWSAppSyncGraphQLApiLambdaAuthorizerConfig;
        LogConfig?: AWSAppSyncGraphQLApiLogConfig;
        Name: string;
        OpenIDConnectConfig?: AWSAppSyncGraphQLApiOpenIDConnectConfig;
        Tags?: AWSAppSyncGraphQLApiTags;
        UserPoolConfig?: AWSAppSyncGraphQLApiUserPoolConfig;
        XrayEnabled?: boolean;
    };
    Type: "AWS::AppSync::GraphQLApi";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncGraphQLApiAdditionalAuthenticationProviders {}
export interface AWSAppSyncGraphQLApiLambdaAuthorizerConfig {
    AuthorizerResultTtlInSeconds?: number;
    AuthorizerUri?: string;
    IdentityValidationExpression?: string;
}
export interface AWSAppSyncGraphQLApiLogConfig {
    CloudWatchLogsRoleArn?: string;
    ExcludeVerboseContent?: boolean;
    FieldLogLevel?: string;
}
export interface AWSAppSyncGraphQLApiOpenIDConnectConfig {
    AuthTTL?: number;
    ClientId?: string;
    IatTTL?: number;
    Issuer?: string;
}
export interface AWSAppSyncGraphQLApiTags {}
export interface AWSAppSyncGraphQLApiUserPoolConfig {
    AppIdClientRegex?: string;
    AwsRegion?: string;
    DefaultAction?: string;
    UserPoolId?: string;
}
export interface AWSAppSyncGraphQLSchema {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        Definition?: string;
        DefinitionS3Location?: string;
    };
    Type: "AWS::AppSync::GraphQLSchema";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncResolver {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiId: string;
        CachingConfig?: AWSAppSyncResolverCachingConfig;
        DataSourceName?: string;
        FieldName: string;
        Kind?: string;
        PipelineConfig?: AWSAppSyncResolverPipelineConfig;
        RequestMappingTemplate?: string;
        RequestMappingTemplateS3Location?: string;
        ResponseMappingTemplate?: string;
        ResponseMappingTemplateS3Location?: string;
        SyncConfig?: AWSAppSyncResolverSyncConfig;
        TypeName: string;
    };
    Type: "AWS::AppSync::Resolver";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAppSyncResolverCachingConfig {
    CachingKeys?: string[];
    Ttl?: number;
}
export interface AWSAppSyncResolverPipelineConfig {
    Functions?: string[];
}
export interface AWSAppSyncResolverSyncConfig {
    ConflictDetection: string;
    ConflictHandler?: string;
    LambdaConflictHandlerConfig?: AWSAppSyncResolverLambdaConflictHandlerConfig;
}
export interface AWSAppSyncResolverLambdaConflictHandlerConfig {
    LambdaConflictHandlerArn?: string;
}
export interface AWSApplicationAutoScalingScalableTarget {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MaxCapacity: number;
        MinCapacity: number;
        ResourceId: string;
        RoleARN: string;
        ScalableDimension: string;
        ScheduledActions?: AWSApplicationAutoScalingScalableTargetScheduledAction[];
        ServiceNamespace: string;
        SuspendedState?: AWSApplicationAutoScalingScalableTargetSuspendedState;
    };
    Type: "AWS::ApplicationAutoScaling::ScalableTarget";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApplicationAutoScalingScalableTargetScheduledAction {
    EndTime?: string;
    ScalableTargetAction?: AWSApplicationAutoScalingScalableTargetScalableTargetAction;
    Schedule: string;
    ScheduledActionName: string;
    StartTime?: string;
    Timezone?: string;
}
export interface AWSApplicationAutoScalingScalableTargetScalableTargetAction {
    MaxCapacity?: number;
    MinCapacity?: number;
}
export interface AWSApplicationAutoScalingScalableTargetSuspendedState {
    DynamicScalingInSuspended?: boolean;
    DynamicScalingOutSuspended?: boolean;
    ScheduledScalingSuspended?: boolean;
}
export interface AWSApplicationAutoScalingScalingPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyName: string;
        PolicyType: string;
        ResourceId?: string;
        ScalableDimension?: string;
        ScalingTargetId?: string;
        ServiceNamespace?: string;
        StepScalingPolicyConfiguration?: AWSApplicationAutoScalingScalingPolicyStepScalingPolicyConfiguration;
        TargetTrackingScalingPolicyConfiguration?: AWSApplicationAutoScalingScalingPolicyTargetTrackingScalingPolicyConfiguration;
    };
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApplicationAutoScalingScalingPolicyStepScalingPolicyConfiguration {
    AdjustmentType?: string;
    Cooldown?: number;
    MetricAggregationType?: string;
    MinAdjustmentMagnitude?: number;
    StepAdjustments?: AWSApplicationAutoScalingScalingPolicyStepAdjustment[];
}
export interface AWSApplicationAutoScalingScalingPolicyStepAdjustment {
    MetricIntervalLowerBound?: number;
    MetricIntervalUpperBound?: number;
    ScalingAdjustment: number;
}
export interface AWSApplicationAutoScalingScalingPolicyTargetTrackingScalingPolicyConfiguration {
    CustomizedMetricSpecification?: AWSApplicationAutoScalingScalingPolicyCustomizedMetricSpecification;
    DisableScaleIn?: boolean;
    PredefinedMetricSpecification?: AWSApplicationAutoScalingScalingPolicyPredefinedMetricSpecification;
    ScaleInCooldown?: number;
    ScaleOutCooldown?: number;
    TargetValue: number;
}
export interface AWSApplicationAutoScalingScalingPolicyCustomizedMetricSpecification {
    Dimensions?: AWSApplicationAutoScalingScalingPolicyMetricDimension[];
    MetricName: string;
    Namespace: string;
    Statistic: string;
    Unit?: string;
}
export interface AWSApplicationAutoScalingScalingPolicyMetricDimension {
    Name: string;
    Value: string;
}
export interface AWSApplicationAutoScalingScalingPolicyPredefinedMetricSpecification {
    PredefinedMetricType: string;
    ResourceLabel?: string;
}
export interface AWSApplicationInsightsApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoConfigurationEnabled?: boolean;
        CWEMonitorEnabled?: boolean;
        ComponentMonitoringSettings?: AWSApplicationInsightsApplicationComponentMonitoringSetting[];
        CustomComponents?: AWSApplicationInsightsApplicationCustomComponent[];
        LogPatternSets?: AWSApplicationInsightsApplicationLogPatternSet[];
        OpsCenterEnabled?: boolean;
        OpsItemSNSTopicArn?: string;
        ResourceGroupName: string;
        Tags?: Tag[];
    };
    Type: "AWS::ApplicationInsights::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSApplicationInsightsApplicationComponentMonitoringSetting {
    ComponentARN?: string;
    ComponentConfigurationMode: string;
    ComponentName?: string;
    CustomComponentConfiguration?: AWSApplicationInsightsApplicationComponentConfiguration;
    DefaultOverwriteComponentConfiguration?: AWSApplicationInsightsApplicationComponentConfiguration;
    Tier: string;
}
export interface AWSApplicationInsightsApplicationComponentConfiguration {
    ConfigurationDetails?: AWSApplicationInsightsApplicationConfigurationDetails;
    SubComponentTypeConfigurations?: AWSApplicationInsightsApplicationSubComponentTypeConfiguration[];
}
export interface AWSApplicationInsightsApplicationConfigurationDetails {
    AlarmMetrics?: AWSApplicationInsightsApplicationAlarmMetric[];
    Alarms?: AWSApplicationInsightsApplicationAlarm[];
    JMXPrometheusExporter?: AWSApplicationInsightsApplicationJMXPrometheusExporter;
    Logs?: AWSApplicationInsightsApplicationLog[];
    WindowsEvents?: AWSApplicationInsightsApplicationWindowsEvent[];
}
export interface AWSApplicationInsightsApplicationAlarmMetric {
    AlarmMetricName: string;
}
export interface AWSApplicationInsightsApplicationAlarm {
    AlarmName: string;
    Severity?: string;
}
export interface AWSApplicationInsightsApplicationJMXPrometheusExporter {
    HostPort?: string;
    JMXURL?: string;
    PrometheusPort?: string;
}
export interface AWSApplicationInsightsApplicationLog {
    Encoding?: string;
    LogGroupName?: string;
    LogPath?: string;
    LogType: string;
    PatternSet?: string;
}
export interface AWSApplicationInsightsApplicationWindowsEvent {
    EventLevels: string[];
    EventName: string;
    LogGroupName: string;
    PatternSet?: string;
}
export interface AWSApplicationInsightsApplicationSubComponentTypeConfiguration {
    SubComponentConfigurationDetails: AWSApplicationInsightsApplicationSubComponentConfigurationDetails;
    SubComponentType: string;
}
export interface AWSApplicationInsightsApplicationSubComponentConfigurationDetails {
    AlarmMetrics?: AWSApplicationInsightsApplicationAlarmMetric[];
    Logs?: AWSApplicationInsightsApplicationLog[];
    WindowsEvents?: AWSApplicationInsightsApplicationWindowsEvent[];
}
export interface AWSApplicationInsightsApplicationCustomComponent {
    ComponentName: string;
    ResourceList: string[];
}
export interface AWSApplicationInsightsApplicationLogPatternSet {
    LogPatterns: AWSApplicationInsightsApplicationLogPattern[];
    PatternSetName: string;
}
export interface AWSApplicationInsightsApplicationLogPattern {
    Pattern: string;
    PatternName: string;
    Rank: number;
}
export interface AWSAthenaDataCatalog {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Parameters?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::Athena::DataCatalog";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAthenaNamedQuery {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Database: string;
        Description?: string;
        Name?: string;
        QueryString: string;
        WorkGroup?: string;
    };
    Type: "AWS::Athena::NamedQuery";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAthenaPreparedStatement {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        QueryStatement: string;
        StatementName: string;
        WorkGroup: string;
    };
    Type: "AWS::Athena::PreparedStatement";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAthenaWorkGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        RecursiveDeleteOption?: boolean;
        State?: string;
        Tags?: Tag[];
        WorkGroupConfiguration?: AWSAthenaWorkGroupWorkGroupConfiguration;
        WorkGroupConfigurationUpdates?: AWSAthenaWorkGroupWorkGroupConfigurationUpdates;
    };
    Type: "AWS::Athena::WorkGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAthenaWorkGroupWorkGroupConfiguration {
    BytesScannedCutoffPerQuery?: number;
    EnforceWorkGroupConfiguration?: boolean;
    EngineVersion?: AWSAthenaWorkGroupEngineVersion;
    PublishCloudWatchMetricsEnabled?: boolean;
    RequesterPaysEnabled?: boolean;
    ResultConfiguration?: AWSAthenaWorkGroupResultConfiguration;
}
export interface AWSAthenaWorkGroupEngineVersion {
    EffectiveEngineVersion?: string;
    SelectedEngineVersion?: string;
}
export interface AWSAthenaWorkGroupResultConfiguration {
    EncryptionConfiguration?: AWSAthenaWorkGroupEncryptionConfiguration;
    OutputLocation?: string;
}
export interface AWSAthenaWorkGroupEncryptionConfiguration {
    EncryptionOption: string;
    KmsKey?: string;
}
export interface AWSAthenaWorkGroupWorkGroupConfigurationUpdates {
    BytesScannedCutoffPerQuery?: number;
    EnforceWorkGroupConfiguration?: boolean;
    EngineVersion?: AWSAthenaWorkGroupEngineVersion;
    PublishCloudWatchMetricsEnabled?: boolean;
    RemoveBytesScannedCutoffPerQuery?: boolean;
    RequesterPaysEnabled?: boolean;
    ResultConfigurationUpdates?: AWSAthenaWorkGroupResultConfigurationUpdates;
}
export interface AWSAthenaWorkGroupResultConfigurationUpdates {
    EncryptionConfiguration?: AWSAthenaWorkGroupEncryptionConfiguration;
    OutputLocation?: string;
    RemoveEncryptionConfiguration?: boolean;
    RemoveOutputLocation?: boolean;
}
export interface AWSAuditManagerAssessment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AssessmentReportsDestination?: AWSAuditManagerAssessmentAssessmentReportsDestination;
        AwsAccount?: AWSAuditManagerAssessmentAWSAccount;
        Description?: string;
        FrameworkId?: string;
        Name?: string;
        Roles?: AWSAuditManagerAssessmentRole[];
        Scope?: AWSAuditManagerAssessmentScope;
        Status?: string;
        Tags?: Tag[];
    };
    Type: "AWS::AuditManager::Assessment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAuditManagerAssessmentAssessmentReportsDestination {
    Destination?: string;
    DestinationType?: string;
}
export interface AWSAuditManagerAssessmentAWSAccount {
    EmailAddress?: string;
    Id?: string;
    Name?: string;
}
export interface AWSAuditManagerAssessmentRole {
    RoleArn?: string;
    RoleType?: string;
}
export interface AWSAuditManagerAssessmentScope {
    AwsAccounts?: AWSAuditManagerAssessmentAWSAccount[];
    AwsServices?: AWSAuditManagerAssessmentAWSService[];
}
export interface AWSAuditManagerAssessmentAWSService {
    ServiceName?: string;
}
export interface AWSAutoScalingAutoScalingGroup {
    CreationPolicy?: {
        [k: string]: unknown;
    };
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingGroupName?: string;
        AvailabilityZones?: string[];
        CapacityRebalance?: boolean;
        Context?: string;
        Cooldown?: string;
        DesiredCapacity?: string;
        HealthCheckGracePeriod?: number;
        HealthCheckType?: string;
        InstanceId?: string;
        LaunchConfigurationName?: string;
        LaunchTemplate?: AWSAutoScalingAutoScalingGroupLaunchTemplateSpecification;
        LifecycleHookSpecificationList?: AWSAutoScalingAutoScalingGroupLifecycleHookSpecification[];
        LoadBalancerNames?: string[];
        MaxInstanceLifetime?: number;
        MaxSize: string;
        MetricsCollection?: AWSAutoScalingAutoScalingGroupMetricsCollection[];
        MinSize: string;
        MixedInstancesPolicy?: AWSAutoScalingAutoScalingGroupMixedInstancesPolicy;
        NewInstancesProtectedFromScaleIn?: boolean;
        NotificationConfigurations?: AWSAutoScalingAutoScalingGroupNotificationConfiguration[];
        PlacementGroup?: string;
        ServiceLinkedRoleARN?: string;
        Tags?: AWSAutoScalingAutoScalingGroupTagProperty[];
        TargetGroupARNs?: string[];
        TerminationPolicies?: string[];
        VPCZoneIdentifier?: string[];
    };
    Type: "AWS::AutoScaling::AutoScalingGroup";
    UpdatePolicy?: {
        [k: string]: unknown;
    };
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAutoScalingAutoScalingGroupLaunchTemplateSpecification {
    LaunchTemplateId?: string;
    LaunchTemplateName?: string;
    Version: string;
}
export interface AWSAutoScalingAutoScalingGroupLifecycleHookSpecification {
    DefaultResult?: string;
    HeartbeatTimeout?: number;
    LifecycleHookName: string;
    LifecycleTransition: string;
    NotificationMetadata?: string;
    NotificationTargetARN?: string;
    RoleARN?: string;
}
export interface AWSAutoScalingAutoScalingGroupMetricsCollection {
    Granularity: string;
    Metrics?: string[];
}
export interface AWSAutoScalingAutoScalingGroupMixedInstancesPolicy {
    InstancesDistribution?: AWSAutoScalingAutoScalingGroupInstancesDistribution;
    LaunchTemplate: AWSAutoScalingAutoScalingGroupLaunchTemplate;
}
export interface AWSAutoScalingAutoScalingGroupInstancesDistribution {
    OnDemandAllocationStrategy?: string;
    OnDemandBaseCapacity?: number;
    OnDemandPercentageAboveBaseCapacity?: number;
    SpotAllocationStrategy?: string;
    SpotInstancePools?: number;
    SpotMaxPrice?: string;
}
export interface AWSAutoScalingAutoScalingGroupLaunchTemplate {
    LaunchTemplateSpecification: AWSAutoScalingAutoScalingGroupLaunchTemplateSpecification;
    Overrides?: AWSAutoScalingAutoScalingGroupLaunchTemplateOverrides[];
}
export interface AWSAutoScalingAutoScalingGroupLaunchTemplateOverrides {
    InstanceType?: string;
    LaunchTemplateSpecification?: AWSAutoScalingAutoScalingGroupLaunchTemplateSpecification;
    WeightedCapacity?: string;
}
export interface AWSAutoScalingAutoScalingGroupNotificationConfiguration {
    NotificationTypes?: string[];
    TopicARN: string;
}
export interface AWSAutoScalingAutoScalingGroupTagProperty {
    Key: string;
    PropagateAtLaunch: boolean;
    Value: string;
}
export interface AWSAutoScalingLaunchConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssociatePublicIpAddress?: boolean;
        BlockDeviceMappings?: AWSAutoScalingLaunchConfigurationBlockDeviceMapping[];
        ClassicLinkVPCId?: string;
        ClassicLinkVPCSecurityGroups?: string[];
        EbsOptimized?: boolean;
        IamInstanceProfile?: string;
        ImageId: string;
        InstanceId?: string;
        InstanceMonitoring?: boolean;
        InstanceType: string;
        KernelId?: string;
        KeyName?: string;
        LaunchConfigurationName?: string;
        MetadataOptions?: AWSAutoScalingLaunchConfigurationMetadataOptions;
        PlacementTenancy?: string;
        RamDiskId?: string;
        SecurityGroups?: string[];
        SpotPrice?: string;
        UserData?: string;
    };
    Type: "AWS::AutoScaling::LaunchConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAutoScalingLaunchConfigurationBlockDeviceMapping {
    DeviceName: string;
    Ebs?: AWSAutoScalingLaunchConfigurationBlockDevice;
    NoDevice?: boolean;
    VirtualName?: string;
}
export interface AWSAutoScalingLaunchConfigurationBlockDevice {
    DeleteOnTermination?: boolean;
    Encrypted?: boolean;
    Iops?: number;
    SnapshotId?: string;
    Throughput?: number;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSAutoScalingLaunchConfigurationMetadataOptions {
    HttpEndpoint?: string;
    HttpPutResponseHopLimit?: number;
    HttpTokens?: string;
}
export interface AWSAutoScalingLifecycleHook {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingGroupName: string;
        DefaultResult?: string;
        HeartbeatTimeout?: number;
        LifecycleHookName?: string;
        LifecycleTransition: string;
        NotificationMetadata?: string;
        NotificationTargetARN?: string;
        RoleARN?: string;
    };
    Type: "AWS::AutoScaling::LifecycleHook";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAutoScalingScalingPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdjustmentType?: string;
        AutoScalingGroupName: string;
        Cooldown?: string;
        EstimatedInstanceWarmup?: number;
        MetricAggregationType?: string;
        MinAdjustmentMagnitude?: number;
        PolicyType?: string;
        PredictiveScalingConfiguration?: AWSAutoScalingScalingPolicyPredictiveScalingConfiguration;
        ScalingAdjustment?: number;
        StepAdjustments?: AWSAutoScalingScalingPolicyStepAdjustment[];
        TargetTrackingConfiguration?: AWSAutoScalingScalingPolicyTargetTrackingConfiguration;
    };
    Type: "AWS::AutoScaling::ScalingPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAutoScalingScalingPolicyPredictiveScalingConfiguration {
    MaxCapacityBreachBehavior?: string;
    MaxCapacityBuffer?: number;
    MetricSpecifications: AWSAutoScalingScalingPolicyPredictiveScalingMetricSpecification[];
    Mode?: string;
    SchedulingBufferTime?: number;
}
export interface AWSAutoScalingScalingPolicyPredictiveScalingMetricSpecification {
    PredefinedLoadMetricSpecification?: AWSAutoScalingScalingPolicyPredictiveScalingPredefinedLoadMetric;
    PredefinedMetricPairSpecification?: AWSAutoScalingScalingPolicyPredictiveScalingPredefinedMetricPair;
    PredefinedScalingMetricSpecification?: AWSAutoScalingScalingPolicyPredictiveScalingPredefinedScalingMetric;
    TargetValue: number;
}
export interface AWSAutoScalingScalingPolicyPredictiveScalingPredefinedLoadMetric {
    PredefinedMetricType: string;
    ResourceLabel?: string;
}
export interface AWSAutoScalingScalingPolicyPredictiveScalingPredefinedMetricPair {
    PredefinedMetricType: string;
    ResourceLabel?: string;
}
export interface AWSAutoScalingScalingPolicyPredictiveScalingPredefinedScalingMetric {
    PredefinedMetricType: string;
    ResourceLabel?: string;
}
export interface AWSAutoScalingScalingPolicyStepAdjustment {
    MetricIntervalLowerBound?: number;
    MetricIntervalUpperBound?: number;
    ScalingAdjustment: number;
}
export interface AWSAutoScalingScalingPolicyTargetTrackingConfiguration {
    CustomizedMetricSpecification?: AWSAutoScalingScalingPolicyCustomizedMetricSpecification;
    DisableScaleIn?: boolean;
    PredefinedMetricSpecification?: AWSAutoScalingScalingPolicyPredefinedMetricSpecification;
    TargetValue: number;
}
export interface AWSAutoScalingScalingPolicyCustomizedMetricSpecification {
    Dimensions?: AWSAutoScalingScalingPolicyMetricDimension[];
    MetricName: string;
    Namespace: string;
    Statistic: string;
    Unit?: string;
}
export interface AWSAutoScalingScalingPolicyMetricDimension {
    Name: string;
    Value: string;
}
export interface AWSAutoScalingScalingPolicyPredefinedMetricSpecification {
    PredefinedMetricType: string;
    ResourceLabel?: string;
}
export interface AWSAutoScalingScheduledAction {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingGroupName: string;
        DesiredCapacity?: number;
        EndTime?: string;
        MaxSize?: number;
        MinSize?: number;
        Recurrence?: string;
        StartTime?: string;
        TimeZone?: string;
    };
    Type: "AWS::AutoScaling::ScheduledAction";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAutoScalingWarmPool {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingGroupName: string;
        MaxGroupPreparedCapacity?: number;
        MinSize?: number;
        PoolState?: string;
    };
    Type: "AWS::AutoScaling::WarmPool";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAutoScalingPlansScalingPlan {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationSource: AWSAutoScalingPlansScalingPlanApplicationSource;
        ScalingInstructions: AWSAutoScalingPlansScalingPlanScalingInstruction[];
    };
    Type: "AWS::AutoScalingPlans::ScalingPlan";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSAutoScalingPlansScalingPlanApplicationSource {
    CloudFormationStackARN?: string;
    TagFilters?: AWSAutoScalingPlansScalingPlanTagFilter[];
}
export interface AWSAutoScalingPlansScalingPlanTagFilter {
    Key: string;
    Values?: string[];
}
export interface AWSAutoScalingPlansScalingPlanScalingInstruction {
    CustomizedLoadMetricSpecification?: AWSAutoScalingPlansScalingPlanCustomizedLoadMetricSpecification;
    DisableDynamicScaling?: boolean;
    MaxCapacity: number;
    MinCapacity: number;
    PredefinedLoadMetricSpecification?: AWSAutoScalingPlansScalingPlanPredefinedLoadMetricSpecification;
    PredictiveScalingMaxCapacityBehavior?: string;
    PredictiveScalingMaxCapacityBuffer?: number;
    PredictiveScalingMode?: string;
    ResourceId: string;
    ScalableDimension: string;
    ScalingPolicyUpdateBehavior?: string;
    ScheduledActionBufferTime?: number;
    ServiceNamespace: string;
    TargetTrackingConfigurations: AWSAutoScalingPlansScalingPlanTargetTrackingConfiguration[];
}
export interface AWSAutoScalingPlansScalingPlanCustomizedLoadMetricSpecification {
    Dimensions?: AWSAutoScalingPlansScalingPlanMetricDimension[];
    MetricName: string;
    Namespace: string;
    Statistic: string;
    Unit?: string;
}
export interface AWSAutoScalingPlansScalingPlanMetricDimension {
    Name: string;
    Value: string;
}
export interface AWSAutoScalingPlansScalingPlanPredefinedLoadMetricSpecification {
    PredefinedLoadMetricType: string;
    ResourceLabel?: string;
}
export interface AWSAutoScalingPlansScalingPlanTargetTrackingConfiguration {
    CustomizedScalingMetricSpecification?: AWSAutoScalingPlansScalingPlanCustomizedScalingMetricSpecification;
    DisableScaleIn?: boolean;
    EstimatedInstanceWarmup?: number;
    PredefinedScalingMetricSpecification?: AWSAutoScalingPlansScalingPlanPredefinedScalingMetricSpecification;
    ScaleInCooldown?: number;
    ScaleOutCooldown?: number;
    TargetValue: number;
}
export interface AWSAutoScalingPlansScalingPlanCustomizedScalingMetricSpecification {
    Dimensions?: AWSAutoScalingPlansScalingPlanMetricDimension[];
    MetricName: string;
    Namespace: string;
    Statistic: string;
    Unit?: string;
}
export interface AWSAutoScalingPlansScalingPlanPredefinedScalingMetricSpecification {
    PredefinedScalingMetricType: string;
    ResourceLabel?: string;
}
export interface AWSBackupBackupPlan {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BackupPlan: AWSBackupBackupPlanBackupPlanResourceType;
        BackupPlanTags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Backup::BackupPlan";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBackupBackupPlanBackupPlanResourceType {
    AdvancedBackupSettings?: AWSBackupBackupPlanAdvancedBackupSettingResourceType[];
    BackupPlanName: string;
    BackupPlanRule: AWSBackupBackupPlanBackupRuleResourceType[];
}
export interface AWSBackupBackupPlanAdvancedBackupSettingResourceType {
    BackupOptions: {
        [k: string]: unknown;
    };
    ResourceType: string;
}
export interface AWSBackupBackupPlanBackupRuleResourceType {
    CompletionWindowMinutes?: number;
    CopyActions?: AWSBackupBackupPlanCopyActionResourceType[];
    EnableContinuousBackup?: boolean;
    Lifecycle?: AWSBackupBackupPlanLifecycleResourceType;
    RecoveryPointTags?: {
        [k: string]: unknown;
    };
    RuleName: string;
    ScheduleExpression?: string;
    StartWindowMinutes?: number;
    TargetBackupVault: string;
}
export interface AWSBackupBackupPlanCopyActionResourceType {
    DestinationBackupVaultArn: string;
    Lifecycle?: AWSBackupBackupPlanLifecycleResourceType;
}
export interface AWSBackupBackupPlanLifecycleResourceType {
    DeleteAfterDays?: number;
    MoveToColdStorageAfterDays?: number;
}
export interface AWSBackupBackupSelection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BackupPlanId: string;
        BackupSelection: AWSBackupBackupSelectionBackupSelectionResourceType;
    };
    Type: "AWS::Backup::BackupSelection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBackupBackupSelectionBackupSelectionResourceType {
    IamRoleArn: string;
    ListOfTags?: AWSBackupBackupSelectionConditionResourceType[];
    Resources?: string[];
    SelectionName: string;
}
export interface AWSBackupBackupSelectionConditionResourceType {
    ConditionKey: string;
    ConditionType: string;
    ConditionValue: string;
}
export interface AWSBackupBackupVault {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessPolicy?: {
            [k: string]: unknown;
        };
        BackupVaultName: string;
        BackupVaultTags?: {
            [k: string]: unknown;
        };
        EncryptionKeyArn?: string;
        LockConfiguration?: AWSBackupBackupVaultLockConfigurationType;
        Notifications?: AWSBackupBackupVaultNotificationObjectType;
    };
    Type: "AWS::Backup::BackupVault";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBackupBackupVaultLockConfigurationType {
    ChangeableForDays?: number;
    MaxRetentionDays?: number;
    MinRetentionDays: number;
}
export interface AWSBackupBackupVaultNotificationObjectType {
    BackupVaultEvents: string[];
    SNSTopicArn: string;
}
export interface AWSBackupFramework {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FrameworkControls: AWSBackupFrameworkFrameworkControl[];
        FrameworkDescription?: string;
        FrameworkName?: string;
        FrameworkTags?: Tag[];
    };
    Type: "AWS::Backup::Framework";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBackupFrameworkFrameworkControl {
    ControlInputParameters?: AWSBackupFrameworkControlInputParameter[];
    ControlName: string;
    ControlScope?: {
        [k: string]: unknown;
    };
}
export interface AWSBackupFrameworkControlInputParameter {
    ParameterName: string;
    ParameterValue: string;
}
export interface AWSBackupReportPlan {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ReportDeliveryChannel: {
            [k: string]: unknown;
        };
        ReportPlanDescription?: string;
        ReportPlanName?: string;
        ReportPlanTags?: Tag[];
        ReportSetting: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Backup::ReportPlan";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBatchComputeEnvironment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ComputeEnvironmentName?: string;
        ComputeResources?: AWSBatchComputeEnvironmentComputeResources;
        ServiceRole?: string;
        State?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Type: string;
    };
    Type: "AWS::Batch::ComputeEnvironment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBatchComputeEnvironmentComputeResources {
    AllocationStrategy?: string;
    BidPercentage?: number;
    DesiredvCpus?: number;
    Ec2Configuration?: AWSBatchComputeEnvironmentEc2ConfigurationObject[];
    Ec2KeyPair?: string;
    ImageId?: string;
    InstanceRole?: string;
    InstanceTypes?: string[];
    LaunchTemplate?: AWSBatchComputeEnvironmentLaunchTemplateSpecification;
    MaxvCpus: number;
    MinvCpus?: number;
    PlacementGroup?: string;
    SecurityGroupIds?: string[];
    SpotIamFleetRole?: string;
    Subnets: string[];
    Tags?: {
        [k: string]: unknown;
    };
    Type: string;
}
export interface AWSBatchComputeEnvironmentEc2ConfigurationObject {
    ImageIdOverride?: string;
    ImageType: string;
}
export interface AWSBatchComputeEnvironmentLaunchTemplateSpecification {
    LaunchTemplateId?: string;
    LaunchTemplateName?: string;
    Version?: string;
}
export interface AWSBatchJobDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ContainerProperties?: AWSBatchJobDefinitionContainerProperties;
        JobDefinitionName?: string;
        NodeProperties?: AWSBatchJobDefinitionNodeProperties;
        Parameters?: {
            [k: string]: unknown;
        };
        PlatformCapabilities?: string[];
        PropagateTags?: boolean;
        RetryStrategy?: AWSBatchJobDefinitionRetryStrategy;
        Tags?: {
            [k: string]: unknown;
        };
        Timeout?: AWSBatchJobDefinitionTimeout;
        Type: string;
    };
    Type: "AWS::Batch::JobDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBatchJobDefinitionContainerProperties {
    Command?: string[];
    Environment?: AWSBatchJobDefinitionEnvironment[];
    ExecutionRoleArn?: string;
    FargatePlatformConfiguration?: AWSBatchJobDefinitionFargatePlatformConfiguration;
    Image: string;
    InstanceType?: string;
    JobRoleArn?: string;
    LinuxParameters?: AWSBatchJobDefinitionLinuxParameters;
    LogConfiguration?: AWSBatchJobDefinitionLogConfiguration;
    Memory?: number;
    MountPoints?: AWSBatchJobDefinitionMountPoints[];
    NetworkConfiguration?: AWSBatchJobDefinitionNetworkConfiguration;
    Privileged?: boolean;
    ReadonlyRootFilesystem?: boolean;
    ResourceRequirements?: AWSBatchJobDefinitionResourceRequirement[];
    Secrets?: AWSBatchJobDefinitionSecret[];
    Ulimits?: AWSBatchJobDefinitionUlimit[];
    User?: string;
    Vcpus?: number;
    Volumes?: AWSBatchJobDefinitionVolumes[];
}
export interface AWSBatchJobDefinitionEnvironment {
    Name?: string;
    Value?: string;
}
export interface AWSBatchJobDefinitionFargatePlatformConfiguration {
    PlatformVersion?: string;
}
export interface AWSBatchJobDefinitionLinuxParameters {
    Devices?: AWSBatchJobDefinitionDevice[];
    InitProcessEnabled?: boolean;
    MaxSwap?: number;
    SharedMemorySize?: number;
    Swappiness?: number;
    Tmpfs?: AWSBatchJobDefinitionTmpfs[];
}
export interface AWSBatchJobDefinitionDevice {
    ContainerPath?: string;
    HostPath?: string;
    Permissions?: string[];
}
export interface AWSBatchJobDefinitionTmpfs {
    ContainerPath: string;
    MountOptions?: string[];
    Size: number;
}
export interface AWSBatchJobDefinitionLogConfiguration {
    LogDriver: string;
    Options?: {
        [k: string]: unknown;
    };
    SecretOptions?: AWSBatchJobDefinitionSecret[];
}
export interface AWSBatchJobDefinitionSecret {
    Name: string;
    ValueFrom: string;
}
export interface AWSBatchJobDefinitionMountPoints {
    ContainerPath?: string;
    ReadOnly?: boolean;
    SourceVolume?: string;
}
export interface AWSBatchJobDefinitionNetworkConfiguration {
    AssignPublicIp?: string;
}
export interface AWSBatchJobDefinitionResourceRequirement {
    Type?: string;
    Value?: string;
}
export interface AWSBatchJobDefinitionUlimit {
    HardLimit: number;
    Name: string;
    SoftLimit: number;
}
export interface AWSBatchJobDefinitionVolumes {
    EfsVolumeConfiguration?: AWSBatchJobDefinitionEfsVolumeConfiguration;
    Host?: AWSBatchJobDefinitionVolumesHost;
    Name?: string;
}
export interface AWSBatchJobDefinitionEfsVolumeConfiguration {
    AuthorizationConfig?: AWSBatchJobDefinitionAuthorizationConfig;
    FileSystemId: string;
    RootDirectory?: string;
    TransitEncryption?: string;
    TransitEncryptionPort?: number;
}
export interface AWSBatchJobDefinitionAuthorizationConfig {
    AccessPointId?: string;
    Iam?: string;
}
export interface AWSBatchJobDefinitionVolumesHost {
    SourcePath?: string;
}
export interface AWSBatchJobDefinitionNodeProperties {
    MainNode: number;
    NodeRangeProperties: AWSBatchJobDefinitionNodeRangeProperty[];
    NumNodes: number;
}
export interface AWSBatchJobDefinitionNodeRangeProperty {
    Container?: AWSBatchJobDefinitionContainerProperties;
    TargetNodes: string;
}
export interface AWSBatchJobDefinitionRetryStrategy {
    Attempts?: number;
    EvaluateOnExit?: AWSBatchJobDefinitionEvaluateOnExit[];
}
export interface AWSBatchJobDefinitionEvaluateOnExit {
    Action: string;
    OnExitCode?: string;
    OnReason?: string;
    OnStatusReason?: string;
}
export interface AWSBatchJobDefinitionTimeout {
    AttemptDurationSeconds?: number;
}
export interface AWSBatchJobQueue {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ComputeEnvironmentOrder: AWSBatchJobQueueComputeEnvironmentOrder[];
        JobQueueName?: string;
        Priority: number;
        State?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Batch::JobQueue";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBatchJobQueueComputeEnvironmentOrder {
    ComputeEnvironment: string;
    Order: number;
}
export interface AWSBudgetsBudget {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Budget: AWSBudgetsBudgetBudgetData;
        NotificationsWithSubscribers?: AWSBudgetsBudgetNotificationWithSubscribers[];
    };
    Type: "AWS::Budgets::Budget";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBudgetsBudgetBudgetData {
    BudgetLimit?: AWSBudgetsBudgetSpend;
    BudgetName?: string;
    BudgetType: string;
    CostFilters?: {
        [k: string]: unknown;
    };
    CostTypes?: AWSBudgetsBudgetCostTypes;
    PlannedBudgetLimits?: {
        [k: string]: unknown;
    };
    TimePeriod?: AWSBudgetsBudgetTimePeriod;
    TimeUnit: string;
}
export interface AWSBudgetsBudgetSpend {
    Amount: number;
    Unit: string;
}
export interface AWSBudgetsBudgetCostTypes {
    IncludeCredit?: boolean;
    IncludeDiscount?: boolean;
    IncludeOtherSubscription?: boolean;
    IncludeRecurring?: boolean;
    IncludeRefund?: boolean;
    IncludeSubscription?: boolean;
    IncludeSupport?: boolean;
    IncludeTax?: boolean;
    IncludeUpfront?: boolean;
    UseAmortized?: boolean;
    UseBlended?: boolean;
}
export interface AWSBudgetsBudgetTimePeriod {
    End?: string;
    Start?: string;
}
export interface AWSBudgetsBudgetNotificationWithSubscribers {
    Notification: AWSBudgetsBudgetNotification;
    Subscribers: AWSBudgetsBudgetSubscriber[];
}
export interface AWSBudgetsBudgetNotification {
    ComparisonOperator: string;
    NotificationType: string;
    Threshold: number;
    ThresholdType?: string;
}
export interface AWSBudgetsBudgetSubscriber {
    Address: string;
    SubscriptionType: string;
}
export interface AWSBudgetsBudgetsAction {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ActionThreshold: AWSBudgetsBudgetsActionActionThreshold;
        ActionType: string;
        ApprovalModel?: string;
        BudgetName: string;
        Definition: AWSBudgetsBudgetsActionDefinition;
        ExecutionRoleArn: string;
        NotificationType: string;
        Subscribers?: AWSBudgetsBudgetsActionSubscriber[];
    };
    Type: "AWS::Budgets::BudgetsAction";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSBudgetsBudgetsActionActionThreshold {
    Type: string;
    Value: number;
}
export interface AWSBudgetsBudgetsActionDefinition {
    IamActionDefinition?: AWSBudgetsBudgetsActionIamActionDefinition;
    ScpActionDefinition?: AWSBudgetsBudgetsActionScpActionDefinition;
    SsmActionDefinition?: AWSBudgetsBudgetsActionSsmActionDefinition;
}
export interface AWSBudgetsBudgetsActionIamActionDefinition {
    Groups?: string[];
    PolicyArn: string;
    Roles?: string[];
    Users?: string[];
}
export interface AWSBudgetsBudgetsActionScpActionDefinition {
    PolicyId: string;
    TargetIds: string[];
}
export interface AWSBudgetsBudgetsActionSsmActionDefinition {
    InstanceIds: string[];
    Region: string;
    Subtype: string;
}
export interface AWSBudgetsBudgetsActionSubscriber {
    Address: string;
    Type: string;
}
export interface AWSCEAnomalyMonitor {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MonitorDimension?: string;
        MonitorName: string;
        MonitorSpecification?: string;
        MonitorType: string;
    };
    Type: "AWS::CE::AnomalyMonitor";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCEAnomalySubscription {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Frequency: string;
        MonitorArnList: string[];
        Subscribers: AWSCEAnomalySubscriptionSubscriber[];
        SubscriptionName: string;
        Threshold: number;
    };
    Type: "AWS::CE::AnomalySubscription";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCEAnomalySubscriptionSubscriber {
    Address: string;
    Status?: string;
    Type: string;
}
export interface AWSCECostCategory {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DefaultValue?: string;
        Name: string;
        RuleVersion: string;
        Rules: string;
        SplitChargeRules?: string;
    };
    Type: "AWS::CE::CostCategory";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCURReportDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdditionalArtifacts?: string[];
        AdditionalSchemaElements?: string[];
        BillingViewArn?: string;
        Compression: string;
        Format: string;
        RefreshClosedReports: boolean;
        ReportName: string;
        ReportVersioning: string;
        S3Bucket: string;
        S3Prefix: string;
        S3Region: string;
        TimeUnit: string;
    };
    Type: "AWS::CUR::ReportDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCassandraKeyspace {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        KeyspaceName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Cassandra::Keyspace";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCassandraTable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BillingMode?: AWSCassandraTableBillingMode;
        ClusteringKeyColumns?: AWSCassandraTableClusteringKeyColumn[];
        EncryptionSpecification?: AWSCassandraTableEncryptionSpecification;
        KeyspaceName: string;
        PartitionKeyColumns: AWSCassandraTableColumn[];
        PointInTimeRecoveryEnabled?: boolean;
        RegularColumns?: AWSCassandraTableColumn[];
        TableName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Cassandra::Table";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCassandraTableBillingMode {
    Mode: string;
    ProvisionedThroughput?: AWSCassandraTableProvisionedThroughput;
}
export interface AWSCassandraTableProvisionedThroughput {
    ReadCapacityUnits: number;
    WriteCapacityUnits: number;
}
export interface AWSCassandraTableClusteringKeyColumn {
    Column: AWSCassandraTableColumn;
    OrderBy?: string;
}
export interface AWSCassandraTableColumn {
    ColumnName: string;
    ColumnType: string;
}
export interface AWSCassandraTableEncryptionSpecification {
    EncryptionType: string;
    KmsKeyIdentifier?: string;
}
export interface AWSCertificateManagerAccount {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ExpiryEventsConfiguration: AWSCertificateManagerAccountExpiryEventsConfiguration;
    };
    Type: "AWS::CertificateManager::Account";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCertificateManagerAccountExpiryEventsConfiguration {
    DaysBeforeExpiry?: number;
}
export interface AWSCertificateManagerCertificate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CertificateAuthorityArn?: string;
        CertificateTransparencyLoggingPreference?: string;
        DomainName: string;
        DomainValidationOptions?: AWSCertificateManagerCertificateDomainValidationOption[];
        SubjectAlternativeNames?: string[];
        Tags?: Tag[];
        ValidationMethod?: string;
    };
    Type: "AWS::CertificateManager::Certificate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCertificateManagerCertificateDomainValidationOption {
    DomainName: string;
    HostedZoneId?: string;
    ValidationDomain?: string;
}
export interface AWSChatbotSlackChannelConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConfigurationName: string;
        IamRoleArn: string;
        LoggingLevel?: string;
        SlackChannelId: string;
        SlackWorkspaceId: string;
        SnsTopicArns?: string[];
    };
    Type: "AWS::Chatbot::SlackChannelConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloud9EnvironmentEC2 {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutomaticStopTimeMinutes?: number;
        ConnectionType?: string;
        Description?: string;
        ImageId?: string;
        InstanceType: string;
        Name?: string;
        OwnerArn?: string;
        Repositories?: AWSCloud9EnvironmentEC2Repository[];
        SubnetId?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Cloud9::EnvironmentEC2";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloud9EnvironmentEC2Repository {
    PathComponent: string;
    RepositoryUrl: string;
}
export interface AWSCloudFormationCustomResource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ServiceToken: string;
    };
    Type: "AWS::CloudFormation::CustomResource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationMacro {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        FunctionName: string;
        LogGroupName?: string;
        LogRoleARN?: string;
        Name: string;
    };
    Type: "AWS::CloudFormation::Macro";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationModuleDefaultVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Arn?: string;
        ModuleName?: string;
        VersionId?: string;
    };
    Type: "AWS::CloudFormation::ModuleDefaultVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationModuleVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ModuleName: string;
        ModulePackage: string;
    };
    Type: "AWS::CloudFormation::ModuleVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationPublicTypeVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Arn?: string;
        LogDeliveryBucket?: string;
        PublicVersionNumber?: string;
        Type?: string;
        TypeName?: string;
    };
    Type: "AWS::CloudFormation::PublicTypeVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationPublisher {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptTermsAndConditions: boolean;
        ConnectionArn?: string;
    };
    Type: "AWS::CloudFormation::Publisher";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationResourceDefaultVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        TypeName?: string;
        TypeVersionArn?: string;
        VersionId?: string;
    };
    Type: "AWS::CloudFormation::ResourceDefaultVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationResourceVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ExecutionRoleArn?: string;
        LoggingConfig?: AWSCloudFormationResourceVersionLoggingConfig;
        SchemaHandlerPackage: string;
        TypeName: string;
    };
    Type: "AWS::CloudFormation::ResourceVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationResourceVersionLoggingConfig {
    LogGroupName?: string;
    LogRoleArn?: string;
}
export interface AWSCloudFormationStack {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        NotificationARNs?: string[];
        Parameters?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
        TemplateURL: string;
        TimeoutInMinutes?: number;
    };
    Type: "AWS::CloudFormation::Stack";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationStackSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdministrationRoleARN?: string;
        AutoDeployment?: AWSCloudFormationStackSetAutoDeployment;
        CallAs?: string;
        Capabilities?: string[];
        Description?: string;
        ExecutionRoleName?: string;
        OperationPreferences?: AWSCloudFormationStackSetOperationPreferences;
        Parameters?: AWSCloudFormationStackSetParameter[];
        PermissionModel: string;
        StackInstancesGroup?: AWSCloudFormationStackSetStackInstances[];
        StackSetName: string;
        Tags?: Tag[];
        TemplateBody?: string;
        TemplateURL?: string;
    };
    Type: "AWS::CloudFormation::StackSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationStackSetAutoDeployment {
    Enabled?: boolean;
    RetainStacksOnAccountRemoval?: boolean;
}
export interface AWSCloudFormationStackSetOperationPreferences {
    FailureToleranceCount?: number;
    FailureTolerancePercentage?: number;
    MaxConcurrentCount?: number;
    MaxConcurrentPercentage?: number;
    RegionConcurrencyType?: string;
    RegionOrder?: string[];
}
export interface AWSCloudFormationStackSetParameter {
    ParameterKey: string;
    ParameterValue: string;
}
export interface AWSCloudFormationStackSetStackInstances {
    DeploymentTargets: AWSCloudFormationStackSetDeploymentTargets;
    ParameterOverrides?: AWSCloudFormationStackSetParameter[];
    Regions: string[];
}
export interface AWSCloudFormationStackSetDeploymentTargets {
    Accounts?: string[];
    OrganizationalUnitIds?: string[];
}
export interface AWSCloudFormationTypeActivation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AutoUpdate?: boolean;
        ExecutionRoleArn?: string;
        LoggingConfig?: AWSCloudFormationTypeActivationLoggingConfig;
        MajorVersion?: string;
        PublicTypeArn?: string;
        PublisherId?: string;
        Type?: string;
        TypeName?: string;
        TypeNameAlias?: string;
        VersionBump?: string;
    };
    Type: "AWS::CloudFormation::TypeActivation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationTypeActivationLoggingConfig {
    LogGroupName?: string;
    LogRoleArn?: string;
}
export interface AWSCloudFormationWaitCondition {
    CreationPolicy?: {
        [k: string]: unknown;
    };
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Count?: number;
        Handle?: string;
        Timeout?: string;
    };
    Type: "AWS::CloudFormation::WaitCondition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFormationWaitConditionHandle {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {};
    Type: "AWS::CloudFormation::WaitConditionHandle";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontCachePolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CachePolicyConfig: AWSCloudFrontCachePolicyCachePolicyConfig;
    };
    Type: "AWS::CloudFront::CachePolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontCachePolicyCachePolicyConfig {
    Comment?: string;
    DefaultTTL: number;
    MaxTTL: number;
    MinTTL: number;
    Name: string;
    ParametersInCacheKeyAndForwardedToOrigin: AWSCloudFrontCachePolicyParametersInCacheKeyAndForwardedToOrigin;
}
export interface AWSCloudFrontCachePolicyParametersInCacheKeyAndForwardedToOrigin {
    CookiesConfig: AWSCloudFrontCachePolicyCookiesConfig;
    EnableAcceptEncodingBrotli?: boolean;
    EnableAcceptEncodingGzip: boolean;
    HeadersConfig: AWSCloudFrontCachePolicyHeadersConfig;
    QueryStringsConfig: AWSCloudFrontCachePolicyQueryStringsConfig;
}
export interface AWSCloudFrontCachePolicyCookiesConfig {
    CookieBehavior: string;
    Cookies?: string[];
}
export interface AWSCloudFrontCachePolicyHeadersConfig {
    HeaderBehavior: string;
    Headers?: string[];
}
export interface AWSCloudFrontCachePolicyQueryStringsConfig {
    QueryStringBehavior: string;
    QueryStrings?: string[];
}
export interface AWSCloudFrontCloudFrontOriginAccessIdentity {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CloudFrontOriginAccessIdentityConfig: AWSCloudFrontCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig;
    };
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig {
    Comment: string;
}
export interface AWSCloudFrontDistribution {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DistributionConfig: AWSCloudFrontDistributionDistributionConfig;
        Tags?: Tag[];
    };
    Type: "AWS::CloudFront::Distribution";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontDistributionDistributionConfig {
    Aliases?: string[];
    CNAMEs?: string[];
    CacheBehaviors?: AWSCloudFrontDistributionCacheBehavior[];
    Comment?: string;
    CustomErrorResponses?: AWSCloudFrontDistributionCustomErrorResponse[];
    CustomOrigin?: AWSCloudFrontDistributionLegacyCustomOrigin;
    DefaultCacheBehavior?: AWSCloudFrontDistributionDefaultCacheBehavior;
    DefaultRootObject?: string;
    Enabled: boolean;
    HttpVersion?: string;
    IPV6Enabled?: boolean;
    Logging?: AWSCloudFrontDistributionLogging;
    OriginGroups?: AWSCloudFrontDistributionOriginGroups;
    Origins?: AWSCloudFrontDistributionOrigin[];
    PriceClass?: string;
    Restrictions?: AWSCloudFrontDistributionRestrictions;
    S3Origin?: AWSCloudFrontDistributionLegacyS3Origin;
    ViewerCertificate?: AWSCloudFrontDistributionViewerCertificate;
    WebACLId?: string;
}
export interface AWSCloudFrontDistributionCacheBehavior {
    AllowedMethods?: string[];
    CachePolicyId?: string;
    CachedMethods?: string[];
    Compress?: boolean;
    DefaultTTL?: number;
    FieldLevelEncryptionId?: string;
    ForwardedValues?: AWSCloudFrontDistributionForwardedValues;
    FunctionAssociations?: AWSCloudFrontDistributionFunctionAssociation[];
    LambdaFunctionAssociations?: AWSCloudFrontDistributionLambdaFunctionAssociation[];
    MaxTTL?: number;
    MinTTL?: number;
    OriginRequestPolicyId?: string;
    PathPattern: string;
    RealtimeLogConfigArn?: string;
    SmoothStreaming?: boolean;
    TargetOriginId: string;
    TrustedKeyGroups?: string[];
    TrustedSigners?: string[];
    ViewerProtocolPolicy: string;
}
export interface AWSCloudFrontDistributionForwardedValues {
    Cookies?: AWSCloudFrontDistributionCookies;
    Headers?: string[];
    QueryString: boolean;
    QueryStringCacheKeys?: string[];
}
export interface AWSCloudFrontDistributionCookies {
    Forward: string;
    WhitelistedNames?: string[];
}
export interface AWSCloudFrontDistributionFunctionAssociation {
    EventType?: string;
    FunctionARN?: string;
}
export interface AWSCloudFrontDistributionLambdaFunctionAssociation {
    EventType?: string;
    IncludeBody?: boolean;
    LambdaFunctionARN?: string;
}
export interface AWSCloudFrontDistributionCustomErrorResponse {
    ErrorCachingMinTTL?: number;
    ErrorCode: number;
    ResponseCode?: number;
    ResponsePagePath?: string;
}
export interface AWSCloudFrontDistributionLegacyCustomOrigin {
    DNSName: string;
    HTTPPort?: number;
    HTTPSPort?: number;
    OriginProtocolPolicy: string;
    OriginSSLProtocols: string[];
}
export interface AWSCloudFrontDistributionDefaultCacheBehavior {
    AllowedMethods?: string[];
    CachePolicyId?: string;
    CachedMethods?: string[];
    Compress?: boolean;
    DefaultTTL?: number;
    FieldLevelEncryptionId?: string;
    ForwardedValues?: AWSCloudFrontDistributionForwardedValues;
    FunctionAssociations?: AWSCloudFrontDistributionFunctionAssociation[];
    LambdaFunctionAssociations?: AWSCloudFrontDistributionLambdaFunctionAssociation[];
    MaxTTL?: number;
    MinTTL?: number;
    OriginRequestPolicyId?: string;
    RealtimeLogConfigArn?: string;
    SmoothStreaming?: boolean;
    TargetOriginId: string;
    TrustedKeyGroups?: string[];
    TrustedSigners?: string[];
    ViewerProtocolPolicy: string;
}
export interface AWSCloudFrontDistributionLogging {
    Bucket: string;
    IncludeCookies?: boolean;
    Prefix?: string;
}
export interface AWSCloudFrontDistributionOriginGroups {
    Items?: AWSCloudFrontDistributionOriginGroup[];
    Quantity: number;
}
export interface AWSCloudFrontDistributionOriginGroup {
    FailoverCriteria: AWSCloudFrontDistributionOriginGroupFailoverCriteria;
    Id: string;
    Members: AWSCloudFrontDistributionOriginGroupMembers;
}
export interface AWSCloudFrontDistributionOriginGroupFailoverCriteria {
    StatusCodes: AWSCloudFrontDistributionStatusCodes;
}
export interface AWSCloudFrontDistributionStatusCodes {
    Items: number[];
    Quantity: number;
}
export interface AWSCloudFrontDistributionOriginGroupMembers {
    Items: AWSCloudFrontDistributionOriginGroupMember[];
    Quantity: number;
}
export interface AWSCloudFrontDistributionOriginGroupMember {
    OriginId: string;
}
export interface AWSCloudFrontDistributionOrigin {
    ConnectionAttempts?: number;
    ConnectionTimeout?: number;
    CustomOriginConfig?: AWSCloudFrontDistributionCustomOriginConfig;
    DomainName: string;
    Id: string;
    OriginCustomHeaders?: AWSCloudFrontDistributionOriginCustomHeader[];
    OriginPath?: string;
    OriginShield?: AWSCloudFrontDistributionOriginShield;
    S3OriginConfig?: AWSCloudFrontDistributionS3OriginConfig;
}
export interface AWSCloudFrontDistributionCustomOriginConfig {
    HTTPPort?: number;
    HTTPSPort?: number;
    OriginKeepaliveTimeout?: number;
    OriginProtocolPolicy: string;
    OriginReadTimeout?: number;
    OriginSSLProtocols?: string[];
}
export interface AWSCloudFrontDistributionOriginCustomHeader {
    HeaderName: string;
    HeaderValue: string;
}
export interface AWSCloudFrontDistributionOriginShield {
    Enabled?: boolean;
    OriginShieldRegion?: string;
}
export interface AWSCloudFrontDistributionS3OriginConfig {
    OriginAccessIdentity?: string;
}
export interface AWSCloudFrontDistributionRestrictions {
    GeoRestriction: AWSCloudFrontDistributionGeoRestriction;
}
export interface AWSCloudFrontDistributionGeoRestriction {
    Locations?: string[];
    RestrictionType: string;
}
export interface AWSCloudFrontDistributionLegacyS3Origin {
    DNSName: string;
    OriginAccessIdentity?: string;
}
export interface AWSCloudFrontDistributionViewerCertificate {
    AcmCertificateArn?: string;
    CloudFrontDefaultCertificate?: boolean;
    IamCertificateId?: string;
    MinimumProtocolVersion?: string;
    SslSupportMethod?: string;
}
export interface AWSCloudFrontFunction {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoPublish?: boolean;
        FunctionCode?: string;
        FunctionConfig?: AWSCloudFrontFunctionFunctionConfig;
        FunctionMetadata?: AWSCloudFrontFunctionFunctionMetadata;
        Name: string;
    };
    Type: "AWS::CloudFront::Function";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontFunctionFunctionConfig {
    Comment: string;
    Runtime: string;
}
export interface AWSCloudFrontFunctionFunctionMetadata {
    FunctionARN?: string;
}
export interface AWSCloudFrontKeyGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        KeyGroupConfig: AWSCloudFrontKeyGroupKeyGroupConfig;
    };
    Type: "AWS::CloudFront::KeyGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontKeyGroupKeyGroupConfig {
    Comment?: string;
    Items: string[];
    Name: string;
}
export interface AWSCloudFrontOriginRequestPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        OriginRequestPolicyConfig: AWSCloudFrontOriginRequestPolicyOriginRequestPolicyConfig;
    };
    Type: "AWS::CloudFront::OriginRequestPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontOriginRequestPolicyOriginRequestPolicyConfig {
    Comment?: string;
    CookiesConfig: AWSCloudFrontOriginRequestPolicyCookiesConfig;
    HeadersConfig: AWSCloudFrontOriginRequestPolicyHeadersConfig;
    Name: string;
    QueryStringsConfig: AWSCloudFrontOriginRequestPolicyQueryStringsConfig;
}
export interface AWSCloudFrontOriginRequestPolicyCookiesConfig {
    CookieBehavior: string;
    Cookies?: string[];
}
export interface AWSCloudFrontOriginRequestPolicyHeadersConfig {
    HeaderBehavior: string;
    Headers?: string[];
}
export interface AWSCloudFrontOriginRequestPolicyQueryStringsConfig {
    QueryStringBehavior: string;
    QueryStrings?: string[];
}
export interface AWSCloudFrontPublicKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PublicKeyConfig: AWSCloudFrontPublicKeyPublicKeyConfig;
    };
    Type: "AWS::CloudFront::PublicKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontPublicKeyPublicKeyConfig {
    CallerReference: string;
    Comment?: string;
    EncodedKey: string;
    Name: string;
}
export interface AWSCloudFrontRealtimeLogConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EndPoints: AWSCloudFrontRealtimeLogConfigEndPoint[];
        Fields: string[];
        Name: string;
        SamplingRate: number;
    };
    Type: "AWS::CloudFront::RealtimeLogConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontRealtimeLogConfigEndPoint {
    KinesisStreamConfig: AWSCloudFrontRealtimeLogConfigKinesisStreamConfig;
    StreamType: string;
}
export interface AWSCloudFrontRealtimeLogConfigKinesisStreamConfig {
    RoleArn: string;
    StreamArn: string;
}
export interface AWSCloudFrontStreamingDistribution {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        StreamingDistributionConfig: AWSCloudFrontStreamingDistributionStreamingDistributionConfig;
        Tags: Tag[];
    };
    Type: "AWS::CloudFront::StreamingDistribution";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudFrontStreamingDistributionStreamingDistributionConfig {
    Aliases?: string[];
    Comment: string;
    Enabled: boolean;
    Logging?: AWSCloudFrontStreamingDistributionLogging;
    PriceClass?: string;
    S3Origin: AWSCloudFrontStreamingDistributionS3Origin;
    TrustedSigners: AWSCloudFrontStreamingDistributionTrustedSigners;
}
export interface AWSCloudFrontStreamingDistributionLogging {
    Bucket: string;
    Enabled: boolean;
    Prefix: string;
}
export interface AWSCloudFrontStreamingDistributionS3Origin {
    DomainName: string;
    OriginAccessIdentity: string;
}
export interface AWSCloudFrontStreamingDistributionTrustedSigners {
    AwsAccountNumbers?: string[];
    Enabled: boolean;
}
export interface AWSCloudTrailTrail {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CloudWatchLogsLogGroupArn?: string;
        CloudWatchLogsRoleArn?: string;
        EnableLogFileValidation?: boolean;
        EventSelectors?: AWSCloudTrailTrailEventSelector[];
        IncludeGlobalServiceEvents?: boolean;
        InsightSelectors?: AWSCloudTrailTrailInsightSelector[];
        IsLogging: boolean;
        IsMultiRegionTrail?: boolean;
        IsOrganizationTrail?: boolean;
        KMSKeyId?: string;
        S3BucketName: string;
        S3KeyPrefix?: string;
        SnsTopicName?: string;
        Tags?: Tag[];
        TrailName?: string;
    };
    Type: "AWS::CloudTrail::Trail";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudTrailTrailEventSelector {
    DataResources?: AWSCloudTrailTrailDataResource[];
    ExcludeManagementEventSources?: string[];
    IncludeManagementEvents?: boolean;
    ReadWriteType?: string;
}
export interface AWSCloudTrailTrailDataResource {
    Type: string;
    Values?: string[];
}
export interface AWSCloudTrailTrailInsightSelector {
    InsightType?: string;
}
export interface AWSCloudWatchAlarm {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ActionsEnabled?: boolean;
        AlarmActions?: string[];
        AlarmDescription?: string;
        AlarmName?: string;
        ComparisonOperator: string;
        DatapointsToAlarm?: number;
        Dimensions?: AWSCloudWatchAlarmDimension[];
        EvaluateLowSampleCountPercentile?: string;
        EvaluationPeriods: number;
        ExtendedStatistic?: string;
        InsufficientDataActions?: string[];
        MetricName?: string;
        Metrics?: AWSCloudWatchAlarmMetricDataQuery[];
        Namespace?: string;
        OKActions?: string[];
        Period?: number;
        Statistic?: string;
        Threshold?: number;
        ThresholdMetricId?: string;
        TreatMissingData?: string;
        Unit?: string;
    };
    Type: "AWS::CloudWatch::Alarm";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudWatchAlarmDimension {
    Name: string;
    Value: string;
}
export interface AWSCloudWatchAlarmMetricDataQuery {
    AccountId?: string;
    Expression?: string;
    Id: string;
    Label?: string;
    MetricStat?: AWSCloudWatchAlarmMetricStat;
    Period?: number;
    ReturnData?: boolean;
}
export interface AWSCloudWatchAlarmMetricStat {
    Metric: AWSCloudWatchAlarmMetric;
    Period: number;
    Stat: string;
    Unit?: string;
}
export interface AWSCloudWatchAlarmMetric {
    Dimensions?: AWSCloudWatchAlarmDimension[];
    MetricName?: string;
    Namespace?: string;
}
export interface AWSCloudWatchAnomalyDetector {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Configuration?: AWSCloudWatchAnomalyDetectorConfiguration;
        Dimensions?: AWSCloudWatchAnomalyDetectorDimension[];
        MetricName: string;
        Namespace: string;
        Stat: string;
    };
    Type: "AWS::CloudWatch::AnomalyDetector";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudWatchAnomalyDetectorConfiguration {
    ExcludedTimeRanges?: AWSCloudWatchAnomalyDetectorRange[];
    MetricTimeZone?: string;
}
export interface AWSCloudWatchAnomalyDetectorRange {
    EndTime: string;
    StartTime: string;
}
export interface AWSCloudWatchAnomalyDetectorDimension {
    Name: string;
    Value: string;
}
export interface AWSCloudWatchCompositeAlarm {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ActionsEnabled?: boolean;
        AlarmActions?: string[];
        AlarmDescription?: string;
        AlarmName: string;
        AlarmRule: string;
        InsufficientDataActions?: string[];
        OKActions?: string[];
    };
    Type: "AWS::CloudWatch::CompositeAlarm";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudWatchDashboard {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DashboardBody: string;
        DashboardName?: string;
    };
    Type: "AWS::CloudWatch::Dashboard";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudWatchInsightRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        RuleBody: string;
        RuleName: string;
        RuleState: string;
        Tags?: AWSCloudWatchInsightRuleTags;
    };
    Type: "AWS::CloudWatch::InsightRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudWatchInsightRuleTags {}
export interface AWSCloudWatchMetricStream {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ExcludeFilters?: AWSCloudWatchMetricStreamMetricStreamFilter[];
        FirehoseArn: string;
        IncludeFilters?: AWSCloudWatchMetricStreamMetricStreamFilter[];
        Name?: string;
        OutputFormat: string;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::CloudWatch::MetricStream";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCloudWatchMetricStreamMetricStreamFilter {
    Namespace: string;
}
export interface AWSCodeArtifactDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DomainName: string;
        EncryptionKey?: string;
        PermissionsPolicyDocument?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::CodeArtifact::Domain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeArtifactRepository {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        DomainName: string;
        DomainOwner?: string;
        ExternalConnections?: string[];
        PermissionsPolicyDocument?: {
            [k: string]: unknown;
        };
        RepositoryName: string;
        Tags?: Tag[];
        Upstreams?: string[];
    };
    Type: "AWS::CodeArtifact::Repository";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeBuildProject {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Artifacts: AWSCodeBuildProjectArtifacts;
        BadgeEnabled?: boolean;
        BuildBatchConfig?: AWSCodeBuildProjectProjectBuildBatchConfig;
        Cache?: AWSCodeBuildProjectProjectCache;
        ConcurrentBuildLimit?: number;
        Description?: string;
        EncryptionKey?: string;
        Environment: AWSCodeBuildProjectEnvironment;
        FileSystemLocations?: AWSCodeBuildProjectProjectFileSystemLocation[];
        LogsConfig?: AWSCodeBuildProjectLogsConfig;
        Name?: string;
        QueuedTimeoutInMinutes?: number;
        ResourceAccessRole?: string;
        SecondaryArtifacts?: AWSCodeBuildProjectArtifacts[];
        SecondarySourceVersions?: AWSCodeBuildProjectProjectSourceVersion[];
        SecondarySources?: AWSCodeBuildProjectSource[];
        ServiceRole: string;
        Source: AWSCodeBuildProjectSource;
        SourceVersion?: string;
        Tags?: Tag[];
        TimeoutInMinutes?: number;
        Triggers?: AWSCodeBuildProjectProjectTriggers;
        Visibility?: string;
        VpcConfig?: AWSCodeBuildProjectVpcConfig;
    };
    Type: "AWS::CodeBuild::Project";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeBuildProjectArtifacts {
    ArtifactIdentifier?: string;
    EncryptionDisabled?: boolean;
    Location?: string;
    Name?: string;
    NamespaceType?: string;
    OverrideArtifactName?: boolean;
    Packaging?: string;
    Path?: string;
    Type: string;
}
export interface AWSCodeBuildProjectProjectBuildBatchConfig {
    CombineArtifacts?: boolean;
    Restrictions?: AWSCodeBuildProjectBatchRestrictions;
    ServiceRole?: string;
    TimeoutInMins?: number;
}
export interface AWSCodeBuildProjectBatchRestrictions {
    ComputeTypesAllowed?: string[];
    MaximumBuildsAllowed?: number;
}
export interface AWSCodeBuildProjectProjectCache {
    Location?: string;
    Modes?: string[];
    Type: string;
}
export interface AWSCodeBuildProjectEnvironment {
    Certificate?: string;
    ComputeType: string;
    EnvironmentVariables?: AWSCodeBuildProjectEnvironmentVariable[];
    Image: string;
    ImagePullCredentialsType?: string;
    PrivilegedMode?: boolean;
    RegistryCredential?: AWSCodeBuildProjectRegistryCredential;
    Type: string;
}
export interface AWSCodeBuildProjectEnvironmentVariable {
    Name: string;
    Type?: string;
    Value: string;
}
export interface AWSCodeBuildProjectRegistryCredential {
    Credential: string;
    CredentialProvider: string;
}
export interface AWSCodeBuildProjectProjectFileSystemLocation {
    Identifier: string;
    Location: string;
    MountOptions?: string;
    MountPoint: string;
    Type: string;
}
export interface AWSCodeBuildProjectLogsConfig {
    CloudWatchLogs?: AWSCodeBuildProjectCloudWatchLogsConfig;
    S3Logs?: AWSCodeBuildProjectS3LogsConfig;
}
export interface AWSCodeBuildProjectCloudWatchLogsConfig {
    GroupName?: string;
    Status: string;
    StreamName?: string;
}
export interface AWSCodeBuildProjectS3LogsConfig {
    EncryptionDisabled?: boolean;
    Location?: string;
    Status: string;
}
export interface AWSCodeBuildProjectProjectSourceVersion {
    SourceIdentifier: string;
    SourceVersion?: string;
}
export interface AWSCodeBuildProjectSource {
    Auth?: AWSCodeBuildProjectSourceAuth;
    BuildSpec?: string;
    BuildStatusConfig?: AWSCodeBuildProjectBuildStatusConfig;
    GitCloneDepth?: number;
    GitSubmodulesConfig?: AWSCodeBuildProjectGitSubmodulesConfig;
    InsecureSsl?: boolean;
    Location?: string;
    ReportBuildStatus?: boolean;
    SourceIdentifier?: string;
    Type: string;
}
export interface AWSCodeBuildProjectSourceAuth {
    Resource?: string;
    Type: string;
}
export interface AWSCodeBuildProjectBuildStatusConfig {
    Context?: string;
    TargetUrl?: string;
}
export interface AWSCodeBuildProjectGitSubmodulesConfig {
    FetchSubmodules: boolean;
}
export interface AWSCodeBuildProjectProjectTriggers {
    BuildType?: string;
    FilterGroups?: AWSCodeBuildProjectFilterGroup[];
    Webhook?: boolean;
}
export interface AWSCodeBuildProjectFilterGroup {}
export interface AWSCodeBuildProjectVpcConfig {
    SecurityGroupIds?: string[];
    Subnets?: string[];
    VpcId?: string;
}
export interface AWSCodeBuildReportGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeleteReports?: boolean;
        ExportConfig: AWSCodeBuildReportGroupReportExportConfig;
        Name?: string;
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::CodeBuild::ReportGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeBuildReportGroupReportExportConfig {
    ExportConfigType: string;
    S3Destination?: AWSCodeBuildReportGroupS3ReportExportConfig;
}
export interface AWSCodeBuildReportGroupS3ReportExportConfig {
    Bucket: string;
    BucketOwner?: string;
    EncryptionDisabled?: boolean;
    EncryptionKey?: string;
    Packaging?: string;
    Path?: string;
}
export interface AWSCodeBuildSourceCredential {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthType: string;
        ServerType: string;
        Token: string;
        Username?: string;
    };
    Type: "AWS::CodeBuild::SourceCredential";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeCommitRepository {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Code?: AWSCodeCommitRepositoryCode;
        RepositoryDescription?: string;
        RepositoryName: string;
        Tags?: Tag[];
        Triggers?: AWSCodeCommitRepositoryRepositoryTrigger[];
    };
    Type: "AWS::CodeCommit::Repository";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeCommitRepositoryCode {
    BranchName?: string;
    S3: AWSCodeCommitRepositoryS3;
}
export interface AWSCodeCommitRepositoryS3 {
    Bucket: string;
    Key: string;
    ObjectVersion?: string;
}
export interface AWSCodeCommitRepositoryRepositoryTrigger {
    Branches?: string[];
    CustomData?: string;
    DestinationArn: string;
    Events: string[];
    Name: string;
}
export interface AWSCodeDeployApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ApplicationName?: string;
        ComputePlatform?: string;
        Tags?: Tag[];
    };
    Type: "AWS::CodeDeploy::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeDeployDeploymentConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ComputePlatform?: string;
        DeploymentConfigName?: string;
        MinimumHealthyHosts?: AWSCodeDeployDeploymentConfigMinimumHealthyHosts;
        TrafficRoutingConfig?: AWSCodeDeployDeploymentConfigTrafficRoutingConfig;
    };
    Type: "AWS::CodeDeploy::DeploymentConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeDeployDeploymentConfigMinimumHealthyHosts {
    Type: string;
    Value: number;
}
export interface AWSCodeDeployDeploymentConfigTrafficRoutingConfig {
    TimeBasedCanary?: AWSCodeDeployDeploymentConfigTimeBasedCanary;
    TimeBasedLinear?: AWSCodeDeployDeploymentConfigTimeBasedLinear;
    Type: string;
}
export interface AWSCodeDeployDeploymentConfigTimeBasedCanary {
    CanaryInterval: number;
    CanaryPercentage: number;
}
export interface AWSCodeDeployDeploymentConfigTimeBasedLinear {
    LinearInterval: number;
    LinearPercentage: number;
}
export interface AWSCodeDeployDeploymentGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AlarmConfiguration?: AWSCodeDeployDeploymentGroupAlarmConfiguration;
        ApplicationName: string;
        AutoRollbackConfiguration?: AWSCodeDeployDeploymentGroupAutoRollbackConfiguration;
        AutoScalingGroups?: string[];
        BlueGreenDeploymentConfiguration?: AWSCodeDeployDeploymentGroupBlueGreenDeploymentConfiguration;
        Deployment?: AWSCodeDeployDeploymentGroupDeployment;
        DeploymentConfigName?: string;
        DeploymentGroupName?: string;
        DeploymentStyle?: AWSCodeDeployDeploymentGroupDeploymentStyle;
        ECSServices?: AWSCodeDeployDeploymentGroupECSService[];
        Ec2TagFilters?: AWSCodeDeployDeploymentGroupEC2TagFilter[];
        Ec2TagSet?: AWSCodeDeployDeploymentGroupEC2TagSet;
        LoadBalancerInfo?: AWSCodeDeployDeploymentGroupLoadBalancerInfo;
        OnPremisesInstanceTagFilters?: AWSCodeDeployDeploymentGroupTagFilter[];
        OnPremisesTagSet?: AWSCodeDeployDeploymentGroupOnPremisesTagSet;
        ServiceRoleArn: string;
        TriggerConfigurations?: AWSCodeDeployDeploymentGroupTriggerConfig[];
    };
    Type: "AWS::CodeDeploy::DeploymentGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeDeployDeploymentGroupAlarmConfiguration {
    Alarms?: AWSCodeDeployDeploymentGroupAlarm[];
    Enabled?: boolean;
    IgnorePollAlarmFailure?: boolean;
}
export interface AWSCodeDeployDeploymentGroupAlarm {
    Name?: string;
}
export interface AWSCodeDeployDeploymentGroupAutoRollbackConfiguration {
    Enabled?: boolean;
    Events?: string[];
}
export interface AWSCodeDeployDeploymentGroupBlueGreenDeploymentConfiguration {
    DeploymentReadyOption?: AWSCodeDeployDeploymentGroupDeploymentReadyOption;
    GreenFleetProvisioningOption?: AWSCodeDeployDeploymentGroupGreenFleetProvisioningOption;
    TerminateBlueInstancesOnDeploymentSuccess?: AWSCodeDeployDeploymentGroupBlueInstanceTerminationOption;
}
export interface AWSCodeDeployDeploymentGroupDeploymentReadyOption {
    ActionOnTimeout?: string;
    WaitTimeInMinutes?: number;
}
export interface AWSCodeDeployDeploymentGroupGreenFleetProvisioningOption {
    Action?: string;
}
export interface AWSCodeDeployDeploymentGroupBlueInstanceTerminationOption {
    Action?: string;
    TerminationWaitTimeInMinutes?: number;
}
export interface AWSCodeDeployDeploymentGroupDeployment {
    Description?: string;
    IgnoreApplicationStopFailures?: boolean;
    Revision: AWSCodeDeployDeploymentGroupRevisionLocation;
}
export interface AWSCodeDeployDeploymentGroupRevisionLocation {
    GitHubLocation?: AWSCodeDeployDeploymentGroupGitHubLocation;
    RevisionType?: string;
    S3Location?: AWSCodeDeployDeploymentGroupS3Location;
}
export interface AWSCodeDeployDeploymentGroupGitHubLocation {
    CommitId: string;
    Repository: string;
}
export interface AWSCodeDeployDeploymentGroupS3Location {
    Bucket: string;
    BundleType?: string;
    ETag?: string;
    Key: string;
    Version?: string;
}
export interface AWSCodeDeployDeploymentGroupDeploymentStyle {
    DeploymentOption?: string;
    DeploymentType?: string;
}
export interface AWSCodeDeployDeploymentGroupECSService {
    ClusterName: string;
    ServiceName: string;
}
export interface AWSCodeDeployDeploymentGroupEC2TagFilter {
    Key?: string;
    Type?: string;
    Value?: string;
}
export interface AWSCodeDeployDeploymentGroupEC2TagSet {
    Ec2TagSetList?: AWSCodeDeployDeploymentGroupEC2TagSetListObject[];
}
export interface AWSCodeDeployDeploymentGroupEC2TagSetListObject {
    Ec2TagGroup?: AWSCodeDeployDeploymentGroupEC2TagFilter[];
}
export interface AWSCodeDeployDeploymentGroupLoadBalancerInfo {
    ElbInfoList?: AWSCodeDeployDeploymentGroupELBInfo[];
    TargetGroupInfoList?: AWSCodeDeployDeploymentGroupTargetGroupInfo[];
}
export interface AWSCodeDeployDeploymentGroupELBInfo {
    Name?: string;
}
export interface AWSCodeDeployDeploymentGroupTargetGroupInfo {
    Name?: string;
}
export interface AWSCodeDeployDeploymentGroupTagFilter {
    Key?: string;
    Type?: string;
    Value?: string;
}
export interface AWSCodeDeployDeploymentGroupOnPremisesTagSet {
    OnPremisesTagSetList?: AWSCodeDeployDeploymentGroupOnPremisesTagSetListObject[];
}
export interface AWSCodeDeployDeploymentGroupOnPremisesTagSetListObject {
    OnPremisesTagGroup?: AWSCodeDeployDeploymentGroupTagFilter[];
}
export interface AWSCodeDeployDeploymentGroupTriggerConfig {
    TriggerEvents?: string[];
    TriggerName?: string;
    TriggerTargetArn?: string;
}
export interface AWSCodeGuruProfilerProfilingGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AgentPermissions?: {
            [k: string]: unknown;
        };
        AnomalyDetectionNotificationConfiguration?: AWSCodeGuruProfilerProfilingGroupChannel[];
        ComputePlatform?: string;
        ProfilingGroupName: string;
        Tags?: Tag[];
    };
    Type: "AWS::CodeGuruProfiler::ProfilingGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeGuruProfilerProfilingGroupChannel {
    channelId?: string;
    channelUri: string;
}
export interface AWSCodeGuruReviewerRepositoryAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BucketName?: string;
        ConnectionArn?: string;
        Name: string;
        Owner?: string;
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::CodeGuruReviewer::RepositoryAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodePipelineCustomActionType {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Category: string;
        ConfigurationProperties?: AWSCodePipelineCustomActionTypeConfigurationProperties[];
        InputArtifactDetails: AWSCodePipelineCustomActionTypeArtifactDetails;
        OutputArtifactDetails: AWSCodePipelineCustomActionTypeArtifactDetails;
        Provider: string;
        Settings?: AWSCodePipelineCustomActionTypeSettings;
        Tags?: Tag[];
        Version: string;
    };
    Type: "AWS::CodePipeline::CustomActionType";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodePipelineCustomActionTypeConfigurationProperties {
    Description?: string;
    Key: boolean;
    Name: string;
    Queryable?: boolean;
    Required: boolean;
    Secret: boolean;
    Type?: string;
}
export interface AWSCodePipelineCustomActionTypeArtifactDetails {
    MaximumCount: number;
    MinimumCount: number;
}
export interface AWSCodePipelineCustomActionTypeSettings {
    EntityUrlTemplate?: string;
    ExecutionUrlTemplate?: string;
    RevisionUrlTemplate?: string;
    ThirdPartyConfigurationUrl?: string;
}
export interface AWSCodePipelinePipeline {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ArtifactStore?: AWSCodePipelinePipelineArtifactStore;
        ArtifactStores?: AWSCodePipelinePipelineArtifactStoreMap[];
        DisableInboundStageTransitions?: AWSCodePipelinePipelineStageTransition[];
        Name?: string;
        RestartExecutionOnUpdate?: boolean;
        RoleArn: string;
        Stages: AWSCodePipelinePipelineStageDeclaration[];
        Tags?: Tag[];
    };
    Type: "AWS::CodePipeline::Pipeline";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodePipelinePipelineArtifactStore {
    EncryptionKey?: AWSCodePipelinePipelineEncryptionKey;
    Location: string;
    Type: string;
}
export interface AWSCodePipelinePipelineEncryptionKey {
    Id: string;
    Type: string;
}
export interface AWSCodePipelinePipelineArtifactStoreMap {
    ArtifactStore: AWSCodePipelinePipelineArtifactStore;
    Region: string;
}
export interface AWSCodePipelinePipelineStageTransition {
    Reason: string;
    StageName: string;
}
export interface AWSCodePipelinePipelineStageDeclaration {
    Actions: AWSCodePipelinePipelineActionDeclaration[];
    Blockers?: AWSCodePipelinePipelineBlockerDeclaration[];
    Name: string;
}
export interface AWSCodePipelinePipelineActionDeclaration {
    ActionTypeId: AWSCodePipelinePipelineActionTypeId;
    Configuration?: {
        [k: string]: unknown;
    };
    InputArtifacts?: AWSCodePipelinePipelineInputArtifact[];
    Name: string;
    Namespace?: string;
    OutputArtifacts?: AWSCodePipelinePipelineOutputArtifact[];
    Region?: string;
    RoleArn?: string;
    RunOrder?: number;
}
export interface AWSCodePipelinePipelineActionTypeId {
    Category: string;
    Owner: string;
    Provider: string;
    Version: string;
}
export interface AWSCodePipelinePipelineInputArtifact {
    Name: string;
}
export interface AWSCodePipelinePipelineOutputArtifact {
    Name: string;
}
export interface AWSCodePipelinePipelineBlockerDeclaration {
    Name: string;
    Type: string;
}
export interface AWSCodePipelineWebhook {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Authentication: string;
        AuthenticationConfiguration: AWSCodePipelineWebhookWebhookAuthConfiguration;
        Filters: AWSCodePipelineWebhookWebhookFilterRule[];
        Name?: string;
        RegisterWithThirdParty?: boolean;
        TargetAction: string;
        TargetPipeline: string;
        TargetPipelineVersion: number;
    };
    Type: "AWS::CodePipeline::Webhook";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodePipelineWebhookWebhookAuthConfiguration {
    AllowedIPRange?: string;
    SecretToken?: string;
}
export interface AWSCodePipelineWebhookWebhookFilterRule {
    JsonPath: string;
    MatchEquals?: string;
}
export interface AWSCodeStarGitHubRepository {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Code?: AWSCodeStarGitHubRepositoryCode;
        ConnectionArn?: string;
        EnableIssues?: boolean;
        IsPrivate?: boolean;
        RepositoryAccessToken?: string;
        RepositoryDescription?: string;
        RepositoryName: string;
        RepositoryOwner: string;
    };
    Type: "AWS::CodeStar::GitHubRepository";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeStarGitHubRepositoryCode {
    S3: AWSCodeStarGitHubRepositoryS3;
}
export interface AWSCodeStarGitHubRepositoryS3 {
    Bucket: string;
    Key: string;
    ObjectVersion?: string;
}
export interface AWSCodeStarConnectionsConnection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectionName: string;
        HostArn?: string;
        ProviderType?: string;
        Tags?: Tag[];
    };
    Type: "AWS::CodeStarConnections::Connection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeStarNotificationsNotificationRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DetailType: string;
        EventTypeIds: string[];
        Name: string;
        Resource: string;
        Status?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Targets: AWSCodeStarNotificationsNotificationRuleTarget[];
    };
    Type: "AWS::CodeStarNotifications::NotificationRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCodeStarNotificationsNotificationRuleTarget {
    TargetAddress: string;
    TargetType: string;
}
export interface AWSCognitoIdentityPool {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowClassicFlow?: boolean;
        AllowUnauthenticatedIdentities: boolean;
        CognitoEvents?: {
            [k: string]: unknown;
        };
        CognitoIdentityProviders?: AWSCognitoIdentityPoolCognitoIdentityProvider[];
        CognitoStreams?: AWSCognitoIdentityPoolCognitoStreams;
        DeveloperProviderName?: string;
        IdentityPoolName?: string;
        OpenIdConnectProviderARNs?: string[];
        PushSync?: AWSCognitoIdentityPoolPushSync;
        SamlProviderARNs?: string[];
        SupportedLoginProviders?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Cognito::IdentityPool";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoIdentityPoolCognitoIdentityProvider {
    ClientId?: string;
    ProviderName?: string;
    ServerSideTokenCheck?: boolean;
}
export interface AWSCognitoIdentityPoolCognitoStreams {
    RoleArn?: string;
    StreamName?: string;
    StreamingStatus?: string;
}
export interface AWSCognitoIdentityPoolPushSync {
    ApplicationArns?: string[];
    RoleArn?: string;
}
export interface AWSCognitoIdentityPoolRoleAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        IdentityPoolId: string;
        RoleMappings?: {
            [k: string]: unknown;
        };
        Roles?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Cognito::IdentityPoolRoleAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPool {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AccountRecoverySetting?: AWSCognitoUserPoolAccountRecoverySetting;
        AdminCreateUserConfig?: AWSCognitoUserPoolAdminCreateUserConfig;
        AliasAttributes?: string[];
        AutoVerifiedAttributes?: string[];
        DeviceConfiguration?: AWSCognitoUserPoolDeviceConfiguration;
        EmailConfiguration?: AWSCognitoUserPoolEmailConfiguration;
        EmailVerificationMessage?: string;
        EmailVerificationSubject?: string;
        EnabledMfas?: string[];
        LambdaConfig?: AWSCognitoUserPoolLambdaConfig;
        MfaConfiguration?: string;
        Policies?: AWSCognitoUserPoolPolicies;
        Schema?: AWSCognitoUserPoolSchemaAttribute[];
        SmsAuthenticationMessage?: string;
        SmsConfiguration?: AWSCognitoUserPoolSmsConfiguration;
        SmsVerificationMessage?: string;
        UserPoolAddOns?: AWSCognitoUserPoolUserPoolAddOns;
        UserPoolName?: string;
        UserPoolTags?: {
            [k: string]: unknown;
        };
        UsernameAttributes?: string[];
        UsernameConfiguration?: AWSCognitoUserPoolUsernameConfiguration;
        VerificationMessageTemplate?: AWSCognitoUserPoolVerificationMessageTemplate;
    };
    Type: "AWS::Cognito::UserPool";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolAccountRecoverySetting {
    RecoveryMechanisms?: AWSCognitoUserPoolRecoveryOption[];
}
export interface AWSCognitoUserPoolRecoveryOption {
    Name?: string;
    Priority?: number;
}
export interface AWSCognitoUserPoolAdminCreateUserConfig {
    AllowAdminCreateUserOnly?: boolean;
    InviteMessageTemplate?: AWSCognitoUserPoolInviteMessageTemplate;
    UnusedAccountValidityDays?: number;
}
export interface AWSCognitoUserPoolInviteMessageTemplate {
    EmailMessage?: string;
    EmailSubject?: string;
    SMSMessage?: string;
}
export interface AWSCognitoUserPoolDeviceConfiguration {
    ChallengeRequiredOnNewDevice?: boolean;
    DeviceOnlyRememberedOnUserPrompt?: boolean;
}
export interface AWSCognitoUserPoolEmailConfiguration {
    ConfigurationSet?: string;
    EmailSendingAccount?: string;
    From?: string;
    ReplyToEmailAddress?: string;
    SourceArn?: string;
}
export interface AWSCognitoUserPoolLambdaConfig {
    CreateAuthChallenge?: string;
    CustomEmailSender?: AWSCognitoUserPoolCustomEmailSender;
    CustomMessage?: string;
    CustomSMSSender?: AWSCognitoUserPoolCustomSMSSender;
    DefineAuthChallenge?: string;
    KMSKeyID?: string;
    PostAuthentication?: string;
    PostConfirmation?: string;
    PreAuthentication?: string;
    PreSignUp?: string;
    PreTokenGeneration?: string;
    UserMigration?: string;
    VerifyAuthChallengeResponse?: string;
}
export interface AWSCognitoUserPoolCustomEmailSender {
    LambdaArn?: string;
    LambdaVersion?: string;
}
export interface AWSCognitoUserPoolCustomSMSSender {
    LambdaArn?: string;
    LambdaVersion?: string;
}
export interface AWSCognitoUserPoolPolicies {
    PasswordPolicy?: AWSCognitoUserPoolPasswordPolicy;
}
export interface AWSCognitoUserPoolPasswordPolicy {
    MinimumLength?: number;
    RequireLowercase?: boolean;
    RequireNumbers?: boolean;
    RequireSymbols?: boolean;
    RequireUppercase?: boolean;
    TemporaryPasswordValidityDays?: number;
}
export interface AWSCognitoUserPoolSchemaAttribute {
    AttributeDataType?: string;
    DeveloperOnlyAttribute?: boolean;
    Mutable?: boolean;
    Name?: string;
    NumberAttributeConstraints?: AWSCognitoUserPoolNumberAttributeConstraints;
    Required?: boolean;
    StringAttributeConstraints?: AWSCognitoUserPoolStringAttributeConstraints;
}
export interface AWSCognitoUserPoolNumberAttributeConstraints {
    MaxValue?: string;
    MinValue?: string;
}
export interface AWSCognitoUserPoolStringAttributeConstraints {
    MaxLength?: string;
    MinLength?: string;
}
export interface AWSCognitoUserPoolSmsConfiguration {
    ExternalId?: string;
    SnsCallerArn?: string;
}
export interface AWSCognitoUserPoolUserPoolAddOns {
    AdvancedSecurityMode?: string;
}
export interface AWSCognitoUserPoolUsernameConfiguration {
    CaseSensitive?: boolean;
}
export interface AWSCognitoUserPoolVerificationMessageTemplate {
    DefaultEmailOption?: string;
    EmailMessage?: string;
    EmailMessageByLink?: string;
    EmailSubject?: string;
    EmailSubjectByLink?: string;
    SmsMessage?: string;
}
export interface AWSCognitoUserPoolClient {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessTokenValidity?: number;
        AllowedOAuthFlows?: string[];
        AllowedOAuthFlowsUserPoolClient?: boolean;
        AllowedOAuthScopes?: string[];
        AnalyticsConfiguration?: AWSCognitoUserPoolClientAnalyticsConfiguration;
        CallbackURLs?: string[];
        ClientName?: string;
        DefaultRedirectURI?: string;
        EnableTokenRevocation?: boolean;
        ExplicitAuthFlows?: string[];
        GenerateSecret?: boolean;
        IdTokenValidity?: number;
        LogoutURLs?: string[];
        PreventUserExistenceErrors?: string;
        ReadAttributes?: string[];
        RefreshTokenValidity?: number;
        SupportedIdentityProviders?: string[];
        TokenValidityUnits?: AWSCognitoUserPoolClientTokenValidityUnits;
        UserPoolId: string;
        WriteAttributes?: string[];
    };
    Type: "AWS::Cognito::UserPoolClient";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolClientAnalyticsConfiguration {
    ApplicationArn?: string;
    ApplicationId?: string;
    ExternalId?: string;
    RoleArn?: string;
    UserDataShared?: boolean;
}
export interface AWSCognitoUserPoolClientTokenValidityUnits {
    AccessToken?: string;
    IdToken?: string;
    RefreshToken?: string;
}
export interface AWSCognitoUserPoolDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CustomDomainConfig?: AWSCognitoUserPoolDomainCustomDomainConfigType;
        Domain: string;
        UserPoolId: string;
    };
    Type: "AWS::Cognito::UserPoolDomain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolDomainCustomDomainConfigType {
    CertificateArn?: string;
}
export interface AWSCognitoUserPoolGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        GroupName?: string;
        Precedence?: number;
        RoleArn?: string;
        UserPoolId: string;
    };
    Type: "AWS::Cognito::UserPoolGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolIdentityProvider {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AttributeMapping?: {
            [k: string]: unknown;
        };
        IdpIdentifiers?: string[];
        ProviderDetails?: {
            [k: string]: unknown;
        };
        ProviderName: string;
        ProviderType: string;
        UserPoolId: string;
    };
    Type: "AWS::Cognito::UserPoolIdentityProvider";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolResourceServer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Identifier: string;
        Name: string;
        Scopes?: AWSCognitoUserPoolResourceServerResourceServerScopeType[];
        UserPoolId: string;
    };
    Type: "AWS::Cognito::UserPoolResourceServer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolResourceServerResourceServerScopeType {
    ScopeDescription: string;
    ScopeName: string;
}
export interface AWSCognitoUserPoolRiskConfigurationAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccountTakeoverRiskConfiguration?: AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType;
        ClientId: string;
        CompromisedCredentialsRiskConfiguration?: AWSCognitoUserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType;
        RiskExceptionConfiguration?: AWSCognitoUserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType;
        UserPoolId: string;
    };
    Type: "AWS::Cognito::UserPoolRiskConfigurationAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType {
    Actions: AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverActionsType;
    NotifyConfiguration?: AWSCognitoUserPoolRiskConfigurationAttachmentNotifyConfigurationType;
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverActionsType {
    HighAction?: AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
    LowAction?: AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
    MediumAction?: AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentAccountTakeoverActionType {
    EventAction: string;
    Notify: boolean;
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentNotifyConfigurationType {
    BlockEmail?: AWSCognitoUserPoolRiskConfigurationAttachmentNotifyEmailType;
    From?: string;
    MfaEmail?: AWSCognitoUserPoolRiskConfigurationAttachmentNotifyEmailType;
    NoActionEmail?: AWSCognitoUserPoolRiskConfigurationAttachmentNotifyEmailType;
    ReplyTo?: string;
    SourceArn: string;
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentNotifyEmailType {
    HtmlBody?: string;
    Subject: string;
    TextBody?: string;
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType {
    Actions: AWSCognitoUserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType;
    EventFilter?: string[];
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType {
    EventAction: string;
}
export interface AWSCognitoUserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType {
    BlockedIPRangeList?: string[];
    SkippedIPRangeList?: string[];
}
export interface AWSCognitoUserPoolUICustomizationAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CSS?: string;
        ClientId: string;
        UserPoolId: string;
    };
    Type: "AWS::Cognito::UserPoolUICustomizationAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolUser {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClientMetadata?: {
            [k: string]: unknown;
        };
        DesiredDeliveryMediums?: string[];
        ForceAliasCreation?: boolean;
        MessageAction?: string;
        UserAttributes?: AWSCognitoUserPoolUserAttributeType[];
        UserPoolId: string;
        Username?: string;
        ValidationData?: AWSCognitoUserPoolUserAttributeType[];
    };
    Type: "AWS::Cognito::UserPoolUser";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCognitoUserPoolUserAttributeType {
    Name?: string;
    Value?: string;
}
export interface AWSCognitoUserPoolUserToGroupAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GroupName: string;
        UserPoolId: string;
        Username: string;
    };
    Type: "AWS::Cognito::UserPoolUserToGroupAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigAggregationAuthorization {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthorizedAccountId: string;
        AuthorizedAwsRegion: string;
        Tags?: Tag[];
    };
    Type: "AWS::Config::AggregationAuthorization";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigConfigRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConfigRuleName?: string;
        Description?: string;
        InputParameters?: {
            [k: string]: unknown;
        };
        MaximumExecutionFrequency?: string;
        Scope?: AWSConfigConfigRuleScope;
        Source: AWSConfigConfigRuleSource;
    };
    Type: "AWS::Config::ConfigRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigConfigRuleScope {
    ComplianceResourceId?: string;
    ComplianceResourceTypes?: string[];
    TagKey?: string;
    TagValue?: string;
}
export interface AWSConfigConfigRuleSource {
    Owner: string;
    SourceDetails?: AWSConfigConfigRuleSourceDetail[];
    SourceIdentifier: string;
}
export interface AWSConfigConfigRuleSourceDetail {
    EventSource: string;
    MaximumExecutionFrequency?: string;
    MessageType: string;
}
export interface AWSConfigConfigurationAggregator {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AccountAggregationSources?: AWSConfigConfigurationAggregatorAccountAggregationSource[];
        ConfigurationAggregatorName?: string;
        OrganizationAggregationSource?: AWSConfigConfigurationAggregatorOrganizationAggregationSource;
        Tags?: Tag[];
    };
    Type: "AWS::Config::ConfigurationAggregator";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigConfigurationAggregatorAccountAggregationSource {
    AccountIds: string[];
    AllAwsRegions?: boolean;
    AwsRegions?: string[];
}
export interface AWSConfigConfigurationAggregatorOrganizationAggregationSource {
    AllAwsRegions?: boolean;
    AwsRegions?: string[];
    RoleArn: string;
}
export interface AWSConfigConfigurationRecorder {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        RecordingGroup?: AWSConfigConfigurationRecorderRecordingGroup;
        RoleARN: string;
    };
    Type: "AWS::Config::ConfigurationRecorder";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigConfigurationRecorderRecordingGroup {
    AllSupported?: boolean;
    IncludeGlobalResourceTypes?: boolean;
    ResourceTypes?: string[];
}
export interface AWSConfigConformancePack {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConformancePackInputParameters?: AWSConfigConformancePackConformancePackInputParameter[];
        ConformancePackName: string;
        DeliveryS3Bucket?: string;
        DeliveryS3KeyPrefix?: string;
        TemplateBody?: string;
        TemplateS3Uri?: string;
    };
    Type: "AWS::Config::ConformancePack";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigConformancePackConformancePackInputParameter {
    ParameterName: string;
    ParameterValue: string;
}
export interface AWSConfigDeliveryChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConfigSnapshotDeliveryProperties?: AWSConfigDeliveryChannelConfigSnapshotDeliveryProperties;
        Name?: string;
        S3BucketName: string;
        S3KeyPrefix?: string;
        S3KmsKeyArn?: string;
        SnsTopicARN?: string;
    };
    Type: "AWS::Config::DeliveryChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigDeliveryChannelConfigSnapshotDeliveryProperties {
    DeliveryFrequency?: string;
}
export interface AWSConfigOrganizationConfigRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ExcludedAccounts?: string[];
        OrganizationConfigRuleName: string;
        OrganizationCustomRuleMetadata?: AWSConfigOrganizationConfigRuleOrganizationCustomRuleMetadata;
        OrganizationManagedRuleMetadata?: AWSConfigOrganizationConfigRuleOrganizationManagedRuleMetadata;
    };
    Type: "AWS::Config::OrganizationConfigRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigOrganizationConfigRuleOrganizationCustomRuleMetadata {
    Description?: string;
    InputParameters?: string;
    LambdaFunctionArn: string;
    MaximumExecutionFrequency?: string;
    OrganizationConfigRuleTriggerTypes: string[];
    ResourceIdScope?: string;
    ResourceTypesScope?: string[];
    TagKeyScope?: string;
    TagValueScope?: string;
}
export interface AWSConfigOrganizationConfigRuleOrganizationManagedRuleMetadata {
    Description?: string;
    InputParameters?: string;
    MaximumExecutionFrequency?: string;
    ResourceIdScope?: string;
    ResourceTypesScope?: string[];
    RuleIdentifier: string;
    TagKeyScope?: string;
    TagValueScope?: string;
}
export interface AWSConfigOrganizationConformancePack {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConformancePackInputParameters?: AWSConfigOrganizationConformancePackConformancePackInputParameter[];
        DeliveryS3Bucket?: string;
        DeliveryS3KeyPrefix?: string;
        ExcludedAccounts?: string[];
        OrganizationConformancePackName: string;
        TemplateBody?: string;
        TemplateS3Uri?: string;
    };
    Type: "AWS::Config::OrganizationConformancePack";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigOrganizationConformancePackConformancePackInputParameter {
    ParameterName: string;
    ParameterValue: string;
}
export interface AWSConfigRemediationConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Automatic?: boolean;
        ConfigRuleName: string;
        ExecutionControls?: AWSConfigRemediationConfigurationExecutionControls;
        MaximumAutomaticAttempts?: number;
        Parameters?: {
            [k: string]: unknown;
        };
        ResourceType?: string;
        RetryAttemptSeconds?: number;
        TargetId: string;
        TargetType: string;
        TargetVersion?: string;
    };
    Type: "AWS::Config::RemediationConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConfigRemediationConfigurationExecutionControls {
    SsmControls?: AWSConfigRemediationConfigurationSsmControls;
}
export interface AWSConfigRemediationConfigurationSsmControls {
    ConcurrentExecutionRatePercentage?: number;
    ErrorPercentage?: number;
}
export interface AWSConfigStoredQuery {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        QueryDescription?: string;
        QueryExpression: string;
        QueryName: string;
        Tags?: Tag[];
    };
    Type: "AWS::Config::StoredQuery";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConnectQuickConnect {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        InstanceArn: string;
        Name: string;
        QuickConnectConfig: AWSConnectQuickConnectQuickConnectConfig;
        Tags?: Tag[];
    };
    Type: "AWS::Connect::QuickConnect";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSConnectQuickConnectQuickConnectConfig {
    PhoneConfig?: AWSConnectQuickConnectPhoneNumberQuickConnectConfig;
    QueueConfig?: AWSConnectQuickConnectQueueQuickConnectConfig;
    QuickConnectType: string;
    UserConfig?: AWSConnectQuickConnectUserQuickConnectConfig;
}
export interface AWSConnectQuickConnectPhoneNumberQuickConnectConfig {
    PhoneNumber: string;
}
export interface AWSConnectQuickConnectQueueQuickConnectConfig {
    ContactFlowArn: string;
    QueueArn: string;
}
export interface AWSConnectQuickConnectUserQuickConnectConfig {
    ContactFlowArn: string;
    UserArn: string;
}
export interface AWSCustomerProfilesDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeadLetterQueueUrl?: string;
        DefaultEncryptionKey?: string;
        DefaultExpirationDays?: number;
        DomainName: string;
        Tags?: Tag[];
    };
    Type: "AWS::CustomerProfiles::Domain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCustomerProfilesIntegration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DomainName: string;
        FlowDefinition?: AWSCustomerProfilesIntegrationFlowDefinition;
        ObjectTypeName: string;
        Tags?: Tag[];
        Uri?: string;
    };
    Type: "AWS::CustomerProfiles::Integration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCustomerProfilesIntegrationFlowDefinition {
    Description?: string;
    FlowName: string;
    KmsArn: string;
    SourceFlowConfig: AWSCustomerProfilesIntegrationSourceFlowConfig;
    Tasks: AWSCustomerProfilesIntegrationTask[];
    TriggerConfig: AWSCustomerProfilesIntegrationTriggerConfig;
}
export interface AWSCustomerProfilesIntegrationSourceFlowConfig {
    ConnectorProfileName?: string;
    ConnectorType: string;
    IncrementalPullConfig?: AWSCustomerProfilesIntegrationIncrementalPullConfig;
    SourceConnectorProperties: AWSCustomerProfilesIntegrationSourceConnectorProperties;
}
export interface AWSCustomerProfilesIntegrationIncrementalPullConfig {
    DatetimeTypeFieldName?: string;
}
export interface AWSCustomerProfilesIntegrationSourceConnectorProperties {
    Marketo?: AWSCustomerProfilesIntegrationMarketoSourceProperties;
    S3?: AWSCustomerProfilesIntegrationS3SourceProperties;
    Salesforce?: AWSCustomerProfilesIntegrationSalesforceSourceProperties;
    ServiceNow?: AWSCustomerProfilesIntegrationServiceNowSourceProperties;
    Zendesk?: AWSCustomerProfilesIntegrationZendeskSourceProperties;
}
export interface AWSCustomerProfilesIntegrationMarketoSourceProperties {
    Object: string;
}
export interface AWSCustomerProfilesIntegrationS3SourceProperties {
    BucketName: string;
    BucketPrefix?: string;
}
export interface AWSCustomerProfilesIntegrationSalesforceSourceProperties {
    EnableDynamicFieldUpdate?: boolean;
    IncludeDeletedRecords?: boolean;
    Object: string;
}
export interface AWSCustomerProfilesIntegrationServiceNowSourceProperties {
    Object: string;
}
export interface AWSCustomerProfilesIntegrationZendeskSourceProperties {
    Object: string;
}
export interface AWSCustomerProfilesIntegrationTask {
    ConnectorOperator?: AWSCustomerProfilesIntegrationConnectorOperator;
    DestinationField?: string;
    SourceFields: string[];
    TaskProperties?: AWSCustomerProfilesIntegrationTaskPropertiesMap[];
    TaskType: string;
}
export interface AWSCustomerProfilesIntegrationConnectorOperator {
    Marketo?: string;
    S3?: string;
    Salesforce?: string;
    ServiceNow?: string;
    Zendesk?: string;
}
export interface AWSCustomerProfilesIntegrationTaskPropertiesMap {
    OperatorPropertyKey: string;
    Property: string;
}
export interface AWSCustomerProfilesIntegrationTriggerConfig {
    TriggerProperties?: AWSCustomerProfilesIntegrationTriggerProperties;
    TriggerType: string;
}
export interface AWSCustomerProfilesIntegrationTriggerProperties {
    Scheduled?: AWSCustomerProfilesIntegrationScheduledTriggerProperties;
}
export interface AWSCustomerProfilesIntegrationScheduledTriggerProperties {
    DataPullMode?: string;
    FirstExecutionFrom?: number;
    ScheduleEndTime?: number;
    ScheduleExpression: string;
    ScheduleOffset?: number;
    ScheduleStartTime?: number;
    Timezone?: string;
}
export interface AWSCustomerProfilesObjectType {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowProfileCreation?: boolean;
        Description?: string;
        DomainName: string;
        EncryptionKey?: string;
        ExpirationDays?: number;
        Fields?: AWSCustomerProfilesObjectTypeFieldMap[];
        Keys?: AWSCustomerProfilesObjectTypeKeyMap[];
        ObjectTypeName?: string;
        Tags?: Tag[];
        TemplateId?: string;
    };
    Type: "AWS::CustomerProfiles::ObjectType";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSCustomerProfilesObjectTypeFieldMap {
    Name?: string;
    ObjectTypeField?: AWSCustomerProfilesObjectTypeObjectTypeField;
}
export interface AWSCustomerProfilesObjectTypeObjectTypeField {
    ContentType?: string;
    Source?: string;
    Target?: string;
}
export interface AWSCustomerProfilesObjectTypeKeyMap {
    Name?: string;
    ObjectTypeKeyList?: AWSCustomerProfilesObjectTypeObjectTypeKey[];
}
export interface AWSCustomerProfilesObjectTypeObjectTypeKey {
    FieldNames?: string[];
    StandardIdentifiers?: string[];
}
export interface AWSDAXCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AvailabilityZones?: string[];
        ClusterEndpointEncryptionType?: string;
        ClusterName?: string;
        Description?: string;
        IAMRoleARN: string;
        NodeType: string;
        NotificationTopicARN?: string;
        ParameterGroupName?: string;
        PreferredMaintenanceWindow?: string;
        ReplicationFactor: number;
        SSESpecification?: AWSDAXClusterSSESpecification;
        SecurityGroupIds?: string[];
        SubnetGroupName?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::DAX::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDAXClusterSSESpecification {
    SSEEnabled?: boolean;
}
export interface AWSDAXParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        ParameterGroupName?: string;
        ParameterNameValues?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::DAX::ParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDAXSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        SubnetGroupName?: string;
        SubnetIds: string[];
    };
    Type: "AWS::DAX::SubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDLMLifecyclePolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        ExecutionRoleArn?: string;
        PolicyDetails?: AWSDLMLifecyclePolicyPolicyDetails;
        State?: string;
        Tags?: Tag[];
    };
    Type: "AWS::DLM::LifecyclePolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDLMLifecyclePolicyPolicyDetails {
    Actions?: AWSDLMLifecyclePolicyAction[];
    EventSource?: AWSDLMLifecyclePolicyEventSource;
    Parameters?: AWSDLMLifecyclePolicyParameters;
    PolicyType?: string;
    ResourceLocations?: string[];
    ResourceTypes?: string[];
    Schedules?: AWSDLMLifecyclePolicySchedule[];
    TargetTags?: Tag[];
}
export interface AWSDLMLifecyclePolicyAction {
    CrossRegionCopy: AWSDLMLifecyclePolicyCrossRegionCopyAction[];
    Name: string;
}
export interface AWSDLMLifecyclePolicyCrossRegionCopyAction {
    EncryptionConfiguration: AWSDLMLifecyclePolicyEncryptionConfiguration;
    RetainRule?: AWSDLMLifecyclePolicyCrossRegionCopyRetainRule;
    Target: string;
}
export interface AWSDLMLifecyclePolicyEncryptionConfiguration {
    CmkArn?: string;
    Encrypted: boolean;
}
export interface AWSDLMLifecyclePolicyCrossRegionCopyRetainRule {
    Interval: number;
    IntervalUnit: string;
}
export interface AWSDLMLifecyclePolicyEventSource {
    Parameters?: AWSDLMLifecyclePolicyEventParameters;
    Type: string;
}
export interface AWSDLMLifecyclePolicyEventParameters {
    DescriptionRegex?: string;
    EventType: string;
    SnapshotOwner: string[];
}
export interface AWSDLMLifecyclePolicyParameters {
    ExcludeBootVolume?: boolean;
    NoReboot?: boolean;
}
export interface AWSDLMLifecyclePolicySchedule {
    CopyTags?: boolean;
    CreateRule?: AWSDLMLifecyclePolicyCreateRule;
    CrossRegionCopyRules?: AWSDLMLifecyclePolicyCrossRegionCopyRule[];
    DeprecateRule?: AWSDLMLifecyclePolicyDeprecateRule;
    FastRestoreRule?: AWSDLMLifecyclePolicyFastRestoreRule;
    Name?: string;
    RetainRule?: AWSDLMLifecyclePolicyRetainRule;
    ShareRules?: AWSDLMLifecyclePolicyShareRule[];
    TagsToAdd?: Tag[];
    VariableTags?: Tag[];
}
export interface AWSDLMLifecyclePolicyCreateRule {
    CronExpression?: string;
    Interval?: number;
    IntervalUnit?: string;
    Location?: string;
    Times?: string[];
}
export interface AWSDLMLifecyclePolicyCrossRegionCopyRule {
    CmkArn?: string;
    CopyTags?: boolean;
    DeprecateRule?: AWSDLMLifecyclePolicyCrossRegionCopyDeprecateRule;
    Encrypted: boolean;
    RetainRule?: AWSDLMLifecyclePolicyCrossRegionCopyRetainRule;
    Target?: string;
    TargetRegion?: string;
}
export interface AWSDLMLifecyclePolicyCrossRegionCopyDeprecateRule {
    Interval: number;
    IntervalUnit: string;
}
export interface AWSDLMLifecyclePolicyDeprecateRule {
    Count?: number;
    Interval?: number;
    IntervalUnit?: string;
}
export interface AWSDLMLifecyclePolicyFastRestoreRule {
    AvailabilityZones?: string[];
    Count?: number;
    Interval?: number;
    IntervalUnit?: string;
}
export interface AWSDLMLifecyclePolicyRetainRule {
    Count?: number;
    Interval?: number;
    IntervalUnit?: string;
}
export interface AWSDLMLifecyclePolicyShareRule {
    TargetAccounts?: string[];
    UnshareInterval?: number;
    UnshareIntervalUnit?: string;
}
export interface AWSDMSCertificate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CertificateIdentifier?: string;
        CertificatePem?: string;
        CertificateWallet?: string;
    };
    Type: "AWS::DMS::Certificate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDMSEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CertificateArn?: string;
        DatabaseName?: string;
        DocDbSettings?: AWSDMSEndpointDocDbSettings;
        DynamoDbSettings?: AWSDMSEndpointDynamoDbSettings;
        ElasticsearchSettings?: AWSDMSEndpointElasticsearchSettings;
        EndpointIdentifier?: string;
        EndpointType: string;
        EngineName: string;
        ExtraConnectionAttributes?: string;
        IbmDb2Settings?: AWSDMSEndpointIbmDb2Settings;
        KafkaSettings?: AWSDMSEndpointKafkaSettings;
        KinesisSettings?: AWSDMSEndpointKinesisSettings;
        KmsKeyId?: string;
        MicrosoftSqlServerSettings?: AWSDMSEndpointMicrosoftSqlServerSettings;
        MongoDbSettings?: AWSDMSEndpointMongoDbSettings;
        MySqlSettings?: AWSDMSEndpointMySqlSettings;
        NeptuneSettings?: AWSDMSEndpointNeptuneSettings;
        OracleSettings?: AWSDMSEndpointOracleSettings;
        Password?: string;
        Port?: number;
        PostgreSqlSettings?: AWSDMSEndpointPostgreSqlSettings;
        RedshiftSettings?: AWSDMSEndpointRedshiftSettings;
        ResourceIdentifier?: string;
        S3Settings?: AWSDMSEndpointS3Settings;
        ServerName?: string;
        SslMode?: string;
        SybaseSettings?: AWSDMSEndpointSybaseSettings;
        Tags?: Tag[];
        Username?: string;
    };
    Type: "AWS::DMS::Endpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDMSEndpointDocDbSettings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEndpointDynamoDbSettings {
    ServiceAccessRoleArn?: string;
}
export interface AWSDMSEndpointElasticsearchSettings {
    EndpointUri?: string;
    ErrorRetryDuration?: number;
    FullLoadErrorPercentage?: number;
    ServiceAccessRoleArn?: string;
}
export interface AWSDMSEndpointIbmDb2Settings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEndpointKafkaSettings {
    Broker?: string;
    Topic?: string;
}
export interface AWSDMSEndpointKinesisSettings {
    MessageFormat?: string;
    ServiceAccessRoleArn?: string;
    StreamArn?: string;
}
export interface AWSDMSEndpointMicrosoftSqlServerSettings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEndpointMongoDbSettings {
    AuthMechanism?: string;
    AuthSource?: string;
    AuthType?: string;
    DatabaseName?: string;
    DocsToInvestigate?: string;
    ExtractDocId?: string;
    NestingLevel?: string;
    Password?: string;
    Port?: number;
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
    ServerName?: string;
    Username?: string;
}
export interface AWSDMSEndpointMySqlSettings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEndpointNeptuneSettings {
    ErrorRetryDuration?: number;
    IamAuthEnabled?: boolean;
    MaxFileSize?: number;
    MaxRetryCount?: number;
    S3BucketFolder?: string;
    S3BucketName?: string;
    ServiceAccessRoleArn?: string;
}
export interface AWSDMSEndpointOracleSettings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerOracleAsmAccessRoleArn?: string;
    SecretsManagerOracleAsmSecretId?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEndpointPostgreSqlSettings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEndpointRedshiftSettings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEndpointS3Settings {
    BucketFolder?: string;
    BucketName?: string;
    CompressionType?: string;
    CsvDelimiter?: string;
    CsvRowDelimiter?: string;
    ExternalTableDefinition?: string;
    ServiceAccessRoleArn?: string;
}
export interface AWSDMSEndpointSybaseSettings {
    SecretsManagerAccessRoleArn?: string;
    SecretsManagerSecretId?: string;
}
export interface AWSDMSEventSubscription {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Enabled?: boolean;
        EventCategories?: string[];
        SnsTopicArn: string;
        SourceIds?: string[];
        SourceType?: string;
        SubscriptionName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::DMS::EventSubscription";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDMSReplicationInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllocatedStorage?: number;
        AllowMajorVersionUpgrade?: boolean;
        AutoMinorVersionUpgrade?: boolean;
        AvailabilityZone?: string;
        EngineVersion?: string;
        KmsKeyId?: string;
        MultiAZ?: boolean;
        PreferredMaintenanceWindow?: string;
        PubliclyAccessible?: boolean;
        ReplicationInstanceClass: string;
        ReplicationInstanceIdentifier?: string;
        ReplicationSubnetGroupIdentifier?: string;
        ResourceIdentifier?: string;
        Tags?: Tag[];
        VpcSecurityGroupIds?: string[];
    };
    Type: "AWS::DMS::ReplicationInstance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDMSReplicationSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ReplicationSubnetGroupDescription: string;
        ReplicationSubnetGroupIdentifier?: string;
        SubnetIds: string[];
        Tags?: Tag[];
    };
    Type: "AWS::DMS::ReplicationSubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDMSReplicationTask {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CdcStartPosition?: string;
        CdcStartTime?: number;
        CdcStopPosition?: string;
        MigrationType: string;
        ReplicationInstanceArn: string;
        ReplicationTaskIdentifier?: string;
        ReplicationTaskSettings?: string;
        ResourceIdentifier?: string;
        SourceEndpointArn: string;
        TableMappings: string;
        Tags?: Tag[];
        TargetEndpointArn: string;
        TaskData?: string;
    };
    Type: "AWS::DMS::ReplicationTask";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataBrewDataset {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Format?: string;
        FormatOptions?: AWSDataBrewDatasetFormatOptions;
        Input: AWSDataBrewDatasetInput;
        Name: string;
        PathOptions?: AWSDataBrewDatasetPathOptions;
        Tags?: Tag[];
    };
    Type: "AWS::DataBrew::Dataset";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataBrewDatasetFormatOptions {
    Csv?: AWSDataBrewDatasetCsvOptions;
    Excel?: AWSDataBrewDatasetExcelOptions;
    Json?: AWSDataBrewDatasetJsonOptions;
}
export interface AWSDataBrewDatasetCsvOptions {
    Delimiter?: string;
    HeaderRow?: boolean;
}
export interface AWSDataBrewDatasetExcelOptions {
    HeaderRow?: boolean;
    SheetIndexes?: number[];
    SheetNames?: string[];
}
export interface AWSDataBrewDatasetJsonOptions {
    MultiLine?: boolean;
}
export interface AWSDataBrewDatasetInput {
    DataCatalogInputDefinition?: AWSDataBrewDatasetDataCatalogInputDefinition;
    DatabaseInputDefinition?: AWSDataBrewDatasetDatabaseInputDefinition;
    S3InputDefinition?: AWSDataBrewDatasetS3Location;
}
export interface AWSDataBrewDatasetDataCatalogInputDefinition {
    CatalogId?: string;
    DatabaseName?: string;
    TableName?: string;
    TempDirectory?: AWSDataBrewDatasetS3Location;
}
export interface AWSDataBrewDatasetS3Location {
    Bucket: string;
    Key?: string;
}
export interface AWSDataBrewDatasetDatabaseInputDefinition {
    DatabaseTableName?: string;
    GlueConnectionName?: string;
    TempDirectory?: AWSDataBrewDatasetS3Location;
}
export interface AWSDataBrewDatasetPathOptions {
    FilesLimit?: AWSDataBrewDatasetFilesLimit;
    LastModifiedDateCondition?: AWSDataBrewDatasetFilterExpression;
    Parameters?: AWSDataBrewDatasetPathParameter[];
}
export interface AWSDataBrewDatasetFilesLimit {
    MaxFiles: number;
    Order?: string;
    OrderedBy?: string;
}
export interface AWSDataBrewDatasetFilterExpression {
    Expression: string;
    ValuesMap: AWSDataBrewDatasetFilterValue[];
}
export interface AWSDataBrewDatasetFilterValue {
    Value: string;
    ValueReference: string;
}
export interface AWSDataBrewDatasetPathParameter {
    DatasetParameter: AWSDataBrewDatasetDatasetParameter;
    PathParameterName: string;
}
export interface AWSDataBrewDatasetDatasetParameter {
    CreateColumn?: boolean;
    DatetimeOptions?: AWSDataBrewDatasetDatetimeOptions;
    Filter?: AWSDataBrewDatasetFilterExpression;
    Name: string;
    Type: string;
}
export interface AWSDataBrewDatasetDatetimeOptions {
    Format: string;
    LocaleCode?: string;
    TimezoneOffset?: string;
}
export interface AWSDataBrewJob {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataCatalogOutputs?: AWSDataBrewJobDataCatalogOutput[];
        DatabaseOutputs?: AWSDataBrewJobDatabaseOutput[];
        DatasetName?: string;
        EncryptionKeyArn?: string;
        EncryptionMode?: string;
        JobSample?: AWSDataBrewJobJobSample;
        LogSubscription?: string;
        MaxCapacity?: number;
        MaxRetries?: number;
        Name: string;
        OutputLocation?: AWSDataBrewJobOutputLocation;
        Outputs?: AWSDataBrewJobOutput[];
        ProfileConfiguration?: AWSDataBrewJobProfileConfiguration;
        ProjectName?: string;
        Recipe?: {
            [k: string]: unknown;
        };
        RoleArn: string;
        Tags?: Tag[];
        Timeout?: number;
        Type: string;
    };
    Type: "AWS::DataBrew::Job";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataBrewJobDataCatalogOutput {
    CatalogId?: string;
    DatabaseName: string;
    DatabaseOptions?: AWSDataBrewJobDatabaseTableOutputOptions;
    Overwrite?: boolean;
    S3Options?: AWSDataBrewJobS3TableOutputOptions;
    TableName: string;
}
export interface AWSDataBrewJobDatabaseTableOutputOptions {
    TableName: string;
    TempDirectory?: AWSDataBrewJobS3Location;
}
export interface AWSDataBrewJobS3Location {
    Bucket: string;
    Key?: string;
}
export interface AWSDataBrewJobS3TableOutputOptions {
    Location: AWSDataBrewJobS3Location;
}
export interface AWSDataBrewJobDatabaseOutput {
    DatabaseOptions: AWSDataBrewJobDatabaseTableOutputOptions;
    DatabaseOutputMode?: string;
    GlueConnectionName: string;
}
export interface AWSDataBrewJobJobSample {
    Mode?: string;
    Size?: number;
}
export interface AWSDataBrewJobOutputLocation {
    Bucket: string;
    Key?: string;
}
export interface AWSDataBrewJobOutput {
    CompressionFormat?: string;
    Format?: string;
    FormatOptions?: AWSDataBrewJobOutputFormatOptions;
    Location: AWSDataBrewJobS3Location;
    Overwrite?: boolean;
    PartitionColumns?: string[];
}
export interface AWSDataBrewJobOutputFormatOptions {
    Csv?: AWSDataBrewJobCsvOutputOptions;
}
export interface AWSDataBrewJobCsvOutputOptions {
    Delimiter?: string;
}
export interface AWSDataBrewJobProfileConfiguration {
    ColumnStatisticsConfigurations?: AWSDataBrewJobColumnStatisticsConfiguration[];
    DatasetStatisticsConfiguration?: AWSDataBrewJobStatisticsConfiguration;
    ProfileColumns?: AWSDataBrewJobColumnSelector[];
}
export interface AWSDataBrewJobColumnStatisticsConfiguration {
    Selectors?: AWSDataBrewJobColumnSelector[];
    Statistics: AWSDataBrewJobStatisticsConfiguration;
}
export interface AWSDataBrewJobColumnSelector {
    Name?: string;
    Regex?: string;
}
export interface AWSDataBrewJobStatisticsConfiguration {
    IncludedStatistics?: string[];
    Overrides?: AWSDataBrewJobStatisticOverride[];
}
export interface AWSDataBrewJobStatisticOverride {
    Parameters: AWSDataBrewJobParameterMap;
    Statistic: string;
}
export interface AWSDataBrewJobParameterMap {}
export interface AWSDataBrewProject {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DatasetName: string;
        Name: string;
        RecipeName: string;
        RoleArn: string;
        Sample?: AWSDataBrewProjectSample;
        Tags?: Tag[];
    };
    Type: "AWS::DataBrew::Project";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataBrewProjectSample {
    Size?: number;
    Type: string;
}
export interface AWSDataBrewRecipe {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Steps: AWSDataBrewRecipeRecipeStep[];
        Tags?: Tag[];
    };
    Type: "AWS::DataBrew::Recipe";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataBrewRecipeRecipeStep {
    Action: AWSDataBrewRecipeAction;
    ConditionExpressions?: AWSDataBrewRecipeConditionExpression[];
}
export interface AWSDataBrewRecipeAction {
    Operation: string;
    Parameters?: AWSDataBrewRecipeParameterMap;
}
export interface AWSDataBrewRecipeParameterMap {}
export interface AWSDataBrewRecipeConditionExpression {
    Condition: string;
    TargetColumn: string;
    Value?: string;
}
export interface AWSDataBrewSchedule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CronExpression: string;
        JobNames?: string[];
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::DataBrew::Schedule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataPipelinePipeline {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Activate?: boolean;
        Description?: string;
        Name: string;
        ParameterObjects: AWSDataPipelinePipelineParameterObject[];
        ParameterValues?: AWSDataPipelinePipelineParameterValue[];
        PipelineObjects?: AWSDataPipelinePipelinePipelineObject[];
        PipelineTags?: AWSDataPipelinePipelinePipelineTag[];
    };
    Type: "AWS::DataPipeline::Pipeline";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataPipelinePipelineParameterObject {
    Attributes: AWSDataPipelinePipelineParameterAttribute[];
    Id: string;
}
export interface AWSDataPipelinePipelineParameterAttribute {
    Key: string;
    StringValue: string;
}
export interface AWSDataPipelinePipelineParameterValue {
    Id: string;
    StringValue: string;
}
export interface AWSDataPipelinePipelinePipelineObject {
    Fields: AWSDataPipelinePipelineField[];
    Id: string;
    Name: string;
}
export interface AWSDataPipelinePipelineField {
    Key: string;
    RefValue?: string;
    StringValue?: string;
}
export interface AWSDataPipelinePipelinePipelineTag {
    Key: string;
    Value: string;
}
export interface AWSDataSyncAgent {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ActivationKey: string;
        AgentName?: string;
        SecurityGroupArns?: string[];
        SubnetArns?: string[];
        Tags?: Tag[];
        VpcEndpointId?: string;
    };
    Type: "AWS::DataSync::Agent";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncLocationEFS {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Ec2Config: AWSDataSyncLocationEFSEc2Config;
        EfsFilesystemArn: string;
        Subdirectory?: string;
        Tags?: Tag[];
    };
    Type: "AWS::DataSync::LocationEFS";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncLocationEFSEc2Config {
    SecurityGroupArns: string[];
    SubnetArn: string;
}
export interface AWSDataSyncLocationFSxWindows {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Domain?: string;
        FsxFilesystemArn: string;
        Password: string;
        SecurityGroupArns: string[];
        Subdirectory?: string;
        Tags?: Tag[];
        User: string;
    };
    Type: "AWS::DataSync::LocationFSxWindows";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncLocationNFS {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MountOptions?: AWSDataSyncLocationNFSMountOptions;
        OnPremConfig: AWSDataSyncLocationNFSOnPremConfig;
        ServerHostname: string;
        Subdirectory: string;
        Tags?: Tag[];
    };
    Type: "AWS::DataSync::LocationNFS";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncLocationNFSMountOptions {
    Version?: string;
}
export interface AWSDataSyncLocationNFSOnPremConfig {
    AgentArns: string[];
}
export interface AWSDataSyncLocationObjectStorage {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessKey?: string;
        AgentArns: string[];
        BucketName: string;
        SecretKey?: string;
        ServerHostname: string;
        ServerPort?: number;
        ServerProtocol?: string;
        Subdirectory?: string;
        Tags?: Tag[];
    };
    Type: "AWS::DataSync::LocationObjectStorage";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncLocationS3 {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        S3BucketArn: string;
        S3Config: AWSDataSyncLocationS3S3Config;
        S3StorageClass?: string;
        Subdirectory?: string;
        Tags?: Tag[];
    };
    Type: "AWS::DataSync::LocationS3";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncLocationS3S3Config {
    BucketAccessRoleArn: string;
}
export interface AWSDataSyncLocationSMB {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AgentArns: string[];
        Domain?: string;
        MountOptions?: AWSDataSyncLocationSMBMountOptions;
        Password: string;
        ServerHostname: string;
        Subdirectory: string;
        Tags?: Tag[];
        User: string;
    };
    Type: "AWS::DataSync::LocationSMB";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncLocationSMBMountOptions {
    Version?: string;
}
export interface AWSDataSyncTask {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CloudWatchLogGroupArn?: string;
        DestinationLocationArn: string;
        Excludes?: AWSDataSyncTaskFilterRule[];
        Includes?: AWSDataSyncTaskFilterRule[];
        Name?: string;
        Options?: AWSDataSyncTaskOptions;
        Schedule?: AWSDataSyncTaskTaskSchedule;
        SourceLocationArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::DataSync::Task";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDataSyncTaskFilterRule {
    FilterType?: string;
    Value?: string;
}
export interface AWSDataSyncTaskOptions {
    Atime?: string;
    BytesPerSecond?: number;
    Gid?: string;
    LogLevel?: string;
    Mtime?: string;
    OverwriteMode?: string;
    PosixPermissions?: string;
    PreserveDeletedFiles?: string;
    PreserveDevices?: string;
    SecurityDescriptorCopyFlags?: string;
    TaskQueueing?: string;
    TransferMode?: string;
    Uid?: string;
    VerifyMode?: string;
}
export interface AWSDataSyncTaskTaskSchedule {
    ScheduleExpression: string;
}
export interface AWSDetectiveGraph {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Tags?: Tag[];
    };
    Type: "AWS::Detective::Graph";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDetectiveMemberInvitation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DisableEmailNotification?: boolean;
        GraphArn: string;
        MemberEmailAddress: string;
        MemberId: string;
        Message?: string;
    };
    Type: "AWS::Detective::MemberInvitation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDevOpsGuruNotificationChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Config: AWSDevOpsGuruNotificationChannelNotificationChannelConfig;
    };
    Type: "AWS::DevOpsGuru::NotificationChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDevOpsGuruNotificationChannelNotificationChannelConfig {
    Sns?: AWSDevOpsGuruNotificationChannelSnsChannelConfig;
}
export interface AWSDevOpsGuruNotificationChannelSnsChannelConfig {
    TopicArn?: string;
}
export interface AWSDevOpsGuruResourceCollection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceCollectionFilter: AWSDevOpsGuruResourceCollectionResourceCollectionFilter;
    };
    Type: "AWS::DevOpsGuru::ResourceCollection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDevOpsGuruResourceCollectionResourceCollectionFilter {
    CloudFormation?: AWSDevOpsGuruResourceCollectionCloudFormationCollectionFilter;
}
export interface AWSDevOpsGuruResourceCollectionCloudFormationCollectionFilter {
    StackNames?: string[];
}
export interface AWSDirectoryServiceMicrosoftAD {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CreateAlias?: boolean;
        Edition?: string;
        EnableSso?: boolean;
        Name: string;
        Password: string;
        ShortName?: string;
        VpcSettings: AWSDirectoryServiceMicrosoftADVpcSettings;
    };
    Type: "AWS::DirectoryService::MicrosoftAD";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDirectoryServiceMicrosoftADVpcSettings {
    SubnetIds: string[];
    VpcId: string;
}
export interface AWSDirectoryServiceSimpleAD {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CreateAlias?: boolean;
        Description?: string;
        EnableSso?: boolean;
        Name: string;
        Password: string;
        ShortName?: string;
        Size: string;
        VpcSettings: AWSDirectoryServiceSimpleADVpcSettings;
    };
    Type: "AWS::DirectoryService::SimpleAD";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDirectoryServiceSimpleADVpcSettings {
    SubnetIds: string[];
    VpcId: string;
}
export interface AWSDocDBDBCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AvailabilityZones?: string[];
        BackupRetentionPeriod?: number;
        DBClusterIdentifier?: string;
        DBClusterParameterGroupName?: string;
        DBSubnetGroupName?: string;
        DeletionProtection?: boolean;
        EnableCloudwatchLogsExports?: string[];
        EngineVersion?: string;
        KmsKeyId?: string;
        MasterUserPassword: string;
        MasterUsername: string;
        Port?: number;
        PreferredBackupWindow?: string;
        PreferredMaintenanceWindow?: string;
        SnapshotIdentifier?: string;
        StorageEncrypted?: boolean;
        Tags?: Tag[];
        VpcSecurityGroupIds?: string[];
    };
    Type: "AWS::DocDB::DBCluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDocDBDBClusterParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        Family: string;
        Name?: string;
        Parameters: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::DocDB::DBClusterParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDocDBDBInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoMinorVersionUpgrade?: boolean;
        AvailabilityZone?: string;
        DBClusterIdentifier: string;
        DBInstanceClass: string;
        DBInstanceIdentifier?: string;
        PreferredMaintenanceWindow?: string;
        Tags?: Tag[];
    };
    Type: "AWS::DocDB::DBInstance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDocDBDBSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DBSubnetGroupDescription: string;
        DBSubnetGroupName?: string;
        SubnetIds: string[];
        Tags?: Tag[];
    };
    Type: "AWS::DocDB::DBSubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDynamoDBGlobalTable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AttributeDefinitions: AWSDynamoDBGlobalTableAttributeDefinition[];
        BillingMode?: string;
        GlobalSecondaryIndexes?: AWSDynamoDBGlobalTableGlobalSecondaryIndex[];
        KeySchema: AWSDynamoDBGlobalTableKeySchema[];
        LocalSecondaryIndexes?: AWSDynamoDBGlobalTableLocalSecondaryIndex[];
        Replicas: AWSDynamoDBGlobalTableReplicaSpecification[];
        SSESpecification?: AWSDynamoDBGlobalTableSSESpecification;
        StreamSpecification?: AWSDynamoDBGlobalTableStreamSpecification;
        TableName?: string;
        TimeToLiveSpecification?: AWSDynamoDBGlobalTableTimeToLiveSpecification;
        WriteProvisionedThroughputSettings?: AWSDynamoDBGlobalTableWriteProvisionedThroughputSettings;
    };
    Type: "AWS::DynamoDB::GlobalTable";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDynamoDBGlobalTableAttributeDefinition {
    AttributeName: string;
    AttributeType: string;
}
export interface AWSDynamoDBGlobalTableGlobalSecondaryIndex {
    IndexName: string;
    KeySchema: AWSDynamoDBGlobalTableKeySchema[];
    Projection: AWSDynamoDBGlobalTableProjection;
    WriteProvisionedThroughputSettings?: AWSDynamoDBGlobalTableWriteProvisionedThroughputSettings;
}
export interface AWSDynamoDBGlobalTableKeySchema {
    AttributeName: string;
    KeyType: string;
}
export interface AWSDynamoDBGlobalTableProjection {
    NonKeyAttributes?: string[];
    ProjectionType?: string;
}
export interface AWSDynamoDBGlobalTableWriteProvisionedThroughputSettings {
    WriteCapacityAutoScalingSettings?: AWSDynamoDBGlobalTableCapacityAutoScalingSettings;
}
export interface AWSDynamoDBGlobalTableCapacityAutoScalingSettings {
    MaxCapacity: number;
    MinCapacity: number;
    SeedCapacity?: number;
    TargetTrackingScalingPolicyConfiguration: AWSDynamoDBGlobalTableTargetTrackingScalingPolicyConfiguration;
}
export interface AWSDynamoDBGlobalTableTargetTrackingScalingPolicyConfiguration {
    DisableScaleIn?: boolean;
    ScaleInCooldown?: number;
    ScaleOutCooldown?: number;
    TargetValue: number;
}
export interface AWSDynamoDBGlobalTableLocalSecondaryIndex {
    IndexName: string;
    KeySchema: AWSDynamoDBGlobalTableKeySchema[];
    Projection: AWSDynamoDBGlobalTableProjection;
}
export interface AWSDynamoDBGlobalTableReplicaSpecification {
    ContributorInsightsSpecification?: AWSDynamoDBGlobalTableContributorInsightsSpecification;
    GlobalSecondaryIndexes?: AWSDynamoDBGlobalTableReplicaGlobalSecondaryIndexSpecification[];
    PointInTimeRecoverySpecification?: AWSDynamoDBGlobalTablePointInTimeRecoverySpecification;
    ReadProvisionedThroughputSettings?: AWSDynamoDBGlobalTableReadProvisionedThroughputSettings;
    Region: string;
    SSESpecification?: AWSDynamoDBGlobalTableReplicaSSESpecification;
    Tags?: Tag[];
}
export interface AWSDynamoDBGlobalTableContributorInsightsSpecification {
    Enabled: boolean;
}
export interface AWSDynamoDBGlobalTableReplicaGlobalSecondaryIndexSpecification {
    ContributorInsightsSpecification?: AWSDynamoDBGlobalTableContributorInsightsSpecification;
    IndexName: string;
    ReadProvisionedThroughputSettings?: AWSDynamoDBGlobalTableReadProvisionedThroughputSettings;
}
export interface AWSDynamoDBGlobalTableReadProvisionedThroughputSettings {
    ReadCapacityAutoScalingSettings?: AWSDynamoDBGlobalTableCapacityAutoScalingSettings;
    ReadCapacityUnits?: number;
}
export interface AWSDynamoDBGlobalTablePointInTimeRecoverySpecification {
    PointInTimeRecoveryEnabled?: boolean;
}
export interface AWSDynamoDBGlobalTableReplicaSSESpecification {
    KMSMasterKeyId: string;
}
export interface AWSDynamoDBGlobalTableSSESpecification {
    SSEEnabled: boolean;
    SSEType?: string;
}
export interface AWSDynamoDBGlobalTableStreamSpecification {
    StreamViewType: string;
}
export interface AWSDynamoDBGlobalTableTimeToLiveSpecification {
    AttributeName?: string;
    Enabled: boolean;
}
export interface AWSDynamoDBTable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AttributeDefinitions?: AWSDynamoDBTableAttributeDefinition[];
        BillingMode?: string;
        ContributorInsightsSpecification?: AWSDynamoDBTableContributorInsightsSpecification;
        GlobalSecondaryIndexes?: AWSDynamoDBTableGlobalSecondaryIndex[];
        KeySchema: AWSDynamoDBTableKeySchema[];
        KinesisStreamSpecification?: AWSDynamoDBTableKinesisStreamSpecification;
        LocalSecondaryIndexes?: AWSDynamoDBTableLocalSecondaryIndex[];
        PointInTimeRecoverySpecification?: AWSDynamoDBTablePointInTimeRecoverySpecification;
        ProvisionedThroughput?: AWSDynamoDBTableProvisionedThroughput;
        SSESpecification?: AWSDynamoDBTableSSESpecification;
        StreamSpecification?: AWSDynamoDBTableStreamSpecification;
        TableName?: string;
        Tags?: Tag[];
        TimeToLiveSpecification?: AWSDynamoDBTableTimeToLiveSpecification;
    };
    Type: "AWS::DynamoDB::Table";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSDynamoDBTableAttributeDefinition {
    AttributeName: string;
    AttributeType: string;
}
export interface AWSDynamoDBTableContributorInsightsSpecification {
    Enabled: boolean;
}
export interface AWSDynamoDBTableGlobalSecondaryIndex {
    ContributorInsightsSpecification?: AWSDynamoDBTableContributorInsightsSpecification;
    IndexName: string;
    KeySchema: AWSDynamoDBTableKeySchema[];
    Projection: AWSDynamoDBTableProjection;
    ProvisionedThroughput?: AWSDynamoDBTableProvisionedThroughput;
}
export interface AWSDynamoDBTableKeySchema {
    AttributeName: string;
    KeyType: string;
}
export interface AWSDynamoDBTableProjection {
    NonKeyAttributes?: string[];
    ProjectionType?: string;
}
export interface AWSDynamoDBTableProvisionedThroughput {
    ReadCapacityUnits: number;
    WriteCapacityUnits: number;
}
export interface AWSDynamoDBTableKinesisStreamSpecification {
    StreamArn: string;
}
export interface AWSDynamoDBTableLocalSecondaryIndex {
    IndexName: string;
    KeySchema: AWSDynamoDBTableKeySchema[];
    Projection: AWSDynamoDBTableProjection;
}
export interface AWSDynamoDBTablePointInTimeRecoverySpecification {
    PointInTimeRecoveryEnabled?: boolean;
}
export interface AWSDynamoDBTableSSESpecification {
    KMSMasterKeyId?: string;
    SSEEnabled: boolean;
    SSEType?: string;
}
export interface AWSDynamoDBTableStreamSpecification {
    StreamViewType: string;
}
export interface AWSDynamoDBTableTimeToLiveSpecification {
    AttributeName: string;
    Enabled: boolean;
}
export interface AWSEC2CapacityReservation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AvailabilityZone: string;
        EbsOptimized?: boolean;
        EndDate?: string;
        EndDateType?: string;
        EphemeralStorage?: boolean;
        InstanceCount: number;
        InstanceMatchCriteria?: string;
        InstancePlatform: string;
        InstanceType: string;
        TagSpecifications?: AWSEC2CapacityReservationTagSpecification[];
        Tenancy?: string;
    };
    Type: "AWS::EC2::CapacityReservation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2CapacityReservationTagSpecification {
    ResourceType?: string;
    Tags?: Tag[];
}
export interface AWSEC2CarrierGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::EC2::CarrierGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2ClientVpnAuthorizationRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessGroupId?: string;
        AuthorizeAllGroups?: boolean;
        ClientVpnEndpointId: string;
        Description?: string;
        TargetNetworkCidr: string;
    };
    Type: "AWS::EC2::ClientVpnAuthorizationRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2ClientVpnEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthenticationOptions: AWSEC2ClientVpnEndpointClientAuthenticationRequest[];
        ClientCidrBlock: string;
        ClientConnectOptions?: AWSEC2ClientVpnEndpointClientConnectOptions;
        ConnectionLogOptions: AWSEC2ClientVpnEndpointConnectionLogOptions;
        Description?: string;
        DnsServers?: string[];
        SecurityGroupIds?: string[];
        SelfServicePortal?: string;
        ServerCertificateArn: string;
        SplitTunnel?: boolean;
        TagSpecifications?: AWSEC2ClientVpnEndpointTagSpecification[];
        TransportProtocol?: string;
        VpcId?: string;
        VpnPort?: number;
    };
    Type: "AWS::EC2::ClientVpnEndpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2ClientVpnEndpointClientAuthenticationRequest {
    ActiveDirectory?: AWSEC2ClientVpnEndpointDirectoryServiceAuthenticationRequest;
    FederatedAuthentication?: AWSEC2ClientVpnEndpointFederatedAuthenticationRequest;
    MutualAuthentication?: AWSEC2ClientVpnEndpointCertificateAuthenticationRequest;
    Type: string;
}
export interface AWSEC2ClientVpnEndpointDirectoryServiceAuthenticationRequest {
    DirectoryId: string;
}
export interface AWSEC2ClientVpnEndpointFederatedAuthenticationRequest {
    SAMLProviderArn: string;
    SelfServiceSAMLProviderArn?: string;
}
export interface AWSEC2ClientVpnEndpointCertificateAuthenticationRequest {
    ClientRootCertificateChainArn: string;
}
export interface AWSEC2ClientVpnEndpointClientConnectOptions {
    Enabled: boolean;
    LambdaFunctionArn?: string;
}
export interface AWSEC2ClientVpnEndpointConnectionLogOptions {
    CloudwatchLogGroup?: string;
    CloudwatchLogStream?: string;
    Enabled: boolean;
}
export interface AWSEC2ClientVpnEndpointTagSpecification {
    ResourceType: string;
    Tags: Tag[];
}
export interface AWSEC2ClientVpnRoute {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClientVpnEndpointId: string;
        Description?: string;
        DestinationCidrBlock: string;
        TargetVpcSubnetId: string;
    };
    Type: "AWS::EC2::ClientVpnRoute";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2ClientVpnTargetNetworkAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClientVpnEndpointId: string;
        SubnetId: string;
    };
    Type: "AWS::EC2::ClientVpnTargetNetworkAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2CustomerGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BgpAsn: number;
        IpAddress: string;
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::EC2::CustomerGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2DHCPOptions {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        DomainName?: string;
        DomainNameServers?: string[];
        NetbiosNameServers?: string[];
        NetbiosNodeType?: number;
        NtpServers?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::EC2::DHCPOptions";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2EC2Fleet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Context?: string;
        ExcessCapacityTerminationPolicy?: string;
        LaunchTemplateConfigs: AWSEC2EC2FleetFleetLaunchTemplateConfigRequest[];
        OnDemandOptions?: AWSEC2EC2FleetOnDemandOptionsRequest;
        ReplaceUnhealthyInstances?: boolean;
        SpotOptions?: AWSEC2EC2FleetSpotOptionsRequest;
        TagSpecifications?: AWSEC2EC2FleetTagSpecification[];
        TargetCapacitySpecification: AWSEC2EC2FleetTargetCapacitySpecificationRequest;
        TerminateInstancesWithExpiration?: boolean;
        Type?: string;
        ValidFrom?: string;
        ValidUntil?: string;
    };
    Type: "AWS::EC2::EC2Fleet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2EC2FleetFleetLaunchTemplateConfigRequest {
    LaunchTemplateSpecification?: AWSEC2EC2FleetFleetLaunchTemplateSpecificationRequest;
    Overrides?: AWSEC2EC2FleetFleetLaunchTemplateOverridesRequest[];
}
export interface AWSEC2EC2FleetFleetLaunchTemplateSpecificationRequest {
    LaunchTemplateId?: string;
    LaunchTemplateName?: string;
    Version?: string;
}
export interface AWSEC2EC2FleetFleetLaunchTemplateOverridesRequest {
    AvailabilityZone?: string;
    InstanceType?: string;
    MaxPrice?: string;
    Placement?: AWSEC2EC2FleetPlacement;
    Priority?: number;
    SubnetId?: string;
    WeightedCapacity?: number;
}
export interface AWSEC2EC2FleetPlacement {
    Affinity?: string;
    AvailabilityZone?: string;
    GroupName?: string;
    HostId?: string;
    HostResourceGroupArn?: string;
    PartitionNumber?: number;
    SpreadDomain?: string;
    Tenancy?: string;
}
export interface AWSEC2EC2FleetOnDemandOptionsRequest {
    AllocationStrategy?: string;
    CapacityReservationOptions?: AWSEC2EC2FleetCapacityReservationOptionsRequest;
    MaxTotalPrice?: string;
    MinTargetCapacity?: number;
    SingleAvailabilityZone?: boolean;
    SingleInstanceType?: boolean;
}
export interface AWSEC2EC2FleetCapacityReservationOptionsRequest {
    UsageStrategy?: string;
}
export interface AWSEC2EC2FleetSpotOptionsRequest {
    AllocationStrategy?: string;
    InstanceInterruptionBehavior?: string;
    InstancePoolsToUseCount?: number;
    MaxTotalPrice?: string;
    MinTargetCapacity?: number;
    SingleAvailabilityZone?: boolean;
    SingleInstanceType?: boolean;
}
export interface AWSEC2EC2FleetTagSpecification {
    ResourceType?: string;
    Tags?: Tag[];
}
export interface AWSEC2EC2FleetTargetCapacitySpecificationRequest {
    DefaultTargetCapacityType?: string;
    OnDemandTargetCapacity?: number;
    SpotTargetCapacity?: number;
    TotalTargetCapacity: number;
}
export interface AWSEC2EIP {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Domain?: string;
        InstanceId?: string;
        PublicIpv4Pool?: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::EIP";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2EIPAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AllocationId?: string;
        EIP?: string;
        InstanceId?: string;
        NetworkInterfaceId?: string;
        PrivateIpAddress?: string;
    };
    Type: "AWS::EC2::EIPAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2EgressOnlyInternetGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        VpcId: string;
    };
    Type: "AWS::EC2::EgressOnlyInternetGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2EnclaveCertificateIamRoleAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CertificateArn: string;
        RoleArn: string;
    };
    Type: "AWS::EC2::EnclaveCertificateIamRoleAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2FlowLog {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeliverLogsPermissionArn?: string;
        LogDestination?: string;
        LogDestinationType?: string;
        LogFormat?: string;
        LogGroupName?: string;
        MaxAggregationInterval?: number;
        ResourceId: string;
        ResourceType: string;
        Tags?: Tag[];
        TrafficType: string;
    };
    Type: "AWS::EC2::FlowLog";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2GatewayRouteTableAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GatewayId: string;
        RouteTableId: string;
    };
    Type: "AWS::EC2::GatewayRouteTableAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2Host {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoPlacement?: string;
        AvailabilityZone: string;
        HostRecovery?: string;
        InstanceType: string;
    };
    Type: "AWS::EC2::Host";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2Instance {
    CreationPolicy?: {
        [k: string]: unknown;
    };
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AdditionalInfo?: string;
        Affinity?: string;
        AvailabilityZone?: string;
        BlockDeviceMappings?: AWSEC2InstanceBlockDeviceMapping[];
        CpuOptions?: AWSEC2InstanceCpuOptions;
        CreditSpecification?: AWSEC2InstanceCreditSpecification;
        DisableApiTermination?: boolean;
        EbsOptimized?: boolean;
        ElasticGpuSpecifications?: AWSEC2InstanceElasticGpuSpecification[];
        ElasticInferenceAccelerators?: AWSEC2InstanceElasticInferenceAccelerator[];
        EnclaveOptions?: AWSEC2InstanceEnclaveOptions;
        HibernationOptions?: AWSEC2InstanceHibernationOptions;
        HostId?: string;
        HostResourceGroupArn?: string;
        IamInstanceProfile?: string;
        ImageId?: string;
        InstanceInitiatedShutdownBehavior?: string;
        InstanceType?: string;
        Ipv6AddressCount?: number;
        Ipv6Addresses?: AWSEC2InstanceInstanceIpv6Address[];
        KernelId?: string;
        KeyName?: string;
        LaunchTemplate?: AWSEC2InstanceLaunchTemplateSpecification;
        LicenseSpecifications?: AWSEC2InstanceLicenseSpecification[];
        Monitoring?: boolean;
        NetworkInterfaces?: AWSEC2InstanceNetworkInterface[];
        PlacementGroupName?: string;
        PrivateIpAddress?: string;
        RamdiskId?: string;
        SecurityGroupIds?: string[];
        SecurityGroups?: string[];
        SourceDestCheck?: boolean;
        SsmAssociations?: AWSEC2InstanceSsmAssociation[];
        SubnetId?: string;
        Tags?: Tag[];
        Tenancy?: string;
        UserData?: string;
        Volumes?: AWSEC2InstanceVolume[];
    };
    Type: "AWS::EC2::Instance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2InstanceBlockDeviceMapping {
    DeviceName: string;
    Ebs?: AWSEC2InstanceEbs;
    NoDevice?: AWSEC2InstanceNoDevice;
    VirtualName?: string;
}
export interface AWSEC2InstanceEbs {
    DeleteOnTermination?: boolean;
    Encrypted?: boolean;
    Iops?: number;
    KmsKeyId?: string;
    SnapshotId?: string;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSEC2InstanceNoDevice {}
export interface AWSEC2InstanceCpuOptions {
    CoreCount?: number;
    ThreadsPerCore?: number;
}
export interface AWSEC2InstanceCreditSpecification {
    CPUCredits?: string;
}
export interface AWSEC2InstanceElasticGpuSpecification {
    Type: string;
}
export interface AWSEC2InstanceElasticInferenceAccelerator {
    Count?: number;
    Type: string;
}
export interface AWSEC2InstanceEnclaveOptions {
    Enabled?: boolean;
}
export interface AWSEC2InstanceHibernationOptions {
    Configured?: boolean;
}
export interface AWSEC2InstanceInstanceIpv6Address {
    Ipv6Address: string;
}
export interface AWSEC2InstanceLaunchTemplateSpecification {
    LaunchTemplateId?: string;
    LaunchTemplateName?: string;
    Version: string;
}
export interface AWSEC2InstanceLicenseSpecification {
    LicenseConfigurationArn: string;
}
export interface AWSEC2InstanceNetworkInterface {
    AssociatePublicIpAddress?: boolean;
    DeleteOnTermination?: boolean;
    Description?: string;
    DeviceIndex: string;
    GroupSet?: string[];
    Ipv6AddressCount?: number;
    Ipv6Addresses?: AWSEC2InstanceInstanceIpv6Address[];
    NetworkInterfaceId?: string;
    PrivateIpAddress?: string;
    PrivateIpAddresses?: AWSEC2InstancePrivateIpAddressSpecification[];
    SecondaryPrivateIpAddressCount?: number;
    SubnetId?: string;
}
export interface AWSEC2InstancePrivateIpAddressSpecification {
    Primary: boolean;
    PrivateIpAddress: string;
}
export interface AWSEC2InstanceSsmAssociation {
    AssociationParameters?: AWSEC2InstanceAssociationParameter[];
    DocumentName: string;
}
export interface AWSEC2InstanceAssociationParameter {
    Key: string;
    Value: string[];
}
export interface AWSEC2InstanceVolume {
    Device: string;
    VolumeId: string;
}
export interface AWSEC2InternetGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Tags?: Tag[];
    };
    Type: "AWS::EC2::InternetGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2LaunchTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        LaunchTemplateData?: AWSEC2LaunchTemplateLaunchTemplateData;
        LaunchTemplateName?: string;
        TagSpecifications?: AWSEC2LaunchTemplateLaunchTemplateTagSpecification[];
    };
    Type: "AWS::EC2::LaunchTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2LaunchTemplateLaunchTemplateData {
    BlockDeviceMappings?: AWSEC2LaunchTemplateBlockDeviceMapping[];
    CapacityReservationSpecification?: AWSEC2LaunchTemplateCapacityReservationSpecification;
    CpuOptions?: AWSEC2LaunchTemplateCpuOptions;
    CreditSpecification?: AWSEC2LaunchTemplateCreditSpecification;
    DisableApiTermination?: boolean;
    EbsOptimized?: boolean;
    ElasticGpuSpecifications?: AWSEC2LaunchTemplateElasticGpuSpecification[];
    ElasticInferenceAccelerators?: AWSEC2LaunchTemplateLaunchTemplateElasticInferenceAccelerator[];
    EnclaveOptions?: AWSEC2LaunchTemplateEnclaveOptions;
    HibernationOptions?: AWSEC2LaunchTemplateHibernationOptions;
    IamInstanceProfile?: AWSEC2LaunchTemplateIamInstanceProfile;
    ImageId?: string;
    InstanceInitiatedShutdownBehavior?: string;
    InstanceMarketOptions?: AWSEC2LaunchTemplateInstanceMarketOptions;
    InstanceType?: string;
    KernelId?: string;
    KeyName?: string;
    LicenseSpecifications?: AWSEC2LaunchTemplateLicenseSpecification[];
    MetadataOptions?: AWSEC2LaunchTemplateMetadataOptions;
    Monitoring?: AWSEC2LaunchTemplateMonitoring;
    NetworkInterfaces?: AWSEC2LaunchTemplateNetworkInterface[];
    Placement?: AWSEC2LaunchTemplatePlacement;
    RamDiskId?: string;
    SecurityGroupIds?: string[];
    SecurityGroups?: string[];
    TagSpecifications?: AWSEC2LaunchTemplateTagSpecification[];
    UserData?: string;
}
export interface AWSEC2LaunchTemplateBlockDeviceMapping {
    DeviceName?: string;
    Ebs?: AWSEC2LaunchTemplateEbs;
    NoDevice?: string;
    VirtualName?: string;
}
export interface AWSEC2LaunchTemplateEbs {
    DeleteOnTermination?: boolean;
    Encrypted?: boolean;
    Iops?: number;
    KmsKeyId?: string;
    SnapshotId?: string;
    Throughput?: number;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSEC2LaunchTemplateCapacityReservationSpecification {
    CapacityReservationPreference?: string;
    CapacityReservationTarget?: AWSEC2LaunchTemplateCapacityReservationTarget;
}
export interface AWSEC2LaunchTemplateCapacityReservationTarget {
    CapacityReservationId?: string;
    CapacityReservationResourceGroupArn?: string;
}
export interface AWSEC2LaunchTemplateCpuOptions {
    CoreCount?: number;
    ThreadsPerCore?: number;
}
export interface AWSEC2LaunchTemplateCreditSpecification {
    CpuCredits?: string;
}
export interface AWSEC2LaunchTemplateElasticGpuSpecification {
    Type?: string;
}
export interface AWSEC2LaunchTemplateLaunchTemplateElasticInferenceAccelerator {
    Count?: number;
    Type?: string;
}
export interface AWSEC2LaunchTemplateEnclaveOptions {
    Enabled?: boolean;
}
export interface AWSEC2LaunchTemplateHibernationOptions {
    Configured?: boolean;
}
export interface AWSEC2LaunchTemplateIamInstanceProfile {
    Arn?: string;
    Name?: string;
}
export interface AWSEC2LaunchTemplateInstanceMarketOptions {
    MarketType?: string;
    SpotOptions?: AWSEC2LaunchTemplateSpotOptions;
}
export interface AWSEC2LaunchTemplateSpotOptions {
    BlockDurationMinutes?: number;
    InstanceInterruptionBehavior?: string;
    MaxPrice?: string;
    SpotInstanceType?: string;
    ValidUntil?: string;
}
export interface AWSEC2LaunchTemplateLicenseSpecification {
    LicenseConfigurationArn?: string;
}
export interface AWSEC2LaunchTemplateMetadataOptions {
    HttpEndpoint?: string;
    HttpProtocolIpv6?: string;
    HttpPutResponseHopLimit?: number;
    HttpTokens?: string;
}
export interface AWSEC2LaunchTemplateMonitoring {
    Enabled?: boolean;
}
export interface AWSEC2LaunchTemplateNetworkInterface {
    AssociateCarrierIpAddress?: boolean;
    AssociatePublicIpAddress?: boolean;
    DeleteOnTermination?: boolean;
    Description?: string;
    DeviceIndex?: number;
    Groups?: string[];
    InterfaceType?: string;
    Ipv6AddressCount?: number;
    Ipv6Addresses?: AWSEC2LaunchTemplateIpv6Add[];
    NetworkCardIndex?: number;
    NetworkInterfaceId?: string;
    PrivateIpAddress?: string;
    PrivateIpAddresses?: AWSEC2LaunchTemplatePrivateIpAdd[];
    SecondaryPrivateIpAddressCount?: number;
    SubnetId?: string;
}
export interface AWSEC2LaunchTemplateIpv6Add {
    Ipv6Address?: string;
}
export interface AWSEC2LaunchTemplatePrivateIpAdd {
    Primary?: boolean;
    PrivateIpAddress?: string;
}
export interface AWSEC2LaunchTemplatePlacement {
    Affinity?: string;
    AvailabilityZone?: string;
    GroupName?: string;
    HostId?: string;
    HostResourceGroupArn?: string;
    PartitionNumber?: number;
    SpreadDomain?: string;
    Tenancy?: string;
}
export interface AWSEC2LaunchTemplateTagSpecification {
    ResourceType?: string;
    Tags?: Tag[];
}
export interface AWSEC2LaunchTemplateLaunchTemplateTagSpecification {
    ResourceType?: string;
    Tags?: Tag[];
}
export interface AWSEC2LocalGatewayRoute {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DestinationCidrBlock: string;
        LocalGatewayRouteTableId: string;
        LocalGatewayVirtualInterfaceGroupId: string;
    };
    Type: "AWS::EC2::LocalGatewayRoute";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2LocalGatewayRouteTableVPCAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        LocalGatewayRouteTableId: string;
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::EC2::LocalGatewayRouteTableVPCAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NatGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllocationId?: string;
        ConnectivityType?: string;
        SubnetId: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::NatGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NetworkAcl {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::EC2::NetworkAcl";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NetworkAclEntry {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CidrBlock?: string;
        Egress?: boolean;
        Icmp?: AWSEC2NetworkAclEntryIcmp;
        Ipv6CidrBlock?: string;
        NetworkAclId: string;
        PortRange?: AWSEC2NetworkAclEntryPortRange;
        Protocol: number;
        RuleAction: string;
        RuleNumber: number;
    };
    Type: "AWS::EC2::NetworkAclEntry";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NetworkAclEntryIcmp {
    Code?: number;
    Type?: number;
}
export interface AWSEC2NetworkAclEntryPortRange {
    From?: number;
    To?: number;
}
export interface AWSEC2NetworkInsightsAnalysis {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FilterInArns?: string[];
        NetworkInsightsPathId: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::NetworkInsightsAnalysis";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NetworkInsightsPath {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Destination: string;
        DestinationIp?: string;
        DestinationPort?: number;
        Protocol: string;
        Source: string;
        SourceIp?: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::NetworkInsightsPath";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NetworkInterface {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        GroupSet?: string[];
        InterfaceType?: string;
        Ipv6AddressCount?: number;
        Ipv6Addresses?: AWSEC2NetworkInterfaceInstanceIpv6Address[];
        PrivateIpAddress?: string;
        PrivateIpAddresses?: AWSEC2NetworkInterfacePrivateIpAddressSpecification[];
        SecondaryPrivateIpAddressCount?: number;
        SourceDestCheck?: boolean;
        SubnetId: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::NetworkInterface";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NetworkInterfaceInstanceIpv6Address {
    Ipv6Address: string;
}
export interface AWSEC2NetworkInterfacePrivateIpAddressSpecification {
    Primary: boolean;
    PrivateIpAddress: string;
}
export interface AWSEC2NetworkInterfaceAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeleteOnTermination?: boolean;
        DeviceIndex: string;
        InstanceId: string;
        NetworkInterfaceId: string;
    };
    Type: "AWS::EC2::NetworkInterfaceAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2NetworkInterfacePermission {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AwsAccountId: string;
        NetworkInterfaceId: string;
        Permission: string;
    };
    Type: "AWS::EC2::NetworkInterfacePermission";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2PlacementGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Strategy?: string;
    };
    Type: "AWS::EC2::PlacementGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2PrefixList {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AddressFamily: string;
        Entries?: AWSEC2PrefixListEntry[];
        MaxEntries: number;
        PrefixListName: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::PrefixList";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2PrefixListEntry {
    Cidr: string;
    Description?: string;
}
export interface AWSEC2Route {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CarrierGatewayId?: string;
        DestinationCidrBlock?: string;
        DestinationIpv6CidrBlock?: string;
        EgressOnlyInternetGatewayId?: string;
        GatewayId?: string;
        InstanceId?: string;
        LocalGatewayId?: string;
        NatGatewayId?: string;
        NetworkInterfaceId?: string;
        RouteTableId: string;
        TransitGatewayId?: string;
        VpcEndpointId?: string;
        VpcPeeringConnectionId?: string;
    };
    Type: "AWS::EC2::Route";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2RouteTable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::EC2::RouteTable";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SecurityGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GroupDescription: string;
        GroupName?: string;
        SecurityGroupEgress?: AWSEC2SecurityGroupEgress[];
        SecurityGroupIngress?: AWSEC2SecurityGroupIngress[];
        Tags?: Tag[];
        VpcId?: string;
    };
    Type: "AWS::EC2::SecurityGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SecurityGroupEgress {
    CidrIp?: string;
    CidrIpv6?: string;
    Description?: string;
    DestinationPrefixListId?: string;
    DestinationSecurityGroupId?: string;
    FromPort?: number;
    IpProtocol: string;
    ToPort?: number;
}
export interface AWSEC2SecurityGroupIngress {
    CidrIp?: string;
    CidrIpv6?: string;
    Description?: string;
    FromPort?: number;
    IpProtocol: string;
    SourcePrefixListId?: string;
    SourceSecurityGroupId?: string;
    SourceSecurityGroupName?: string;
    SourceSecurityGroupOwnerId?: string;
    ToPort?: number;
}
export interface AWSEC2SecurityGroupEgress1 {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CidrIp?: string;
        CidrIpv6?: string;
        Description?: string;
        DestinationPrefixListId?: string;
        DestinationSecurityGroupId?: string;
        FromPort?: number;
        GroupId: string;
        IpProtocol: string;
        ToPort?: number;
    };
    Type: "AWS::EC2::SecurityGroupEgress";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SecurityGroupIngress1 {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CidrIp?: string;
        CidrIpv6?: string;
        Description?: string;
        FromPort?: number;
        GroupId?: string;
        GroupName?: string;
        IpProtocol: string;
        SourcePrefixListId?: string;
        SourceSecurityGroupId?: string;
        SourceSecurityGroupName?: string;
        SourceSecurityGroupOwnerId?: string;
        ToPort?: number;
    };
    Type: "AWS::EC2::SecurityGroupIngress";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SpotFleet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        SpotFleetRequestConfigData: AWSEC2SpotFleetSpotFleetRequestConfigData;
    };
    Type: "AWS::EC2::SpotFleet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SpotFleetSpotFleetRequestConfigData {
    AllocationStrategy?: string;
    Context?: string;
    ExcessCapacityTerminationPolicy?: string;
    IamFleetRole: string;
    InstanceInterruptionBehavior?: string;
    InstancePoolsToUseCount?: number;
    LaunchSpecifications?: AWSEC2SpotFleetSpotFleetLaunchSpecification[];
    LaunchTemplateConfigs?: AWSEC2SpotFleetLaunchTemplateConfig[];
    LoadBalancersConfig?: AWSEC2SpotFleetLoadBalancersConfig;
    OnDemandAllocationStrategy?: string;
    OnDemandMaxTotalPrice?: string;
    OnDemandTargetCapacity?: number;
    ReplaceUnhealthyInstances?: boolean;
    SpotMaintenanceStrategies?: AWSEC2SpotFleetSpotMaintenanceStrategies;
    SpotMaxTotalPrice?: string;
    SpotPrice?: string;
    TargetCapacity: number;
    TerminateInstancesWithExpiration?: boolean;
    Type?: string;
    ValidFrom?: string;
    ValidUntil?: string;
}
export interface AWSEC2SpotFleetSpotFleetLaunchSpecification {
    BlockDeviceMappings?: AWSEC2SpotFleetBlockDeviceMapping[];
    EbsOptimized?: boolean;
    IamInstanceProfile?: AWSEC2SpotFleetIamInstanceProfileSpecification;
    ImageId: string;
    InstanceType: string;
    KernelId?: string;
    KeyName?: string;
    Monitoring?: AWSEC2SpotFleetSpotFleetMonitoring;
    NetworkInterfaces?: AWSEC2SpotFleetInstanceNetworkInterfaceSpecification[];
    Placement?: AWSEC2SpotFleetSpotPlacement;
    RamdiskId?: string;
    SecurityGroups?: AWSEC2SpotFleetGroupIdentifier[];
    SpotPrice?: string;
    SubnetId?: string;
    TagSpecifications?: AWSEC2SpotFleetSpotFleetTagSpecification[];
    UserData?: string;
    WeightedCapacity?: number;
}
export interface AWSEC2SpotFleetBlockDeviceMapping {
    DeviceName: string;
    Ebs?: AWSEC2SpotFleetEbsBlockDevice;
    NoDevice?: string;
    VirtualName?: string;
}
export interface AWSEC2SpotFleetEbsBlockDevice {
    DeleteOnTermination?: boolean;
    Encrypted?: boolean;
    Iops?: number;
    SnapshotId?: string;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSEC2SpotFleetIamInstanceProfileSpecification {
    Arn?: string;
}
export interface AWSEC2SpotFleetSpotFleetMonitoring {
    Enabled?: boolean;
}
export interface AWSEC2SpotFleetInstanceNetworkInterfaceSpecification {
    AssociatePublicIpAddress?: boolean;
    DeleteOnTermination?: boolean;
    Description?: string;
    DeviceIndex?: number;
    Groups?: string[];
    Ipv6AddressCount?: number;
    Ipv6Addresses?: AWSEC2SpotFleetInstanceIpv6Address[];
    NetworkInterfaceId?: string;
    PrivateIpAddresses?: AWSEC2SpotFleetPrivateIpAddressSpecification[];
    SecondaryPrivateIpAddressCount?: number;
    SubnetId?: string;
}
export interface AWSEC2SpotFleetInstanceIpv6Address {
    Ipv6Address: string;
}
export interface AWSEC2SpotFleetPrivateIpAddressSpecification {
    Primary?: boolean;
    PrivateIpAddress: string;
}
export interface AWSEC2SpotFleetSpotPlacement {
    AvailabilityZone?: string;
    GroupName?: string;
    Tenancy?: string;
}
export interface AWSEC2SpotFleetGroupIdentifier {
    GroupId: string;
}
export interface AWSEC2SpotFleetSpotFleetTagSpecification {
    ResourceType?: string;
    Tags?: Tag[];
}
export interface AWSEC2SpotFleetLaunchTemplateConfig {
    LaunchTemplateSpecification?: AWSEC2SpotFleetFleetLaunchTemplateSpecification;
    Overrides?: AWSEC2SpotFleetLaunchTemplateOverrides[];
}
export interface AWSEC2SpotFleetFleetLaunchTemplateSpecification {
    LaunchTemplateId?: string;
    LaunchTemplateName?: string;
    Version: string;
}
export interface AWSEC2SpotFleetLaunchTemplateOverrides {
    AvailabilityZone?: string;
    InstanceType?: string;
    SpotPrice?: string;
    SubnetId?: string;
    WeightedCapacity?: number;
}
export interface AWSEC2SpotFleetLoadBalancersConfig {
    ClassicLoadBalancersConfig?: AWSEC2SpotFleetClassicLoadBalancersConfig;
    TargetGroupsConfig?: AWSEC2SpotFleetTargetGroupsConfig;
}
export interface AWSEC2SpotFleetClassicLoadBalancersConfig {
    ClassicLoadBalancers: AWSEC2SpotFleetClassicLoadBalancer[];
}
export interface AWSEC2SpotFleetClassicLoadBalancer {
    Name: string;
}
export interface AWSEC2SpotFleetTargetGroupsConfig {
    TargetGroups: AWSEC2SpotFleetTargetGroup[];
}
export interface AWSEC2SpotFleetTargetGroup {
    Arn: string;
}
export interface AWSEC2SpotFleetSpotMaintenanceStrategies {
    CapacityRebalance?: AWSEC2SpotFleetSpotCapacityRebalance;
}
export interface AWSEC2SpotFleetSpotCapacityRebalance {
    ReplacementStrategy?: string;
}
export interface AWSEC2Subnet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssignIpv6AddressOnCreation?: boolean;
        AvailabilityZone?: string;
        CidrBlock: string;
        Ipv6CidrBlock?: string;
        MapPublicIpOnLaunch?: boolean;
        OutpostArn?: string;
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::EC2::Subnet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SubnetCidrBlock {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Ipv6CidrBlock: string;
        SubnetId: string;
    };
    Type: "AWS::EC2::SubnetCidrBlock";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SubnetNetworkAclAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        NetworkAclId: string;
        SubnetId: string;
    };
    Type: "AWS::EC2::SubnetNetworkAclAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2SubnetRouteTableAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        RouteTableId: string;
        SubnetId: string;
    };
    Type: "AWS::EC2::SubnetRouteTableAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TrafficMirrorFilter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        NetworkServices?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::EC2::TrafficMirrorFilter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TrafficMirrorFilterRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        DestinationCidrBlock: string;
        DestinationPortRange?: AWSEC2TrafficMirrorFilterRuleTrafficMirrorPortRange;
        Protocol?: number;
        RuleAction: string;
        RuleNumber: number;
        SourceCidrBlock: string;
        SourcePortRange?: AWSEC2TrafficMirrorFilterRuleTrafficMirrorPortRange;
        TrafficDirection: string;
        TrafficMirrorFilterId: string;
    };
    Type: "AWS::EC2::TrafficMirrorFilterRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TrafficMirrorFilterRuleTrafficMirrorPortRange {
    FromPort: number;
    ToPort: number;
}
export interface AWSEC2TrafficMirrorSession {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        NetworkInterfaceId: string;
        PacketLength?: number;
        SessionNumber: number;
        Tags?: Tag[];
        TrafficMirrorFilterId: string;
        TrafficMirrorTargetId: string;
        VirtualNetworkId?: number;
    };
    Type: "AWS::EC2::TrafficMirrorSession";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TrafficMirrorTarget {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        NetworkInterfaceId?: string;
        NetworkLoadBalancerArn?: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::TrafficMirrorTarget";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AmazonSideAsn?: number;
        AssociationDefaultRouteTableId?: string;
        AutoAcceptSharedAttachments?: string;
        DefaultRouteTableAssociation?: string;
        DefaultRouteTablePropagation?: string;
        Description?: string;
        DnsSupport?: string;
        MulticastSupport?: string;
        PropagationDefaultRouteTableId?: string;
        Tags?: Tag[];
        TransitGatewayCidrBlocks?: string[];
        VpnEcmpSupport?: string;
    };
    Type: "AWS::EC2::TransitGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        SubnetIds: string[];
        Tags?: Tag[];
        TransitGatewayId: string;
        VpcId: string;
    };
    Type: "AWS::EC2::TransitGatewayAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayConnect {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Options: AWSEC2TransitGatewayConnectTransitGatewayConnectOptions;
        Tags?: Tag[];
        TransportTransitGatewayAttachmentId: string;
    };
    Type: "AWS::EC2::TransitGatewayConnect";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayConnectTransitGatewayConnectOptions {
    Protocol?: string;
}
export interface AWSEC2TransitGatewayMulticastDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Options?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
        TransitGatewayId: string;
    };
    Type: "AWS::EC2::TransitGatewayMulticastDomain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayMulticastDomainAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        SubnetId: string;
        TransitGatewayAttachmentId: string;
        TransitGatewayMulticastDomainId: string;
    };
    Type: "AWS::EC2::TransitGatewayMulticastDomainAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayMulticastGroupMember {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GroupIpAddress: string;
        NetworkInterfaceId: string;
        TransitGatewayMulticastDomainId: string;
    };
    Type: "AWS::EC2::TransitGatewayMulticastGroupMember";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayMulticastGroupSource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GroupIpAddress: string;
        NetworkInterfaceId: string;
        TransitGatewayMulticastDomainId: string;
    };
    Type: "AWS::EC2::TransitGatewayMulticastGroupSource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayPeeringAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PeerAccountId: string;
        PeerRegion: string;
        PeerTransitGatewayId: string;
        Tags?: Tag[];
        TransitGatewayId: string;
    };
    Type: "AWS::EC2::TransitGatewayPeeringAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayRoute {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Blackhole?: boolean;
        DestinationCidrBlock?: string;
        TransitGatewayAttachmentId?: string;
        TransitGatewayRouteTableId: string;
    };
    Type: "AWS::EC2::TransitGatewayRoute";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayRouteTable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Tags?: Tag[];
        TransitGatewayId: string;
    };
    Type: "AWS::EC2::TransitGatewayRouteTable";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayRouteTableAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        TransitGatewayAttachmentId: string;
        TransitGatewayRouteTableId: string;
    };
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayRouteTablePropagation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        TransitGatewayAttachmentId: string;
        TransitGatewayRouteTableId: string;
    };
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2TransitGatewayVpcAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AddSubnetIds?: string[];
        Options?: {
            [k: string]: unknown;
        };
        RemoveSubnetIds?: string[];
        SubnetIds?: string[];
        Tags?: Tag[];
        TransitGatewayId?: string;
        VpcId?: string;
    };
    Type: "AWS::EC2::TransitGatewayVpcAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPC {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CidrBlock: string;
        EnableDnsHostnames?: boolean;
        EnableDnsSupport?: boolean;
        InstanceTenancy?: string;
        Tags?: Tag[];
    };
    Type: "AWS::EC2::VPC";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCCidrBlock {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AmazonProvidedIpv6CidrBlock?: boolean;
        CidrBlock?: string;
        Ipv6CidrBlock?: string;
        Ipv6Pool?: string;
        VpcId: string;
    };
    Type: "AWS::EC2::VPCCidrBlock";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCDHCPOptionsAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DhcpOptionsId: string;
        VpcId: string;
    };
    Type: "AWS::EC2::VPCDHCPOptionsAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyDocument?: {
            [k: string]: unknown;
        };
        PrivateDnsEnabled?: boolean;
        RouteTableIds?: string[];
        SecurityGroupIds?: string[];
        ServiceName: string;
        SubnetIds?: string[];
        VpcEndpointType?: string;
        VpcId: string;
    };
    Type: "AWS::EC2::VPCEndpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCEndpointConnectionNotification {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectionEvents: string[];
        ConnectionNotificationArn: string;
        ServiceId?: string;
        VPCEndpointId?: string;
    };
    Type: "AWS::EC2::VPCEndpointConnectionNotification";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCEndpointService {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AcceptanceRequired?: boolean;
        GatewayLoadBalancerArns?: string[];
        NetworkLoadBalancerArns?: string[];
    };
    Type: "AWS::EC2::VPCEndpointService";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCEndpointServicePermissions {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowedPrincipals?: string[];
        ServiceId: string;
    };
    Type: "AWS::EC2::VPCEndpointServicePermissions";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCGatewayAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InternetGatewayId?: string;
        VpcId: string;
        VpnGatewayId?: string;
    };
    Type: "AWS::EC2::VPCGatewayAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPCPeeringConnection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PeerOwnerId?: string;
        PeerRegion?: string;
        PeerRoleArn?: string;
        PeerVpcId: string;
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::EC2::VPCPeeringConnection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPNConnection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CustomerGatewayId: string;
        StaticRoutesOnly?: boolean;
        Tags?: Tag[];
        TransitGatewayId?: string;
        Type: string;
        VpnGatewayId?: string;
        VpnTunnelOptionsSpecifications?: AWSEC2VPNConnectionVpnTunnelOptionsSpecification[];
    };
    Type: "AWS::EC2::VPNConnection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPNConnectionVpnTunnelOptionsSpecification {
    PreSharedKey?: string;
    TunnelInsideCidr?: string;
}
export interface AWSEC2VPNConnectionRoute {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DestinationCidrBlock: string;
        VpnConnectionId: string;
    };
    Type: "AWS::EC2::VPNConnectionRoute";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPNGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AmazonSideAsn?: number;
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::EC2::VPNGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VPNGatewayRoutePropagation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        RouteTableIds: string[];
        VpnGatewayId: string;
    };
    Type: "AWS::EC2::VPNGatewayRoutePropagation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2Volume {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoEnableIO?: boolean;
        AvailabilityZone: string;
        Encrypted?: boolean;
        Iops?: number;
        KmsKeyId?: string;
        MultiAttachEnabled?: boolean;
        OutpostArn?: string;
        Size?: number;
        SnapshotId?: string;
        Tags?: Tag[];
        Throughput?: number;
        VolumeType?: string;
    };
    Type: "AWS::EC2::Volume";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEC2VolumeAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Device: string;
        InstanceId: string;
        VolumeId: string;
    };
    Type: "AWS::EC2::VolumeAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECRPublicRepository {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        RepositoryCatalogData?: {
            [k: string]: unknown;
        };
        RepositoryName?: string;
        RepositoryPolicyText?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::ECR::PublicRepository";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECRRegistryPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyText: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ECR::RegistryPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECRReplicationConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ReplicationConfiguration: AWSECRReplicationConfigurationReplicationConfiguration;
    };
    Type: "AWS::ECR::ReplicationConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECRReplicationConfigurationReplicationConfiguration {
    Rules: AWSECRReplicationConfigurationReplicationRule[];
}
export interface AWSECRReplicationConfigurationReplicationRule {
    Destinations: AWSECRReplicationConfigurationReplicationDestination[];
    RepositoryFilters?: AWSECRReplicationConfigurationRepositoryFilter[];
}
export interface AWSECRReplicationConfigurationReplicationDestination {
    Region: string;
    RegistryId: string;
}
export interface AWSECRReplicationConfigurationRepositoryFilter {
    Filter: string;
    FilterType: string;
}
export interface AWSECRRepository {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        EncryptionConfiguration?: AWSECRRepositoryEncryptionConfiguration;
        ImageScanningConfiguration?: AWSECRRepositoryImageScanningConfiguration;
        ImageTagMutability?: string;
        LifecyclePolicy?: AWSECRRepositoryLifecyclePolicy;
        RepositoryName?: string;
        RepositoryPolicyText?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::ECR::Repository";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECRRepositoryEncryptionConfiguration {
    EncryptionType: string;
    KmsKey?: string;
}
export interface AWSECRRepositoryImageScanningConfiguration {
    ScanOnPush?: boolean;
}
export interface AWSECRRepositoryLifecyclePolicy {
    LifecyclePolicyText?: string;
    RegistryId?: string;
}
export interface AWSECSCapacityProvider {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingGroupProvider: AWSECSCapacityProviderAutoScalingGroupProvider;
        Name?: string;
        Tags?: Tag[];
    };
    Type: "AWS::ECS::CapacityProvider";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECSCapacityProviderAutoScalingGroupProvider {
    AutoScalingGroupArn: string;
    ManagedScaling?: AWSECSCapacityProviderManagedScaling;
    ManagedTerminationProtection?: string;
}
export interface AWSECSCapacityProviderManagedScaling {
    InstanceWarmupPeriod?: number;
    MaximumScalingStepSize?: number;
    MinimumScalingStepSize?: number;
    Status?: string;
    TargetCapacity?: number;
}
export interface AWSECSCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CapacityProviders?: string[];
        ClusterName?: string;
        ClusterSettings?: AWSECSClusterClusterSettings[];
        Configuration?: AWSECSClusterClusterConfiguration;
        DefaultCapacityProviderStrategy?: AWSECSClusterCapacityProviderStrategyItem[];
        Tags?: Tag[];
    };
    Type: "AWS::ECS::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECSClusterClusterSettings {
    Name?: string;
    Value?: string;
}
export interface AWSECSClusterClusterConfiguration {
    ExecuteCommandConfiguration?: AWSECSClusterExecuteCommandConfiguration;
}
export interface AWSECSClusterExecuteCommandConfiguration {
    KmsKeyId?: string;
    LogConfiguration?: AWSECSClusterExecuteCommandLogConfiguration;
    Logging?: string;
}
export interface AWSECSClusterExecuteCommandLogConfiguration {
    CloudWatchEncryptionEnabled?: boolean;
    CloudWatchLogGroupName?: string;
    S3BucketName?: string;
    S3EncryptionEnabled?: boolean;
    S3KeyPrefix?: string;
}
export interface AWSECSClusterCapacityProviderStrategyItem {
    Base?: number;
    CapacityProvider?: string;
    Weight?: number;
}
export interface AWSECSClusterCapacityProviderAssociations {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CapacityProviders: string[];
        Cluster: string;
        DefaultCapacityProviderStrategy: AWSECSClusterCapacityProviderAssociationsCapacityProviderStrategy[];
    };
    Type: "AWS::ECS::ClusterCapacityProviderAssociations";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECSClusterCapacityProviderAssociationsCapacityProviderStrategy {
    Base?: number;
    CapacityProvider: string;
    Weight?: number;
}
export interface AWSECSPrimaryTaskSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Cluster: string;
        Service: string;
        TaskSetId: string;
    };
    Type: "AWS::ECS::PrimaryTaskSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECSService {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CapacityProviderStrategy?: AWSECSServiceCapacityProviderStrategyItem[];
        Cluster?: string;
        DeploymentConfiguration?: AWSECSServiceDeploymentConfiguration;
        DeploymentController?: AWSECSServiceDeploymentController;
        DesiredCount?: number;
        EnableECSManagedTags?: boolean;
        EnableExecuteCommand?: boolean;
        HealthCheckGracePeriodSeconds?: number;
        LaunchType?: string;
        LoadBalancers?: AWSECSServiceLoadBalancer[];
        NetworkConfiguration?: AWSECSServiceNetworkConfiguration;
        PlacementConstraints?: AWSECSServicePlacementConstraint[];
        PlacementStrategies?: AWSECSServicePlacementStrategy[];
        PlatformVersion?: string;
        PropagateTags?: string;
        Role?: string;
        SchedulingStrategy?: string;
        ServiceName?: string;
        ServiceRegistries?: AWSECSServiceServiceRegistry[];
        Tags?: Tag[];
        TaskDefinition?: string;
    };
    Type: "AWS::ECS::Service";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECSServiceCapacityProviderStrategyItem {
    Base?: number;
    CapacityProvider?: string;
    Weight?: number;
}
export interface AWSECSServiceDeploymentConfiguration {
    DeploymentCircuitBreaker?: AWSECSServiceDeploymentCircuitBreaker;
    MaximumPercent?: number;
    MinimumHealthyPercent?: number;
}
export interface AWSECSServiceDeploymentCircuitBreaker {
    Enable: boolean;
    Rollback: boolean;
}
export interface AWSECSServiceDeploymentController {
    Type?: string;
}
export interface AWSECSServiceLoadBalancer {
    ContainerName?: string;
    ContainerPort?: number;
    LoadBalancerName?: string;
    TargetGroupArn?: string;
}
export interface AWSECSServiceNetworkConfiguration {
    AwsvpcConfiguration?: AWSECSServiceAwsVpcConfiguration;
}
export interface AWSECSServiceAwsVpcConfiguration {
    AssignPublicIp?: string;
    SecurityGroups?: string[];
    Subnets?: string[];
}
export interface AWSECSServicePlacementConstraint {
    Expression?: string;
    Type: string;
}
export interface AWSECSServicePlacementStrategy {
    Field?: string;
    Type: string;
}
export interface AWSECSServiceServiceRegistry {
    ContainerName?: string;
    ContainerPort?: number;
    Port?: number;
    RegistryArn?: string;
}
export interface AWSECSTaskDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ContainerDefinitions?: AWSECSTaskDefinitionContainerDefinition[];
        Cpu?: string;
        EphemeralStorage?: AWSECSTaskDefinitionEphemeralStorage;
        ExecutionRoleArn?: string;
        Family?: string;
        InferenceAccelerators?: AWSECSTaskDefinitionInferenceAccelerator[];
        IpcMode?: string;
        Memory?: string;
        NetworkMode?: string;
        PidMode?: string;
        PlacementConstraints?: AWSECSTaskDefinitionTaskDefinitionPlacementConstraint[];
        ProxyConfiguration?: AWSECSTaskDefinitionProxyConfiguration;
        RequiresCompatibilities?: string[];
        Tags?: Tag[];
        TaskRoleArn?: string;
        Volumes?: AWSECSTaskDefinitionVolume[];
    };
    Type: "AWS::ECS::TaskDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECSTaskDefinitionContainerDefinition {
    Command?: string[];
    Cpu?: number;
    DependsOn?: AWSECSTaskDefinitionContainerDependency[];
    DisableNetworking?: boolean;
    DnsSearchDomains?: string[];
    DnsServers?: string[];
    DockerLabels?: {
        [k: string]: unknown;
    };
    DockerSecurityOptions?: string[];
    EntryPoint?: string[];
    Environment?: AWSECSTaskDefinitionKeyValuePair[];
    EnvironmentFiles?: AWSECSTaskDefinitionEnvironmentFile[];
    Essential?: boolean;
    ExtraHosts?: AWSECSTaskDefinitionHostEntry[];
    FirelensConfiguration?: AWSECSTaskDefinitionFirelensConfiguration;
    HealthCheck?: AWSECSTaskDefinitionHealthCheck;
    Hostname?: string;
    Image?: string;
    Interactive?: boolean;
    Links?: string[];
    LinuxParameters?: AWSECSTaskDefinitionLinuxParameters;
    LogConfiguration?: AWSECSTaskDefinitionLogConfiguration;
    Memory?: number;
    MemoryReservation?: number;
    MountPoints?: AWSECSTaskDefinitionMountPoint[];
    Name?: string;
    PortMappings?: AWSECSTaskDefinitionPortMapping[];
    Privileged?: boolean;
    PseudoTerminal?: boolean;
    ReadonlyRootFilesystem?: boolean;
    RepositoryCredentials?: AWSECSTaskDefinitionRepositoryCredentials;
    ResourceRequirements?: AWSECSTaskDefinitionResourceRequirement[];
    Secrets?: AWSECSTaskDefinitionSecret[];
    StartTimeout?: number;
    StopTimeout?: number;
    SystemControls?: AWSECSTaskDefinitionSystemControl[];
    Ulimits?: AWSECSTaskDefinitionUlimit[];
    User?: string;
    VolumesFrom?: AWSECSTaskDefinitionVolumeFrom[];
    WorkingDirectory?: string;
}
export interface AWSECSTaskDefinitionContainerDependency {
    Condition?: string;
    ContainerName?: string;
}
export interface AWSECSTaskDefinitionKeyValuePair {
    Name?: string;
    Value?: string;
}
export interface AWSECSTaskDefinitionEnvironmentFile {
    Type?: string;
    Value?: string;
}
export interface AWSECSTaskDefinitionHostEntry {
    Hostname?: string;
    IpAddress?: string;
}
export interface AWSECSTaskDefinitionFirelensConfiguration {
    Options?: {
        [k: string]: unknown;
    };
    Type?: string;
}
export interface AWSECSTaskDefinitionHealthCheck {
    Command?: string[];
    Interval?: number;
    Retries?: number;
    StartPeriod?: number;
    Timeout?: number;
}
export interface AWSECSTaskDefinitionLinuxParameters {
    Capabilities?: AWSECSTaskDefinitionKernelCapabilities;
    Devices?: AWSECSTaskDefinitionDevice[];
    InitProcessEnabled?: boolean;
    MaxSwap?: number;
    SharedMemorySize?: number;
    Swappiness?: number;
    Tmpfs?: AWSECSTaskDefinitionTmpfs[];
}
export interface AWSECSTaskDefinitionKernelCapabilities {
    Add?: string[];
    Drop?: string[];
}
export interface AWSECSTaskDefinitionDevice {
    ContainerPath?: string;
    HostPath?: string;
    Permissions?: string[];
}
export interface AWSECSTaskDefinitionTmpfs {
    ContainerPath?: string;
    MountOptions?: string[];
    Size: number;
}
export interface AWSECSTaskDefinitionLogConfiguration {
    LogDriver: string;
    Options?: {
        [k: string]: unknown;
    };
    SecretOptions?: AWSECSTaskDefinitionSecret[];
}
export interface AWSECSTaskDefinitionSecret {
    Name: string;
    ValueFrom: string;
}
export interface AWSECSTaskDefinitionMountPoint {
    ContainerPath?: string;
    ReadOnly?: boolean;
    SourceVolume?: string;
}
export interface AWSECSTaskDefinitionPortMapping {
    ContainerPort?: number;
    HostPort?: number;
    Protocol?: string;
}
export interface AWSECSTaskDefinitionRepositoryCredentials {
    CredentialsParameter?: string;
}
export interface AWSECSTaskDefinitionResourceRequirement {
    Type: string;
    Value: string;
}
export interface AWSECSTaskDefinitionSystemControl {
    Namespace?: string;
    Value?: string;
}
export interface AWSECSTaskDefinitionUlimit {
    HardLimit: number;
    Name: string;
    SoftLimit: number;
}
export interface AWSECSTaskDefinitionVolumeFrom {
    ReadOnly?: boolean;
    SourceContainer?: string;
}
export interface AWSECSTaskDefinitionEphemeralStorage {
    SizeInGiB?: number;
}
export interface AWSECSTaskDefinitionInferenceAccelerator {
    DeviceName?: string;
    DeviceType?: string;
}
export interface AWSECSTaskDefinitionTaskDefinitionPlacementConstraint {
    Expression?: string;
    Type: string;
}
export interface AWSECSTaskDefinitionProxyConfiguration {
    ContainerName: string;
    ProxyConfigurationProperties?: AWSECSTaskDefinitionKeyValuePair[];
    Type?: string;
}
export interface AWSECSTaskDefinitionVolume {
    DockerVolumeConfiguration?: AWSECSTaskDefinitionDockerVolumeConfiguration;
    EFSVolumeConfiguration?: AWSECSTaskDefinitionEFSVolumeConfiguration;
    Host?: AWSECSTaskDefinitionHostVolumeProperties;
    Name?: string;
}
export interface AWSECSTaskDefinitionDockerVolumeConfiguration {
    Autoprovision?: boolean;
    Driver?: string;
    DriverOpts?: {
        [k: string]: unknown;
    };
    Labels?: {
        [k: string]: unknown;
    };
    Scope?: string;
}
export interface AWSECSTaskDefinitionEFSVolumeConfiguration {
    AuthorizationConfig?: {
        [k: string]: unknown;
    };
    FilesystemId: string;
    RootDirectory?: string;
    TransitEncryption?: string;
    TransitEncryptionPort?: number;
}
export interface AWSECSTaskDefinitionHostVolumeProperties {
    SourcePath?: string;
}
export interface AWSECSTaskSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Cluster: string;
        ExternalId?: string;
        LaunchType?: string;
        LoadBalancers?: AWSECSTaskSetLoadBalancer[];
        NetworkConfiguration?: AWSECSTaskSetNetworkConfiguration;
        PlatformVersion?: string;
        Scale?: AWSECSTaskSetScale;
        Service: string;
        ServiceRegistries?: AWSECSTaskSetServiceRegistry[];
        TaskDefinition: string;
    };
    Type: "AWS::ECS::TaskSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSECSTaskSetLoadBalancer {
    ContainerName?: string;
    ContainerPort?: number;
    LoadBalancerName?: string;
    TargetGroupArn?: string;
}
export interface AWSECSTaskSetNetworkConfiguration {
    AwsVpcConfiguration?: AWSECSTaskSetAwsVpcConfiguration;
}
export interface AWSECSTaskSetAwsVpcConfiguration {
    AssignPublicIp?: string;
    SecurityGroups?: string[];
    Subnets: string[];
}
export interface AWSECSTaskSetScale {
    Unit?: string;
    Value?: number;
}
export interface AWSECSTaskSetServiceRegistry {
    ContainerName?: string;
    ContainerPort?: number;
    Port?: number;
    RegistryArn?: string;
}
export interface AWSEFSAccessPoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessPointTags?: AWSEFSAccessPointAccessPointTag[];
        ClientToken?: string;
        FileSystemId: string;
        PosixUser?: AWSEFSAccessPointPosixUser;
        RootDirectory?: AWSEFSAccessPointRootDirectory;
    };
    Type: "AWS::EFS::AccessPoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEFSAccessPointAccessPointTag {
    Key?: string;
    Value?: string;
}
export interface AWSEFSAccessPointPosixUser {
    Gid: string;
    SecondaryGids?: string[];
    Uid: string;
}
export interface AWSEFSAccessPointRootDirectory {
    CreationInfo?: AWSEFSAccessPointCreationInfo;
    Path?: string;
}
export interface AWSEFSAccessPointCreationInfo {
    OwnerGid: string;
    OwnerUid: string;
    Permissions: string;
}
export interface AWSEFSFileSystem {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AvailabilityZoneName?: string;
        BackupPolicy?: AWSEFSFileSystemBackupPolicy;
        BypassPolicyLockoutSafetyCheck?: boolean;
        Encrypted?: boolean;
        FileSystemPolicy?: {
            [k: string]: unknown;
        };
        FileSystemTags?: AWSEFSFileSystemElasticFileSystemTag[];
        KmsKeyId?: string;
        LifecyclePolicies?: AWSEFSFileSystemLifecyclePolicy[];
        PerformanceMode?: string;
        ProvisionedThroughputInMibps?: number;
        ThroughputMode?: string;
    };
    Type: "AWS::EFS::FileSystem";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEFSFileSystemBackupPolicy {
    Status: string;
}
export interface AWSEFSFileSystemElasticFileSystemTag {
    Key: string;
    Value: string;
}
export interface AWSEFSFileSystemLifecyclePolicy {
    TransitionToIA?: string;
    TransitionToPrimaryStorageClass?: string;
}
export interface AWSEFSMountTarget {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FileSystemId: string;
        IpAddress?: string;
        SecurityGroups: string[];
        SubnetId: string;
    };
    Type: "AWS::EFS::MountTarget";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEKSAddon {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AddonName: string;
        AddonVersion?: string;
        ClusterName: string;
        ResolveConflicts?: string;
        ServiceAccountRoleArn?: string;
        Tags?: Tag[];
    };
    Type: "AWS::EKS::Addon";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEKSCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EncryptionConfig?: AWSEKSClusterEncryptionConfig[];
        KubernetesNetworkConfig?: AWSEKSClusterKubernetesNetworkConfig;
        Name?: string;
        ResourcesVpcConfig: AWSEKSClusterResourcesVpcConfig;
        RoleArn: string;
        Version?: string;
    };
    Type: "AWS::EKS::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEKSClusterEncryptionConfig {
    Provider?: AWSEKSClusterProvider;
    Resources?: string[];
}
export interface AWSEKSClusterProvider {
    KeyArn?: string;
}
export interface AWSEKSClusterKubernetesNetworkConfig {
    ServiceIpv4Cidr?: string;
}
export interface AWSEKSClusterResourcesVpcConfig {
    SecurityGroupIds?: string[];
    SubnetIds: string[];
}
export interface AWSEKSFargateProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClusterName: string;
        FargateProfileName?: string;
        PodExecutionRoleArn: string;
        Selectors: AWSEKSFargateProfileSelector[];
        Subnets?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::EKS::FargateProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEKSFargateProfileSelector {
    Labels?: AWSEKSFargateProfileLabel[];
    Namespace: string;
}
export interface AWSEKSFargateProfileLabel {
    Key: string;
    Value: string;
}
export interface AWSEKSNodegroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AmiType?: string;
        CapacityType?: string;
        ClusterName: string;
        DiskSize?: number;
        ForceUpdateEnabled?: boolean;
        InstanceTypes?: string[];
        Labels?: {
            [k: string]: unknown;
        };
        LaunchTemplate?: AWSEKSNodegroupLaunchTemplateSpecification;
        NodeRole: string;
        NodegroupName?: string;
        ReleaseVersion?: string;
        RemoteAccess?: AWSEKSNodegroupRemoteAccess;
        ScalingConfig?: AWSEKSNodegroupScalingConfig;
        Subnets: string[];
        Tags?: {
            [k: string]: unknown;
        };
        Taints?: AWSEKSNodegroupTaint[];
        UpdateConfig?: AWSEKSNodegroupUpdateConfig;
        Version?: string;
    };
    Type: "AWS::EKS::Nodegroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEKSNodegroupLaunchTemplateSpecification {
    Id?: string;
    Name?: string;
    Version?: string;
}
export interface AWSEKSNodegroupRemoteAccess {
    Ec2SshKey: string;
    SourceSecurityGroups?: string[];
}
export interface AWSEKSNodegroupScalingConfig {
    DesiredSize?: number;
    MaxSize?: number;
    MinSize?: number;
}
export interface AWSEKSNodegroupTaint {
    Effect?: string;
    Key?: string;
    Value?: string;
}
export interface AWSEKSNodegroupUpdateConfig {
    MaxUnavailable?: number;
    MaxUnavailablePercentage?: number;
}
export interface AWSEMRCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdditionalInfo?: {
            [k: string]: unknown;
        };
        Applications?: AWSEMRClusterApplication[];
        AutoScalingRole?: string;
        BootstrapActions?: AWSEMRClusterBootstrapActionConfig[];
        Configurations?: AWSEMRClusterConfiguration[];
        CustomAmiId?: string;
        EbsRootVolumeSize?: number;
        Instances: AWSEMRClusterJobFlowInstancesConfig;
        JobFlowRole: string;
        KerberosAttributes?: AWSEMRClusterKerberosAttributes;
        LogEncryptionKmsKeyId?: string;
        LogUri?: string;
        ManagedScalingPolicy?: AWSEMRClusterManagedScalingPolicy;
        Name: string;
        ReleaseLabel?: string;
        ScaleDownBehavior?: string;
        SecurityConfiguration?: string;
        ServiceRole: string;
        StepConcurrencyLevel?: number;
        Steps?: AWSEMRClusterStepConfig[];
        Tags?: Tag[];
        VisibleToAllUsers?: boolean;
    };
    Type: "AWS::EMR::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRClusterApplication {
    AdditionalInfo?: {
        [k: string]: unknown;
    };
    Args?: string[];
    Name?: string;
    Version?: string;
}
export interface AWSEMRClusterBootstrapActionConfig {
    Name: string;
    ScriptBootstrapAction: AWSEMRClusterScriptBootstrapActionConfig;
}
export interface AWSEMRClusterScriptBootstrapActionConfig {
    Args?: string[];
    Path: string;
}
export interface AWSEMRClusterConfiguration {
    Classification?: string;
    ConfigurationProperties?: {
        [k: string]: unknown;
    };
    Configurations?: AWSEMRClusterConfiguration[];
}
export interface AWSEMRClusterJobFlowInstancesConfig {
    AdditionalMasterSecurityGroups?: string[];
    AdditionalSlaveSecurityGroups?: string[];
    CoreInstanceFleet?: AWSEMRClusterInstanceFleetConfig;
    CoreInstanceGroup?: AWSEMRClusterInstanceGroupConfig;
    Ec2KeyName?: string;
    Ec2SubnetId?: string;
    Ec2SubnetIds?: string[];
    EmrManagedMasterSecurityGroup?: string;
    EmrManagedSlaveSecurityGroup?: string;
    HadoopVersion?: string;
    KeepJobFlowAliveWhenNoSteps?: boolean;
    MasterInstanceFleet?: AWSEMRClusterInstanceFleetConfig;
    MasterInstanceGroup?: AWSEMRClusterInstanceGroupConfig;
    Placement?: AWSEMRClusterPlacementType;
    ServiceAccessSecurityGroup?: string;
    TerminationProtected?: boolean;
}
export interface AWSEMRClusterInstanceFleetConfig {
    InstanceTypeConfigs?: AWSEMRClusterInstanceTypeConfig[];
    LaunchSpecifications?: AWSEMRClusterInstanceFleetProvisioningSpecifications;
    Name?: string;
    TargetOnDemandCapacity?: number;
    TargetSpotCapacity?: number;
}
export interface AWSEMRClusterInstanceTypeConfig {
    BidPrice?: string;
    BidPriceAsPercentageOfOnDemandPrice?: number;
    Configurations?: AWSEMRClusterConfiguration[];
    EbsConfiguration?: AWSEMRClusterEbsConfiguration;
    InstanceType: string;
    WeightedCapacity?: number;
}
export interface AWSEMRClusterEbsConfiguration {
    EbsBlockDeviceConfigs?: AWSEMRClusterEbsBlockDeviceConfig[];
    EbsOptimized?: boolean;
}
export interface AWSEMRClusterEbsBlockDeviceConfig {
    VolumeSpecification: AWSEMRClusterVolumeSpecification;
    VolumesPerInstance?: number;
}
export interface AWSEMRClusterVolumeSpecification {
    Iops?: number;
    SizeInGB: number;
    VolumeType: string;
}
export interface AWSEMRClusterInstanceFleetProvisioningSpecifications {
    OnDemandSpecification?: AWSEMRClusterOnDemandProvisioningSpecification;
    SpotSpecification?: AWSEMRClusterSpotProvisioningSpecification;
}
export interface AWSEMRClusterOnDemandProvisioningSpecification {
    AllocationStrategy: string;
}
export interface AWSEMRClusterSpotProvisioningSpecification {
    AllocationStrategy?: string;
    BlockDurationMinutes?: number;
    TimeoutAction: string;
    TimeoutDurationMinutes: number;
}
export interface AWSEMRClusterInstanceGroupConfig {
    AutoScalingPolicy?: AWSEMRClusterAutoScalingPolicy;
    BidPrice?: string;
    Configurations?: AWSEMRClusterConfiguration[];
    EbsConfiguration?: AWSEMRClusterEbsConfiguration;
    InstanceCount: number;
    InstanceType: string;
    Market?: string;
    Name?: string;
}
export interface AWSEMRClusterAutoScalingPolicy {
    Constraints: AWSEMRClusterScalingConstraints;
    Rules: AWSEMRClusterScalingRule[];
}
export interface AWSEMRClusterScalingConstraints {
    MaxCapacity: number;
    MinCapacity: number;
}
export interface AWSEMRClusterScalingRule {
    Action: AWSEMRClusterScalingAction;
    Description?: string;
    Name: string;
    Trigger: AWSEMRClusterScalingTrigger;
}
export interface AWSEMRClusterScalingAction {
    Market?: string;
    SimpleScalingPolicyConfiguration: AWSEMRClusterSimpleScalingPolicyConfiguration;
}
export interface AWSEMRClusterSimpleScalingPolicyConfiguration {
    AdjustmentType?: string;
    CoolDown?: number;
    ScalingAdjustment: number;
}
export interface AWSEMRClusterScalingTrigger {
    CloudWatchAlarmDefinition: AWSEMRClusterCloudWatchAlarmDefinition;
}
export interface AWSEMRClusterCloudWatchAlarmDefinition {
    ComparisonOperator: string;
    Dimensions?: AWSEMRClusterMetricDimension[];
    EvaluationPeriods?: number;
    MetricName: string;
    Namespace?: string;
    Period: number;
    Statistic?: string;
    Threshold: number;
    Unit?: string;
}
export interface AWSEMRClusterMetricDimension {
    Key: string;
    Value: string;
}
export interface AWSEMRClusterPlacementType {
    AvailabilityZone: string;
}
export interface AWSEMRClusterKerberosAttributes {
    ADDomainJoinPassword?: string;
    ADDomainJoinUser?: string;
    CrossRealmTrustPrincipalPassword?: string;
    KdcAdminPassword: string;
    Realm: string;
}
export interface AWSEMRClusterManagedScalingPolicy {
    ComputeLimits?: AWSEMRClusterComputeLimits;
}
export interface AWSEMRClusterComputeLimits {
    MaximumCapacityUnits: number;
    MaximumCoreCapacityUnits?: number;
    MaximumOnDemandCapacityUnits?: number;
    MinimumCapacityUnits: number;
    UnitType: string;
}
export interface AWSEMRClusterStepConfig {
    ActionOnFailure?: string;
    HadoopJarStep: AWSEMRClusterHadoopJarStepConfig;
    Name: string;
}
export interface AWSEMRClusterHadoopJarStepConfig {
    Args?: string[];
    Jar: string;
    MainClass?: string;
    StepProperties?: AWSEMRClusterKeyValue[];
}
export interface AWSEMRClusterKeyValue {
    Key?: string;
    Value?: string;
}
export interface AWSEMRInstanceFleetConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClusterId: string;
        InstanceFleetType: string;
        InstanceTypeConfigs?: AWSEMRInstanceFleetConfigInstanceTypeConfig[];
        LaunchSpecifications?: AWSEMRInstanceFleetConfigInstanceFleetProvisioningSpecifications;
        Name?: string;
        TargetOnDemandCapacity?: number;
        TargetSpotCapacity?: number;
    };
    Type: "AWS::EMR::InstanceFleetConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRInstanceFleetConfigInstanceTypeConfig {
    BidPrice?: string;
    BidPriceAsPercentageOfOnDemandPrice?: number;
    Configurations?: AWSEMRInstanceFleetConfigConfiguration[];
    EbsConfiguration?: AWSEMRInstanceFleetConfigEbsConfiguration;
    InstanceType: string;
    WeightedCapacity?: number;
}
export interface AWSEMRInstanceFleetConfigConfiguration {
    Classification?: string;
    ConfigurationProperties?: {
        [k: string]: unknown;
    };
    Configurations?: AWSEMRInstanceFleetConfigConfiguration[];
}
export interface AWSEMRInstanceFleetConfigEbsConfiguration {
    EbsBlockDeviceConfigs?: AWSEMRInstanceFleetConfigEbsBlockDeviceConfig[];
    EbsOptimized?: boolean;
}
export interface AWSEMRInstanceFleetConfigEbsBlockDeviceConfig {
    VolumeSpecification: AWSEMRInstanceFleetConfigVolumeSpecification;
    VolumesPerInstance?: number;
}
export interface AWSEMRInstanceFleetConfigVolumeSpecification {
    Iops?: number;
    SizeInGB: number;
    VolumeType: string;
}
export interface AWSEMRInstanceFleetConfigInstanceFleetProvisioningSpecifications {
    OnDemandSpecification?: AWSEMRInstanceFleetConfigOnDemandProvisioningSpecification;
    SpotSpecification?: AWSEMRInstanceFleetConfigSpotProvisioningSpecification;
}
export interface AWSEMRInstanceFleetConfigOnDemandProvisioningSpecification {
    AllocationStrategy: string;
}
export interface AWSEMRInstanceFleetConfigSpotProvisioningSpecification {
    AllocationStrategy?: string;
    BlockDurationMinutes?: number;
    TimeoutAction: string;
    TimeoutDurationMinutes: number;
}
export interface AWSEMRInstanceGroupConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingPolicy?: AWSEMRInstanceGroupConfigAutoScalingPolicy;
        BidPrice?: string;
        Configurations?: AWSEMRInstanceGroupConfigConfiguration[];
        EbsConfiguration?: AWSEMRInstanceGroupConfigEbsConfiguration;
        InstanceCount: number;
        InstanceRole: string;
        InstanceType: string;
        JobFlowId: string;
        Market?: string;
        Name?: string;
    };
    Type: "AWS::EMR::InstanceGroupConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRInstanceGroupConfigAutoScalingPolicy {
    Constraints: AWSEMRInstanceGroupConfigScalingConstraints;
    Rules: AWSEMRInstanceGroupConfigScalingRule[];
}
export interface AWSEMRInstanceGroupConfigScalingConstraints {
    MaxCapacity: number;
    MinCapacity: number;
}
export interface AWSEMRInstanceGroupConfigScalingRule {
    Action: AWSEMRInstanceGroupConfigScalingAction;
    Description?: string;
    Name: string;
    Trigger: AWSEMRInstanceGroupConfigScalingTrigger;
}
export interface AWSEMRInstanceGroupConfigScalingAction {
    Market?: string;
    SimpleScalingPolicyConfiguration: AWSEMRInstanceGroupConfigSimpleScalingPolicyConfiguration;
}
export interface AWSEMRInstanceGroupConfigSimpleScalingPolicyConfiguration {
    AdjustmentType?: string;
    CoolDown?: number;
    ScalingAdjustment: number;
}
export interface AWSEMRInstanceGroupConfigScalingTrigger {
    CloudWatchAlarmDefinition: AWSEMRInstanceGroupConfigCloudWatchAlarmDefinition;
}
export interface AWSEMRInstanceGroupConfigCloudWatchAlarmDefinition {
    ComparisonOperator: string;
    Dimensions?: AWSEMRInstanceGroupConfigMetricDimension[];
    EvaluationPeriods?: number;
    MetricName: string;
    Namespace?: string;
    Period: number;
    Statistic?: string;
    Threshold: number;
    Unit?: string;
}
export interface AWSEMRInstanceGroupConfigMetricDimension {
    Key: string;
    Value: string;
}
export interface AWSEMRInstanceGroupConfigConfiguration {
    Classification?: string;
    ConfigurationProperties?: {
        [k: string]: unknown;
    };
    Configurations?: AWSEMRInstanceGroupConfigConfiguration[];
}
export interface AWSEMRInstanceGroupConfigEbsConfiguration {
    EbsBlockDeviceConfigs?: AWSEMRInstanceGroupConfigEbsBlockDeviceConfig[];
    EbsOptimized?: boolean;
}
export interface AWSEMRInstanceGroupConfigEbsBlockDeviceConfig {
    VolumeSpecification: AWSEMRInstanceGroupConfigVolumeSpecification;
    VolumesPerInstance?: number;
}
export interface AWSEMRInstanceGroupConfigVolumeSpecification {
    Iops?: number;
    SizeInGB: number;
    VolumeType: string;
}
export interface AWSEMRSecurityConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        SecurityConfiguration: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::EMR::SecurityConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRStep {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ActionOnFailure: string;
        HadoopJarStep: AWSEMRStepHadoopJarStepConfig;
        JobFlowId: string;
        Name: string;
    };
    Type: "AWS::EMR::Step";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRStepHadoopJarStepConfig {
    Args?: string[];
    Jar: string;
    MainClass?: string;
    StepProperties?: AWSEMRStepKeyValue[];
}
export interface AWSEMRStepKeyValue {
    Key?: string;
    Value?: string;
}
export interface AWSEMRStudio {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthMode: string;
        DefaultS3Location: string;
        Description?: string;
        EngineSecurityGroupId: string;
        IdpAuthUrl?: string;
        IdpRelayStateParameterName?: string;
        Name: string;
        ServiceRole: string;
        SubnetIds: string[];
        Tags?: Tag[];
        UserRole?: string;
        VpcId: string;
        WorkspaceSecurityGroupId: string;
    };
    Type: "AWS::EMR::Studio";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRStudioSessionMapping {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        IdentityName: string;
        IdentityType: string;
        SessionPolicyArn: string;
        StudioId: string;
    };
    Type: "AWS::EMR::StudioSessionMapping";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRContainersVirtualCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ContainerProvider: AWSEMRContainersVirtualClusterContainerProvider;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::EMRContainers::VirtualCluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEMRContainersVirtualClusterContainerProvider {
    Id: string;
    Info: AWSEMRContainersVirtualClusterContainerInfo;
    Type: string;
}
export interface AWSEMRContainersVirtualClusterContainerInfo {
    EksInfo: AWSEMRContainersVirtualClusterEksInfo;
}
export interface AWSEMRContainersVirtualClusterEksInfo {
    Namespace: string;
}
export interface AWSElastiCacheCacheCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AZMode?: string;
        AutoMinorVersionUpgrade?: boolean;
        CacheNodeType: string;
        CacheParameterGroupName?: string;
        CacheSecurityGroupNames?: string[];
        CacheSubnetGroupName?: string;
        ClusterName?: string;
        Engine: string;
        EngineVersion?: string;
        LogDeliveryConfigurations?: AWSElastiCacheCacheClusterLogDeliveryConfigurationRequest[];
        NotificationTopicArn?: string;
        NumCacheNodes: number;
        Port?: number;
        PreferredAvailabilityZone?: string;
        PreferredAvailabilityZones?: string[];
        PreferredMaintenanceWindow?: string;
        SnapshotArns?: string[];
        SnapshotName?: string;
        SnapshotRetentionLimit?: number;
        SnapshotWindow?: string;
        Tags?: Tag[];
        VpcSecurityGroupIds?: string[];
    };
    Type: "AWS::ElastiCache::CacheCluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheCacheClusterLogDeliveryConfigurationRequest {
    DestinationDetails: AWSElastiCacheCacheClusterDestinationDetails;
    DestinationType: string;
    LogFormat: string;
    LogType: string;
}
export interface AWSElastiCacheCacheClusterDestinationDetails {
    CloudWatchLogsDetails?: AWSElastiCacheCacheClusterCloudWatchLogsDestinationDetails;
    KinesisFirehoseDetails?: AWSElastiCacheCacheClusterKinesisFirehoseDestinationDetails;
}
export interface AWSElastiCacheCacheClusterCloudWatchLogsDestinationDetails {
    LogGroup: string;
}
export interface AWSElastiCacheCacheClusterKinesisFirehoseDestinationDetails {
    DeliveryStream: string;
}
export interface AWSElastiCacheGlobalReplicationGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutomaticFailoverEnabled?: boolean;
        CacheNodeType?: string;
        CacheParameterGroupName?: string;
        EngineVersion?: string;
        GlobalNodeGroupCount?: number;
        GlobalReplicationGroupDescription?: string;
        GlobalReplicationGroupIdSuffix?: string;
        Members: AWSElastiCacheGlobalReplicationGroupGlobalReplicationGroupMember[];
        RegionalConfigurations?: AWSElastiCacheGlobalReplicationGroupRegionalConfiguration[];
    };
    Type: "AWS::ElastiCache::GlobalReplicationGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheGlobalReplicationGroupGlobalReplicationGroupMember {
    ReplicationGroupId?: string;
    ReplicationGroupRegion?: string;
    Role?: string;
}
export interface AWSElastiCacheGlobalReplicationGroupRegionalConfiguration {
    ReplicationGroupId?: string;
    ReplicationGroupRegion?: string;
    ReshardingConfigurations?: AWSElastiCacheGlobalReplicationGroupReshardingConfiguration[];
}
export interface AWSElastiCacheGlobalReplicationGroupReshardingConfiguration {
    NodeGroupId?: string;
    PreferredAvailabilityZones?: string[];
}
export interface AWSElastiCacheParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CacheParameterGroupFamily: string;
        Description: string;
        Properties?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::ElastiCache::ParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheReplicationGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AtRestEncryptionEnabled?: boolean;
        AuthToken?: string;
        AutoMinorVersionUpgrade?: boolean;
        AutomaticFailoverEnabled?: boolean;
        CacheNodeType?: string;
        CacheParameterGroupName?: string;
        CacheSecurityGroupNames?: string[];
        CacheSubnetGroupName?: string;
        Engine?: string;
        EngineVersion?: string;
        GlobalReplicationGroupId?: string;
        KmsKeyId?: string;
        LogDeliveryConfigurations?: AWSElastiCacheReplicationGroupLogDeliveryConfigurationRequest[];
        MultiAZEnabled?: boolean;
        NodeGroupConfiguration?: AWSElastiCacheReplicationGroupNodeGroupConfiguration[];
        NotificationTopicArn?: string;
        NumCacheClusters?: number;
        NumNodeGroups?: number;
        Port?: number;
        PreferredCacheClusterAZs?: string[];
        PreferredMaintenanceWindow?: string;
        PrimaryClusterId?: string;
        ReplicasPerNodeGroup?: number;
        ReplicationGroupDescription: string;
        ReplicationGroupId?: string;
        SecurityGroupIds?: string[];
        SnapshotArns?: string[];
        SnapshotName?: string;
        SnapshotRetentionLimit?: number;
        SnapshotWindow?: string;
        SnapshottingClusterId?: string;
        Tags?: Tag[];
        TransitEncryptionEnabled?: boolean;
        UserGroupIds?: string[];
    };
    Type: "AWS::ElastiCache::ReplicationGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheReplicationGroupLogDeliveryConfigurationRequest {
    DestinationDetails: AWSElastiCacheReplicationGroupDestinationDetails;
    DestinationType: string;
    LogFormat: string;
    LogType: string;
}
export interface AWSElastiCacheReplicationGroupDestinationDetails {
    CloudWatchLogsDetails?: AWSElastiCacheReplicationGroupCloudWatchLogsDestinationDetails;
    KinesisFirehoseDetails?: AWSElastiCacheReplicationGroupKinesisFirehoseDestinationDetails;
}
export interface AWSElastiCacheReplicationGroupCloudWatchLogsDestinationDetails {
    LogGroup: string;
}
export interface AWSElastiCacheReplicationGroupKinesisFirehoseDestinationDetails {
    DeliveryStream: string;
}
export interface AWSElastiCacheReplicationGroupNodeGroupConfiguration {
    NodeGroupId?: string;
    PrimaryAvailabilityZone?: string;
    ReplicaAvailabilityZones?: string[];
    ReplicaCount?: number;
    Slots?: string;
}
export interface AWSElastiCacheSecurityGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        Tags?: Tag[];
    };
    Type: "AWS::ElastiCache::SecurityGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheSecurityGroupIngress {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CacheSecurityGroupName: string;
        EC2SecurityGroupName: string;
        EC2SecurityGroupOwnerId?: string;
    };
    Type: "AWS::ElastiCache::SecurityGroupIngress";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CacheSubnetGroupName?: string;
        Description: string;
        SubnetIds: string[];
        Tags?: Tag[];
    };
    Type: "AWS::ElastiCache::SubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheUser {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessString?: string;
        Engine: string;
        NoPasswordRequired?: boolean;
        Passwords?: string[];
        UserId: string;
        UserName: string;
    };
    Type: "AWS::ElastiCache::User";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElastiCacheUserGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Engine: string;
        UserGroupId: string;
        UserIds?: string[];
    };
    Type: "AWS::ElastiCache::UserGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticBeanstalkApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ApplicationName?: string;
        Description?: string;
        ResourceLifecycleConfig?: AWSElasticBeanstalkApplicationApplicationResourceLifecycleConfig;
    };
    Type: "AWS::ElasticBeanstalk::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticBeanstalkApplicationApplicationResourceLifecycleConfig {
    ServiceRole?: string;
    VersionLifecycleConfig?: AWSElasticBeanstalkApplicationApplicationVersionLifecycleConfig;
}
export interface AWSElasticBeanstalkApplicationApplicationVersionLifecycleConfig {
    MaxAgeRule?: AWSElasticBeanstalkApplicationMaxAgeRule;
    MaxCountRule?: AWSElasticBeanstalkApplicationMaxCountRule;
}
export interface AWSElasticBeanstalkApplicationMaxAgeRule {
    DeleteSourceFromS3?: boolean;
    Enabled?: boolean;
    MaxAgeInDays?: number;
}
export interface AWSElasticBeanstalkApplicationMaxCountRule {
    DeleteSourceFromS3?: boolean;
    Enabled?: boolean;
    MaxCount?: number;
}
export interface AWSElasticBeanstalkApplicationVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        Description?: string;
        SourceBundle: AWSElasticBeanstalkApplicationVersionSourceBundle;
    };
    Type: "AWS::ElasticBeanstalk::ApplicationVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticBeanstalkApplicationVersionSourceBundle {
    S3Bucket: string;
    S3Key: string;
}
export interface AWSElasticBeanstalkConfigurationTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        Description?: string;
        EnvironmentId?: string;
        OptionSettings?: AWSElasticBeanstalkConfigurationTemplateConfigurationOptionSetting[];
        PlatformArn?: string;
        SolutionStackName?: string;
        SourceConfiguration?: AWSElasticBeanstalkConfigurationTemplateSourceConfiguration;
    };
    Type: "AWS::ElasticBeanstalk::ConfigurationTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticBeanstalkConfigurationTemplateConfigurationOptionSetting {
    Namespace: string;
    OptionName: string;
    ResourceName?: string;
    Value?: string;
}
export interface AWSElasticBeanstalkConfigurationTemplateSourceConfiguration {
    ApplicationName: string;
    TemplateName: string;
}
export interface AWSElasticBeanstalkEnvironment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        CNAMEPrefix?: string;
        Description?: string;
        EnvironmentName?: string;
        OperationsRole?: string;
        OptionSettings?: AWSElasticBeanstalkEnvironmentOptionSetting[];
        PlatformArn?: string;
        SolutionStackName?: string;
        Tags?: Tag[];
        TemplateName?: string;
        Tier?: AWSElasticBeanstalkEnvironmentTier;
        VersionLabel?: string;
    };
    Type: "AWS::ElasticBeanstalk::Environment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticBeanstalkEnvironmentOptionSetting {
    Namespace: string;
    OptionName: string;
    ResourceName?: string;
    Value?: string;
}
export interface AWSElasticBeanstalkEnvironmentTier {
    Name?: string;
    Type?: string;
    Version?: string;
}
export interface AWSElasticLoadBalancingLoadBalancer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessLoggingPolicy?: AWSElasticLoadBalancingLoadBalancerAccessLoggingPolicy;
        AppCookieStickinessPolicy?: AWSElasticLoadBalancingLoadBalancerAppCookieStickinessPolicy[];
        AvailabilityZones?: string[];
        ConnectionDrainingPolicy?: AWSElasticLoadBalancingLoadBalancerConnectionDrainingPolicy;
        ConnectionSettings?: AWSElasticLoadBalancingLoadBalancerConnectionSettings;
        CrossZone?: boolean;
        HealthCheck?: AWSElasticLoadBalancingLoadBalancerHealthCheck;
        Instances?: string[];
        LBCookieStickinessPolicy?: AWSElasticLoadBalancingLoadBalancerLBCookieStickinessPolicy[];
        Listeners: AWSElasticLoadBalancingLoadBalancerListeners[];
        LoadBalancerName?: string;
        Policies?: AWSElasticLoadBalancingLoadBalancerPolicies[];
        Scheme?: string;
        SecurityGroups?: string[];
        Subnets?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::ElasticLoadBalancing::LoadBalancer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticLoadBalancingLoadBalancerAccessLoggingPolicy {
    EmitInterval?: number;
    Enabled: boolean;
    S3BucketName: string;
    S3BucketPrefix?: string;
}
export interface AWSElasticLoadBalancingLoadBalancerAppCookieStickinessPolicy {
    CookieName: string;
    PolicyName: string;
}
export interface AWSElasticLoadBalancingLoadBalancerConnectionDrainingPolicy {
    Enabled: boolean;
    Timeout?: number;
}
export interface AWSElasticLoadBalancingLoadBalancerConnectionSettings {
    IdleTimeout: number;
}
export interface AWSElasticLoadBalancingLoadBalancerHealthCheck {
    HealthyThreshold: string;
    Interval: string;
    Target: string;
    Timeout: string;
    UnhealthyThreshold: string;
}
export interface AWSElasticLoadBalancingLoadBalancerLBCookieStickinessPolicy {
    CookieExpirationPeriod?: string;
    PolicyName?: string;
}
export interface AWSElasticLoadBalancingLoadBalancerListeners {
    InstancePort: string;
    InstanceProtocol?: string;
    LoadBalancerPort: string;
    PolicyNames?: string[];
    Protocol: string;
    SSLCertificateId?: string;
}
export interface AWSElasticLoadBalancingLoadBalancerPolicies {
    Attributes: {
        [k: string]: unknown;
    }[];
    InstancePorts?: string[];
    LoadBalancerPorts?: string[];
    PolicyName: string;
    PolicyType: string;
}
export interface AWSElasticLoadBalancingV2Listener {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AlpnPolicy?: string[];
        Certificates?: AWSElasticLoadBalancingV2ListenerCertificate[];
        DefaultActions: AWSElasticLoadBalancingV2ListenerAction[];
        LoadBalancerArn: string;
        Port?: number;
        Protocol?: string;
        SslPolicy?: string;
    };
    Type: "AWS::ElasticLoadBalancingV2::Listener";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticLoadBalancingV2ListenerCertificate {
    CertificateArn?: string;
}
export interface AWSElasticLoadBalancingV2ListenerAction {
    AuthenticateCognitoConfig?: AWSElasticLoadBalancingV2ListenerAuthenticateCognitoConfig;
    AuthenticateOidcConfig?: AWSElasticLoadBalancingV2ListenerAuthenticateOidcConfig;
    FixedResponseConfig?: AWSElasticLoadBalancingV2ListenerFixedResponseConfig;
    ForwardConfig?: AWSElasticLoadBalancingV2ListenerForwardConfig;
    Order?: number;
    RedirectConfig?: AWSElasticLoadBalancingV2ListenerRedirectConfig;
    TargetGroupArn?: string;
    Type: string;
}
export interface AWSElasticLoadBalancingV2ListenerAuthenticateCognitoConfig {
    AuthenticationRequestExtraParams?: {
        [k: string]: unknown;
    };
    OnUnauthenticatedRequest?: string;
    Scope?: string;
    SessionCookieName?: string;
    SessionTimeout?: string;
    UserPoolArn: string;
    UserPoolClientId: string;
    UserPoolDomain: string;
}
export interface AWSElasticLoadBalancingV2ListenerAuthenticateOidcConfig {
    AuthenticationRequestExtraParams?: {
        [k: string]: unknown;
    };
    AuthorizationEndpoint: string;
    ClientId: string;
    ClientSecret: string;
    Issuer: string;
    OnUnauthenticatedRequest?: string;
    Scope?: string;
    SessionCookieName?: string;
    SessionTimeout?: string;
    TokenEndpoint: string;
    UserInfoEndpoint: string;
}
export interface AWSElasticLoadBalancingV2ListenerFixedResponseConfig {
    ContentType?: string;
    MessageBody?: string;
    StatusCode: string;
}
export interface AWSElasticLoadBalancingV2ListenerForwardConfig {
    TargetGroupStickinessConfig?: AWSElasticLoadBalancingV2ListenerTargetGroupStickinessConfig;
    TargetGroups?: AWSElasticLoadBalancingV2ListenerTargetGroupTuple[];
}
export interface AWSElasticLoadBalancingV2ListenerTargetGroupStickinessConfig {
    DurationSeconds?: number;
    Enabled?: boolean;
}
export interface AWSElasticLoadBalancingV2ListenerTargetGroupTuple {
    TargetGroupArn?: string;
    Weight?: number;
}
export interface AWSElasticLoadBalancingV2ListenerRedirectConfig {
    Host?: string;
    Path?: string;
    Port?: string;
    Protocol?: string;
    Query?: string;
    StatusCode: string;
}
export interface AWSElasticLoadBalancingV2ListenerCertificate1 {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Certificates: AWSElasticLoadBalancingV2ListenerCertificateCertificate[];
        ListenerArn: string;
    };
    Type: "AWS::ElasticLoadBalancingV2::ListenerCertificate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticLoadBalancingV2ListenerCertificateCertificate {
    CertificateArn?: string;
}
export interface AWSElasticLoadBalancingV2ListenerRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Actions: AWSElasticLoadBalancingV2ListenerRuleAction[];
        Conditions: AWSElasticLoadBalancingV2ListenerRuleRuleCondition[];
        ListenerArn: string;
        Priority: number;
    };
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticLoadBalancingV2ListenerRuleAction {
    AuthenticateCognitoConfig?: AWSElasticLoadBalancingV2ListenerRuleAuthenticateCognitoConfig;
    AuthenticateOidcConfig?: AWSElasticLoadBalancingV2ListenerRuleAuthenticateOidcConfig;
    FixedResponseConfig?: AWSElasticLoadBalancingV2ListenerRuleFixedResponseConfig;
    ForwardConfig?: AWSElasticLoadBalancingV2ListenerRuleForwardConfig;
    Order?: number;
    RedirectConfig?: AWSElasticLoadBalancingV2ListenerRuleRedirectConfig;
    TargetGroupArn?: string;
    Type: string;
}
export interface AWSElasticLoadBalancingV2ListenerRuleAuthenticateCognitoConfig {
    AuthenticationRequestExtraParams?: {
        [k: string]: unknown;
    };
    OnUnauthenticatedRequest?: string;
    Scope?: string;
    SessionCookieName?: string;
    SessionTimeout?: number;
    UserPoolArn: string;
    UserPoolClientId: string;
    UserPoolDomain: string;
}
export interface AWSElasticLoadBalancingV2ListenerRuleAuthenticateOidcConfig {
    AuthenticationRequestExtraParams?: {
        [k: string]: unknown;
    };
    AuthorizationEndpoint: string;
    ClientId: string;
    ClientSecret: string;
    Issuer: string;
    OnUnauthenticatedRequest?: string;
    Scope?: string;
    SessionCookieName?: string;
    SessionTimeout?: number;
    TokenEndpoint: string;
    UseExistingClientSecret?: boolean;
    UserInfoEndpoint: string;
}
export interface AWSElasticLoadBalancingV2ListenerRuleFixedResponseConfig {
    ContentType?: string;
    MessageBody?: string;
    StatusCode: string;
}
export interface AWSElasticLoadBalancingV2ListenerRuleForwardConfig {
    TargetGroupStickinessConfig?: AWSElasticLoadBalancingV2ListenerRuleTargetGroupStickinessConfig;
    TargetGroups?: AWSElasticLoadBalancingV2ListenerRuleTargetGroupTuple[];
}
export interface AWSElasticLoadBalancingV2ListenerRuleTargetGroupStickinessConfig {
    DurationSeconds?: number;
    Enabled?: boolean;
}
export interface AWSElasticLoadBalancingV2ListenerRuleTargetGroupTuple {
    TargetGroupArn?: string;
    Weight?: number;
}
export interface AWSElasticLoadBalancingV2ListenerRuleRedirectConfig {
    Host?: string;
    Path?: string;
    Port?: string;
    Protocol?: string;
    Query?: string;
    StatusCode: string;
}
export interface AWSElasticLoadBalancingV2ListenerRuleRuleCondition {
    Field?: string;
    HostHeaderConfig?: AWSElasticLoadBalancingV2ListenerRuleHostHeaderConfig;
    HttpHeaderConfig?: AWSElasticLoadBalancingV2ListenerRuleHttpHeaderConfig;
    HttpRequestMethodConfig?: AWSElasticLoadBalancingV2ListenerRuleHttpRequestMethodConfig;
    PathPatternConfig?: AWSElasticLoadBalancingV2ListenerRulePathPatternConfig;
    QueryStringConfig?: AWSElasticLoadBalancingV2ListenerRuleQueryStringConfig;
    SourceIpConfig?: AWSElasticLoadBalancingV2ListenerRuleSourceIpConfig;
    Values?: string[];
}
export interface AWSElasticLoadBalancingV2ListenerRuleHostHeaderConfig {
    Values?: string[];
}
export interface AWSElasticLoadBalancingV2ListenerRuleHttpHeaderConfig {
    HttpHeaderName?: string;
    Values?: string[];
}
export interface AWSElasticLoadBalancingV2ListenerRuleHttpRequestMethodConfig {
    Values?: string[];
}
export interface AWSElasticLoadBalancingV2ListenerRulePathPatternConfig {
    Values?: string[];
}
export interface AWSElasticLoadBalancingV2ListenerRuleQueryStringConfig {
    Values?: AWSElasticLoadBalancingV2ListenerRuleQueryStringKeyValue[];
}
export interface AWSElasticLoadBalancingV2ListenerRuleQueryStringKeyValue {
    Key?: string;
    Value?: string;
}
export interface AWSElasticLoadBalancingV2ListenerRuleSourceIpConfig {
    Values?: string[];
}
export interface AWSElasticLoadBalancingV2LoadBalancer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        IpAddressType?: string;
        LoadBalancerAttributes?: AWSElasticLoadBalancingV2LoadBalancerLoadBalancerAttribute[];
        Name?: string;
        Scheme?: string;
        SecurityGroups?: string[];
        SubnetMappings?: AWSElasticLoadBalancingV2LoadBalancerSubnetMapping[];
        Subnets?: string[];
        Tags?: Tag[];
        Type?: string;
    };
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticLoadBalancingV2LoadBalancerLoadBalancerAttribute {
    Key?: string;
    Value?: string;
}
export interface AWSElasticLoadBalancingV2LoadBalancerSubnetMapping {
    AllocationId?: string;
    IPv6Address?: string;
    PrivateIPv4Address?: string;
    SubnetId: string;
}
export interface AWSElasticLoadBalancingV2TargetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        HealthCheckEnabled?: boolean;
        HealthCheckIntervalSeconds?: number;
        HealthCheckPath?: string;
        HealthCheckPort?: string;
        HealthCheckProtocol?: string;
        HealthCheckTimeoutSeconds?: number;
        HealthyThresholdCount?: number;
        IpAddressType?: string;
        Matcher?: AWSElasticLoadBalancingV2TargetGroupMatcher;
        Name?: string;
        Port?: number;
        Protocol?: string;
        ProtocolVersion?: string;
        Tags?: Tag[];
        TargetGroupAttributes?: AWSElasticLoadBalancingV2TargetGroupTargetGroupAttribute[];
        TargetType?: string;
        Targets?: AWSElasticLoadBalancingV2TargetGroupTargetDescription[];
        UnhealthyThresholdCount?: number;
        VpcId?: string;
    };
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticLoadBalancingV2TargetGroupMatcher {
    GrpcCode?: string;
    HttpCode?: string;
}
export interface AWSElasticLoadBalancingV2TargetGroupTargetGroupAttribute {
    Key?: string;
    Value?: string;
}
export interface AWSElasticLoadBalancingV2TargetGroupTargetDescription {
    AvailabilityZone?: string;
    Id: string;
    Port?: number;
}
export interface AWSElasticsearchDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AccessPolicies?: {
            [k: string]: unknown;
        };
        AdvancedOptions?: {
            [k: string]: unknown;
        };
        AdvancedSecurityOptions?: AWSElasticsearchDomainAdvancedSecurityOptionsInput;
        CognitoOptions?: AWSElasticsearchDomainCognitoOptions;
        DomainEndpointOptions?: AWSElasticsearchDomainDomainEndpointOptions;
        DomainName?: string;
        EBSOptions?: AWSElasticsearchDomainEBSOptions;
        ElasticsearchClusterConfig?: AWSElasticsearchDomainElasticsearchClusterConfig;
        ElasticsearchVersion?: string;
        EncryptionAtRestOptions?: AWSElasticsearchDomainEncryptionAtRestOptions;
        LogPublishingOptions?: {
            [k: string]: AWSElasticsearchDomainLogPublishingOption;
        };
        NodeToNodeEncryptionOptions?: AWSElasticsearchDomainNodeToNodeEncryptionOptions;
        SnapshotOptions?: AWSElasticsearchDomainSnapshotOptions;
        Tags?: Tag[];
        VPCOptions?: AWSElasticsearchDomainVPCOptions;
    };
    Type: "AWS::Elasticsearch::Domain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSElasticsearchDomainAdvancedSecurityOptionsInput {
    Enabled?: boolean;
    InternalUserDatabaseEnabled?: boolean;
    MasterUserOptions?: AWSElasticsearchDomainMasterUserOptions;
}
export interface AWSElasticsearchDomainMasterUserOptions {
    MasterUserARN?: string;
    MasterUserName?: string;
    MasterUserPassword?: string;
}
export interface AWSElasticsearchDomainCognitoOptions {
    Enabled?: boolean;
    IdentityPoolId?: string;
    RoleArn?: string;
    UserPoolId?: string;
}
export interface AWSElasticsearchDomainDomainEndpointOptions {
    CustomEndpoint?: string;
    CustomEndpointCertificateArn?: string;
    CustomEndpointEnabled?: boolean;
    EnforceHTTPS?: boolean;
    TLSSecurityPolicy?: string;
}
export interface AWSElasticsearchDomainEBSOptions {
    EBSEnabled?: boolean;
    Iops?: number;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSElasticsearchDomainElasticsearchClusterConfig {
    ColdStorageOptions?: AWSElasticsearchDomainColdStorageOptions;
    DedicatedMasterCount?: number;
    DedicatedMasterEnabled?: boolean;
    DedicatedMasterType?: string;
    InstanceCount?: number;
    InstanceType?: string;
    WarmCount?: number;
    WarmEnabled?: boolean;
    WarmType?: string;
    ZoneAwarenessConfig?: AWSElasticsearchDomainZoneAwarenessConfig;
    ZoneAwarenessEnabled?: boolean;
}
export interface AWSElasticsearchDomainColdStorageOptions {
    Enabled?: boolean;
}
export interface AWSElasticsearchDomainZoneAwarenessConfig {
    AvailabilityZoneCount?: number;
}
export interface AWSElasticsearchDomainEncryptionAtRestOptions {
    Enabled?: boolean;
    KmsKeyId?: string;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSElasticsearchDomainLogPublishingOption {
    CloudWatchLogsLogGroupArn?: string;
    Enabled?: boolean;
}
export interface AWSElasticsearchDomainNodeToNodeEncryptionOptions {
    Enabled?: boolean;
}
export interface AWSElasticsearchDomainSnapshotOptions {
    AutomatedSnapshotStartHour?: number;
}
export interface AWSElasticsearchDomainVPCOptions {
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSEventSchemasDiscoverer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CrossAccount?: boolean;
        Description?: string;
        SourceArn: string;
        Tags?: AWSEventSchemasDiscovererTagsEntry[];
    };
    Type: "AWS::EventSchemas::Discoverer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventSchemasDiscovererTagsEntry {
    Key: string;
    Value: string;
}
export interface AWSEventSchemasRegistry {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        RegistryName?: string;
        Tags?: AWSEventSchemasRegistryTagsEntry[];
    };
    Type: "AWS::EventSchemas::Registry";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventSchemasRegistryTagsEntry {
    Key: string;
    Value: string;
}
export interface AWSEventSchemasRegistryPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Policy: {
            [k: string]: unknown;
        };
        RegistryName: string;
        RevisionId?: string;
    };
    Type: "AWS::EventSchemas::RegistryPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventSchemasSchema {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Content: string;
        Description?: string;
        RegistryName: string;
        SchemaName?: string;
        Tags?: AWSEventSchemasSchemaTagsEntry[];
        Type: string;
    };
    Type: "AWS::EventSchemas::Schema";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventSchemasSchemaTagsEntry {
    Key: string;
    Value: string;
}
export interface AWSEventsApiDestination {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectionArn: string;
        Description?: string;
        HttpMethod: string;
        InvocationEndpoint: string;
        InvocationRateLimitPerSecond?: number;
        Name?: string;
    };
    Type: "AWS::Events::ApiDestination";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventsArchive {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ArchiveName?: string;
        Description?: string;
        EventPattern?: {
            [k: string]: unknown;
        };
        RetentionDays?: number;
        SourceArn: string;
    };
    Type: "AWS::Events::Archive";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventsConnection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthParameters: {
            [k: string]: unknown;
        };
        AuthorizationType: string;
        Description?: string;
        Name?: string;
    };
    Type: "AWS::Events::Connection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventsEventBus {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EventSourceName?: string;
        Name: string;
    };
    Type: "AWS::Events::EventBus";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventsEventBusPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Action?: string;
        Condition?: AWSEventsEventBusPolicyCondition;
        EventBusName?: string;
        Principal?: string;
        Statement?: {
            [k: string]: unknown;
        };
        StatementId: string;
    };
    Type: "AWS::Events::EventBusPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventsEventBusPolicyCondition {
    Key?: string;
    Type?: string;
    Value?: string;
}
export interface AWSEventsRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        EventBusName?: string;
        EventPattern?: {
            [k: string]: unknown;
        };
        Name?: string;
        RoleArn?: string;
        ScheduleExpression?: string;
        State?: string;
        Targets?: AWSEventsRuleTarget[];
    };
    Type: "AWS::Events::Rule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSEventsRuleTarget {
    Arn: string;
    BatchParameters?: AWSEventsRuleBatchParameters;
    DeadLetterConfig?: AWSEventsRuleDeadLetterConfig;
    EcsParameters?: AWSEventsRuleEcsParameters;
    HttpParameters?: AWSEventsRuleHttpParameters;
    Id: string;
    Input?: string;
    InputPath?: string;
    InputTransformer?: AWSEventsRuleInputTransformer;
    KinesisParameters?: AWSEventsRuleKinesisParameters;
    RedshiftDataParameters?: AWSEventsRuleRedshiftDataParameters;
    RetryPolicy?: AWSEventsRuleRetryPolicy;
    RoleArn?: string;
    RunCommandParameters?: AWSEventsRuleRunCommandParameters;
    SqsParameters?: AWSEventsRuleSqsParameters;
}
export interface AWSEventsRuleBatchParameters {
    ArrayProperties?: AWSEventsRuleBatchArrayProperties;
    JobDefinition: string;
    JobName: string;
    RetryStrategy?: AWSEventsRuleBatchRetryStrategy;
}
export interface AWSEventsRuleBatchArrayProperties {
    Size?: number;
}
export interface AWSEventsRuleBatchRetryStrategy {
    Attempts?: number;
}
export interface AWSEventsRuleDeadLetterConfig {
    Arn?: string;
}
export interface AWSEventsRuleEcsParameters {
    CapacityProviderStrategy?: AWSEventsRuleCapacityProviderStrategyItem[];
    EnableECSManagedTags?: boolean;
    EnableExecuteCommand?: boolean;
    Group?: string;
    LaunchType?: string;
    NetworkConfiguration?: AWSEventsRuleNetworkConfiguration;
    PlacementConstraints?: AWSEventsRulePlacementConstraint[];
    PlacementStrategies?: AWSEventsRulePlacementStrategy[];
    PlatformVersion?: string;
    PropagateTags?: string;
    ReferenceId?: string;
    TagList?: Tag[];
    TaskCount?: number;
    TaskDefinitionArn: string;
}
export interface AWSEventsRuleCapacityProviderStrategyItem {
    Base?: number;
    CapacityProvider: string;
    Weight?: number;
}
export interface AWSEventsRuleNetworkConfiguration {
    AwsVpcConfiguration?: AWSEventsRuleAwsVpcConfiguration;
}
export interface AWSEventsRuleAwsVpcConfiguration {
    AssignPublicIp?: string;
    SecurityGroups?: string[];
    Subnets: string[];
}
export interface AWSEventsRulePlacementConstraint {
    Expression?: string;
    Type?: string;
}
export interface AWSEventsRulePlacementStrategy {
    Field?: string;
    Type?: string;
}
export interface AWSEventsRuleHttpParameters {
    HeaderParameters?: {
        [k: string]: unknown;
    };
    PathParameterValues?: string[];
    QueryStringParameters?: {
        [k: string]: unknown;
    };
}
export interface AWSEventsRuleInputTransformer {
    InputPathsMap?: {
        [k: string]: unknown;
    };
    InputTemplate: string;
}
export interface AWSEventsRuleKinesisParameters {
    PartitionKeyPath: string;
}
export interface AWSEventsRuleRedshiftDataParameters {
    Database: string;
    DbUser?: string;
    SecretManagerArn?: string;
    Sql: string;
    StatementName?: string;
    WithEvent?: boolean;
}
export interface AWSEventsRuleRetryPolicy {
    MaximumEventAgeInSeconds?: number;
    MaximumRetryAttempts?: number;
}
export interface AWSEventsRuleRunCommandParameters {
    RunCommandTargets: AWSEventsRuleRunCommandTarget[];
}
export interface AWSEventsRuleRunCommandTarget {
    Key: string;
    Values: string[];
}
export interface AWSEventsRuleSqsParameters {
    MessageGroupId: string;
}
export interface AWSFISExperimentTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Actions?: {
            [k: string]: AWSFISExperimentTemplateExperimentTemplateAction;
        };
        Description: string;
        RoleArn: string;
        StopConditions: AWSFISExperimentTemplateExperimentTemplateStopCondition[];
        Tags: {
            [k: string]: unknown;
        };
        Targets: {
            [k: string]: AWSFISExperimentTemplateExperimentTemplateTarget;
        };
    };
    Type: "AWS::FIS::ExperimentTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSFISExperimentTemplateExperimentTemplateAction {
    ActionId: string;
    Description?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    StartAfter?: string[];
    Targets?: {
        [k: string]: unknown;
    };
}
export interface AWSFISExperimentTemplateExperimentTemplateStopCondition {
    Source: string;
    Value?: string;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSFISExperimentTemplateExperimentTemplateTarget {
    Filters?: AWSFISExperimentTemplateExperimentTemplateTargetFilter[];
    ResourceArns?: string[];
    ResourceTags?: {
        [k: string]: unknown;
    };
    ResourceType: string;
    SelectionMode: string;
}
export interface AWSFISExperimentTemplateExperimentTemplateTargetFilter {
    Path: string;
    Values: string[];
}
export interface AWSFMSNotificationChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        SnsRoleName: string;
        SnsTopicArn: string;
    };
    Type: "AWS::FMS::NotificationChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFMSPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeleteAllPolicyResources?: boolean;
        ExcludeMap?: AWSFMSPolicyIEMap;
        ExcludeResourceTags: boolean;
        IncludeMap?: AWSFMSPolicyIEMap;
        PolicyName: string;
        RemediationEnabled: boolean;
        ResourceTags?: AWSFMSPolicyResourceTag[];
        ResourceType: string;
        ResourceTypeList?: string[];
        SecurityServicePolicyData: {
            [k: string]: unknown;
        };
        Tags?: AWSFMSPolicyPolicyTag[];
    };
    Type: "AWS::FMS::Policy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFMSPolicyIEMap {
    ACCOUNT?: string[];
    ORGUNIT?: string[];
}
export interface AWSFMSPolicyResourceTag {
    Key: string;
    Value?: string;
}
export interface AWSFMSPolicyPolicyTag {
    Key: string;
    Value: string;
}
export interface AWSFSxFileSystem {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BackupId?: string;
        FileSystemType: string;
        KmsKeyId?: string;
        LustreConfiguration?: AWSFSxFileSystemLustreConfiguration;
        SecurityGroupIds?: string[];
        StorageCapacity?: number;
        StorageType?: string;
        SubnetIds: string[];
        Tags?: Tag[];
        WindowsConfiguration?: AWSFSxFileSystemWindowsConfiguration;
    };
    Type: "AWS::FSx::FileSystem";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFSxFileSystemLustreConfiguration {
    AutoImportPolicy?: string;
    AutomaticBackupRetentionDays?: number;
    CopyTagsToBackups?: boolean;
    DailyAutomaticBackupStartTime?: string;
    DataCompressionType?: string;
    DeploymentType?: string;
    DriveCacheType?: string;
    ExportPath?: string;
    ImportPath?: string;
    ImportedFileChunkSize?: number;
    PerUnitStorageThroughput?: number;
    WeeklyMaintenanceStartTime?: string;
}
export interface AWSFSxFileSystemWindowsConfiguration {
    ActiveDirectoryId?: string;
    Aliases?: string[];
    AuditLogConfiguration?: AWSFSxFileSystemAuditLogConfiguration;
    AutomaticBackupRetentionDays?: number;
    CopyTagsToBackups?: boolean;
    DailyAutomaticBackupStartTime?: string;
    DeploymentType?: string;
    PreferredSubnetId?: string;
    SelfManagedActiveDirectoryConfiguration?: AWSFSxFileSystemSelfManagedActiveDirectoryConfiguration;
    ThroughputCapacity: number;
    WeeklyMaintenanceStartTime?: string;
}
export interface AWSFSxFileSystemAuditLogConfiguration {
    AuditLogDestination?: string;
    FileAccessAuditLogLevel: string;
    FileShareAccessAuditLogLevel: string;
}
export interface AWSFSxFileSystemSelfManagedActiveDirectoryConfiguration {
    DnsIps?: string[];
    DomainName?: string;
    FileSystemAdministratorsGroup?: string;
    OrganizationalUnitDistinguishedName?: string;
    Password?: string;
    UserName?: string;
}
export interface AWSFinSpaceEnvironment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        FederationMode?: string;
        FederationParameters?: AWSFinSpaceEnvironmentFederationParameters;
        KmsKeyId?: string;
        Name: string;
    };
    Type: "AWS::FinSpace::Environment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFinSpaceEnvironmentFederationParameters {
    ApplicationCallBackURL?: string;
    AttributeMap?: {
        [k: string]: unknown;
    };
    FederationProviderName?: string;
    FederationURN?: string;
    SamlMetadataDocument?: string;
    SamlMetadataURL?: string;
}
export interface AWSFraudDetectorDetector {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssociatedModels?: AWSFraudDetectorDetectorModel[];
        Description?: string;
        DetectorId: string;
        DetectorVersionStatus?: string;
        EventType: AWSFraudDetectorDetectorEventType;
        RuleExecutionMode?: string;
        Rules: AWSFraudDetectorDetectorRule[];
        Tags?: Tag[];
    };
    Type: "AWS::FraudDetector::Detector";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFraudDetectorDetectorModel {
    Arn?: string;
}
export interface AWSFraudDetectorDetectorEventType {
    Arn?: string;
    CreatedTime?: string;
    Description?: string;
    EntityTypes?: AWSFraudDetectorDetectorEntityType[];
    EventVariables?: AWSFraudDetectorDetectorEventVariable[];
    Inline?: boolean;
    Labels?: AWSFraudDetectorDetectorLabel[];
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
}
export interface AWSFraudDetectorDetectorEntityType {
    Arn?: string;
    CreatedTime?: string;
    Description?: string;
    Inline?: boolean;
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
}
export interface AWSFraudDetectorDetectorEventVariable {
    Arn?: string;
    CreatedTime?: string;
    DataSource?: string;
    DataType?: string;
    DefaultValue?: string;
    Description?: string;
    Inline?: boolean;
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
    VariableType?: string;
}
export interface AWSFraudDetectorDetectorLabel {
    Arn?: string;
    CreatedTime?: string;
    Description?: string;
    Inline?: boolean;
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
}
export interface AWSFraudDetectorDetectorRule {
    Arn?: string;
    CreatedTime?: string;
    Description?: string;
    DetectorId?: string;
    Expression?: string;
    Language?: string;
    LastUpdatedTime?: string;
    Outcomes?: AWSFraudDetectorDetectorOutcome[];
    RuleId?: string;
    RuleVersion?: string;
    Tags?: Tag[];
}
export interface AWSFraudDetectorDetectorOutcome {
    Arn?: string;
    CreatedTime?: string;
    Description?: string;
    Inline?: boolean;
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
}
export interface AWSFraudDetectorEntityType {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::FraudDetector::EntityType";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFraudDetectorEventType {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        EntityTypes: AWSFraudDetectorEventTypeEntityType[];
        EventVariables: AWSFraudDetectorEventTypeEventVariable[];
        Labels: AWSFraudDetectorEventTypeLabel[];
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::FraudDetector::EventType";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFraudDetectorEventTypeEntityType {
    Arn?: string;
    CreatedTime?: string;
    Description?: string;
    Inline?: boolean;
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
}
export interface AWSFraudDetectorEventTypeEventVariable {
    Arn?: string;
    CreatedTime?: string;
    DataSource?: string;
    DataType?: string;
    DefaultValue?: string;
    Description?: string;
    Inline?: boolean;
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
    VariableType?: string;
}
export interface AWSFraudDetectorEventTypeLabel {
    Arn?: string;
    CreatedTime?: string;
    Description?: string;
    Inline?: boolean;
    LastUpdatedTime?: string;
    Name?: string;
    Tags?: Tag[];
}
export interface AWSFraudDetectorLabel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::FraudDetector::Label";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFraudDetectorOutcome {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::FraudDetector::Outcome";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSFraudDetectorVariable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataSource: string;
        DataType: string;
        DefaultValue: string;
        Description?: string;
        Name: string;
        Tags?: Tag[];
        VariableType?: string;
    };
    Type: "AWS::FraudDetector::Variable";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftAlias {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        RoutingStrategy: AWSGameLiftAliasRoutingStrategy;
    };
    Type: "AWS::GameLift::Alias";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftAliasRoutingStrategy {
    FleetId?: string;
    Message?: string;
    Type: string;
}
export interface AWSGameLiftBuild {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Name?: string;
        OperatingSystem?: string;
        StorageLocation?: AWSGameLiftBuildS3Location;
        Version?: string;
    };
    Type: "AWS::GameLift::Build";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftBuildS3Location {
    Bucket: string;
    Key: string;
    ObjectVersion?: string;
    RoleArn: string;
}
export interface AWSGameLiftFleet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        BuildId?: string;
        CertificateConfiguration?: AWSGameLiftFleetCertificateConfiguration;
        Description?: string;
        DesiredEC2Instances?: number;
        EC2InboundPermissions?: AWSGameLiftFleetIpPermission[];
        EC2InstanceType?: string;
        FleetType?: string;
        InstanceRoleARN?: string;
        Locations?: AWSGameLiftFleetLocationConfiguration[];
        MaxSize?: number;
        MetricGroups?: string[];
        MinSize?: number;
        Name?: string;
        NewGameSessionProtectionPolicy?: string;
        PeerVpcAwsAccountId?: string;
        PeerVpcId?: string;
        ResourceCreationLimitPolicy?: AWSGameLiftFleetResourceCreationLimitPolicy;
        RuntimeConfiguration?: AWSGameLiftFleetRuntimeConfiguration;
        ScriptId?: string;
    };
    Type: "AWS::GameLift::Fleet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftFleetCertificateConfiguration {
    CertificateType: string;
}
export interface AWSGameLiftFleetIpPermission {
    FromPort: number;
    IpRange: string;
    Protocol: string;
    ToPort: number;
}
export interface AWSGameLiftFleetLocationConfiguration {
    Location: string;
    LocationCapacity?: AWSGameLiftFleetLocationCapacity;
}
export interface AWSGameLiftFleetLocationCapacity {
    DesiredEC2Instances: number;
    MaxSize: number;
    MinSize: number;
}
export interface AWSGameLiftFleetResourceCreationLimitPolicy {
    NewGameSessionsPerCreator?: number;
    PolicyPeriodInMinutes?: number;
}
export interface AWSGameLiftFleetRuntimeConfiguration {
    GameSessionActivationTimeoutSeconds?: number;
    MaxConcurrentGameSessionActivations?: number;
    ServerProcesses?: AWSGameLiftFleetServerProcess[];
}
export interface AWSGameLiftFleetServerProcess {
    ConcurrentExecutions: number;
    LaunchPath: string;
    Parameters?: string;
}
export interface AWSGameLiftGameServerGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoScalingPolicy?: AWSGameLiftGameServerGroupAutoScalingPolicy;
        BalancingStrategy?: string;
        DeleteOption?: string;
        GameServerGroupName: string;
        GameServerProtectionPolicy?: string;
        InstanceDefinitions: AWSGameLiftGameServerGroupInstanceDefinition[];
        LaunchTemplate: AWSGameLiftGameServerGroupLaunchTemplate;
        MaxSize?: number;
        MinSize?: number;
        RoleArn: string;
        Tags?: Tag[];
        VpcSubnets?: string[];
    };
    Type: "AWS::GameLift::GameServerGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftGameServerGroupAutoScalingPolicy {
    EstimatedInstanceWarmup?: number;
    TargetTrackingConfiguration: AWSGameLiftGameServerGroupTargetTrackingConfiguration;
}
export interface AWSGameLiftGameServerGroupTargetTrackingConfiguration {
    TargetValue: number;
}
export interface AWSGameLiftGameServerGroupInstanceDefinition {
    InstanceType: string;
    WeightedCapacity?: string;
}
export interface AWSGameLiftGameServerGroupLaunchTemplate {
    LaunchTemplateId?: string;
    LaunchTemplateName?: string;
    Version?: string;
}
export interface AWSGameLiftGameSessionQueue {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CustomEventData?: string;
        Destinations?: AWSGameLiftGameSessionQueueDestination[];
        FilterConfiguration?: AWSGameLiftGameSessionQueueFilterConfiguration;
        Name: string;
        NotificationTarget?: string;
        PlayerLatencyPolicies?: AWSGameLiftGameSessionQueuePlayerLatencyPolicy[];
        PriorityConfiguration?: AWSGameLiftGameSessionQueuePriorityConfiguration;
        TimeoutInSeconds?: number;
    };
    Type: "AWS::GameLift::GameSessionQueue";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftGameSessionQueueDestination {
    DestinationArn?: string;
}
export interface AWSGameLiftGameSessionQueueFilterConfiguration {
    AllowedLocations?: string[];
}
export interface AWSGameLiftGameSessionQueuePlayerLatencyPolicy {
    MaximumIndividualPlayerLatencyMilliseconds?: number;
    PolicyDurationSeconds?: number;
}
export interface AWSGameLiftGameSessionQueuePriorityConfiguration {
    LocationOrder?: string[];
    PriorityOrder?: string[];
}
export interface AWSGameLiftMatchmakingConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptanceRequired: boolean;
        AcceptanceTimeoutSeconds?: number;
        AdditionalPlayerCount?: number;
        BackfillMode?: string;
        CustomEventData?: string;
        Description?: string;
        FlexMatchMode?: string;
        GameProperties?: AWSGameLiftMatchmakingConfigurationGameProperty[];
        GameSessionData?: string;
        GameSessionQueueArns?: string[];
        Name: string;
        NotificationTarget?: string;
        RequestTimeoutSeconds: number;
        RuleSetName: string;
    };
    Type: "AWS::GameLift::MatchmakingConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftMatchmakingConfigurationGameProperty {
    Key: string;
    Value: string;
}
export interface AWSGameLiftMatchmakingRuleSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        RuleSetBody: string;
    };
    Type: "AWS::GameLift::MatchmakingRuleSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftScript {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        StorageLocation: AWSGameLiftScriptS3Location;
        Version?: string;
    };
    Type: "AWS::GameLift::Script";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGameLiftScriptS3Location {
    Bucket: string;
    Key: string;
    ObjectVersion?: string;
    RoleArn: string;
}
export interface AWSGlobalAcceleratorAccelerator {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Enabled?: boolean;
        IpAddressType?: string;
        IpAddresses?: string[];
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::GlobalAccelerator::Accelerator";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlobalAcceleratorEndpointGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EndpointConfigurations?: AWSGlobalAcceleratorEndpointGroupEndpointConfiguration[];
        EndpointGroupRegion: string;
        HealthCheckIntervalSeconds?: number;
        HealthCheckPath?: string;
        HealthCheckPort?: number;
        HealthCheckProtocol?: string;
        ListenerArn: string;
        PortOverrides?: AWSGlobalAcceleratorEndpointGroupPortOverride[];
        ThresholdCount?: number;
        TrafficDialPercentage?: number;
    };
    Type: "AWS::GlobalAccelerator::EndpointGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlobalAcceleratorEndpointGroupEndpointConfiguration {
    ClientIPPreservationEnabled?: boolean;
    EndpointId: string;
    Weight?: number;
}
export interface AWSGlobalAcceleratorEndpointGroupPortOverride {
    EndpointPort: number;
    ListenerPort: number;
}
export interface AWSGlobalAcceleratorListener {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceleratorArn: string;
        ClientAffinity?: string;
        PortRanges: AWSGlobalAcceleratorListenerPortRange[];
        Protocol: string;
    };
    Type: "AWS::GlobalAccelerator::Listener";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlobalAcceleratorListenerPortRange {
    FromPort: number;
    ToPort: number;
}
export interface AWSGlueClassifier {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CsvClassifier?: AWSGlueClassifierCsvClassifier;
        GrokClassifier?: AWSGlueClassifierGrokClassifier;
        JsonClassifier?: AWSGlueClassifierJsonClassifier;
        XMLClassifier?: AWSGlueClassifierXMLClassifier;
    };
    Type: "AWS::Glue::Classifier";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueClassifierCsvClassifier {
    AllowSingleColumn?: boolean;
    ContainsHeader?: string;
    Delimiter?: string;
    DisableValueTrimming?: boolean;
    Header?: string[];
    Name?: string;
    QuoteSymbol?: string;
}
export interface AWSGlueClassifierGrokClassifier {
    Classification: string;
    CustomPatterns?: string;
    GrokPattern: string;
    Name?: string;
}
export interface AWSGlueClassifierJsonClassifier {
    JsonPath: string;
    Name?: string;
}
export interface AWSGlueClassifierXMLClassifier {
    Classification: string;
    Name?: string;
    RowTag: string;
}
export interface AWSGlueConnection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CatalogId: string;
        ConnectionInput: AWSGlueConnectionConnectionInput;
    };
    Type: "AWS::Glue::Connection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueConnectionConnectionInput {
    ConnectionProperties?: {
        [k: string]: unknown;
    };
    ConnectionType: string;
    Description?: string;
    MatchCriteria?: string[];
    Name?: string;
    PhysicalConnectionRequirements?: AWSGlueConnectionPhysicalConnectionRequirements;
}
export interface AWSGlueConnectionPhysicalConnectionRequirements {
    AvailabilityZone?: string;
    SecurityGroupIdList?: string[];
    SubnetId?: string;
}
export interface AWSGlueCrawler {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Classifiers?: string[];
        Configuration?: string;
        CrawlerSecurityConfiguration?: string;
        DatabaseName?: string;
        Description?: string;
        Name?: string;
        RecrawlPolicy?: AWSGlueCrawlerRecrawlPolicy;
        Role: string;
        Schedule?: AWSGlueCrawlerSchedule;
        SchemaChangePolicy?: AWSGlueCrawlerSchemaChangePolicy;
        TablePrefix?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Targets: AWSGlueCrawlerTargets;
    };
    Type: "AWS::Glue::Crawler";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueCrawlerRecrawlPolicy {
    RecrawlBehavior?: string;
}
export interface AWSGlueCrawlerSchedule {
    ScheduleExpression?: string;
}
export interface AWSGlueCrawlerSchemaChangePolicy {
    DeleteBehavior?: string;
    UpdateBehavior?: string;
}
export interface AWSGlueCrawlerTargets {
    CatalogTargets?: AWSGlueCrawlerCatalogTarget[];
    DynamoDBTargets?: AWSGlueCrawlerDynamoDBTarget[];
    JdbcTargets?: AWSGlueCrawlerJdbcTarget[];
    S3Targets?: AWSGlueCrawlerS3Target[];
}
export interface AWSGlueCrawlerCatalogTarget {
    DatabaseName?: string;
    Tables?: string[];
}
export interface AWSGlueCrawlerDynamoDBTarget {
    Path?: string;
}
export interface AWSGlueCrawlerJdbcTarget {
    ConnectionName?: string;
    Exclusions?: string[];
    Path?: string;
}
export interface AWSGlueCrawlerS3Target {
    ConnectionName?: string;
    Exclusions?: string[];
    Path?: string;
}
export interface AWSGlueDataCatalogEncryptionSettings {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CatalogId: string;
        DataCatalogEncryptionSettings: AWSGlueDataCatalogEncryptionSettingsDataCatalogEncryptionSettings;
    };
    Type: "AWS::Glue::DataCatalogEncryptionSettings";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueDataCatalogEncryptionSettingsDataCatalogEncryptionSettings {
    ConnectionPasswordEncryption?: AWSGlueDataCatalogEncryptionSettingsConnectionPasswordEncryption;
    EncryptionAtRest?: AWSGlueDataCatalogEncryptionSettingsEncryptionAtRest;
}
export interface AWSGlueDataCatalogEncryptionSettingsConnectionPasswordEncryption {
    KmsKeyId?: string;
    ReturnConnectionPasswordEncrypted?: boolean;
}
export interface AWSGlueDataCatalogEncryptionSettingsEncryptionAtRest {
    CatalogEncryptionMode?: string;
    SseAwsKmsKeyId?: string;
}
export interface AWSGlueDatabase {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CatalogId: string;
        DatabaseInput: AWSGlueDatabaseDatabaseInput;
    };
    Type: "AWS::Glue::Database";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueDatabaseDatabaseInput {
    CreateTableDefaultPermissions?: AWSGlueDatabasePrincipalPrivileges[];
    Description?: string;
    LocationUri?: string;
    Name?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    TargetDatabase?: AWSGlueDatabaseDatabaseIdentifier;
}
export interface AWSGlueDatabasePrincipalPrivileges {
    Permissions?: string[];
    Principal?: AWSGlueDatabaseDataLakePrincipal;
}
export interface AWSGlueDatabaseDataLakePrincipal {
    DataLakePrincipalIdentifier?: string;
}
export interface AWSGlueDatabaseDatabaseIdentifier {
    CatalogId?: string;
    DatabaseName?: string;
}
export interface AWSGlueDevEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Arguments?: {
            [k: string]: unknown;
        };
        EndpointName?: string;
        ExtraJarsS3Path?: string;
        ExtraPythonLibsS3Path?: string;
        GlueVersion?: string;
        NumberOfNodes?: number;
        NumberOfWorkers?: number;
        PublicKey?: string;
        PublicKeys?: string[];
        RoleArn: string;
        SecurityConfiguration?: string;
        SecurityGroupIds?: string[];
        SubnetId?: string;
        Tags?: {
            [k: string]: unknown;
        };
        WorkerType?: string;
    };
    Type: "AWS::Glue::DevEndpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueJob {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllocatedCapacity?: number;
        Command: AWSGlueJobJobCommand;
        Connections?: AWSGlueJobConnectionsList;
        DefaultArguments?: {
            [k: string]: unknown;
        };
        Description?: string;
        ExecutionProperty?: AWSGlueJobExecutionProperty;
        GlueVersion?: string;
        LogUri?: string;
        MaxCapacity?: number;
        MaxRetries?: number;
        Name?: string;
        NotificationProperty?: AWSGlueJobNotificationProperty;
        NumberOfWorkers?: number;
        Role: string;
        SecurityConfiguration?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Timeout?: number;
        WorkerType?: string;
    };
    Type: "AWS::Glue::Job";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueJobJobCommand {
    Name?: string;
    PythonVersion?: string;
    ScriptLocation?: string;
}
export interface AWSGlueJobConnectionsList {
    Connections?: string[];
}
export interface AWSGlueJobExecutionProperty {
    MaxConcurrentRuns?: number;
}
export interface AWSGlueJobNotificationProperty {
    NotifyDelayAfter?: number;
}
export interface AWSGlueMLTransform {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        GlueVersion?: string;
        InputRecordTables: AWSGlueMLTransformInputRecordTables;
        MaxCapacity?: number;
        MaxRetries?: number;
        Name?: string;
        NumberOfWorkers?: number;
        Role: string;
        Tags?: {
            [k: string]: unknown;
        };
        Timeout?: number;
        TransformEncryption?: AWSGlueMLTransformTransformEncryption;
        TransformParameters: AWSGlueMLTransformTransformParameters;
        WorkerType?: string;
    };
    Type: "AWS::Glue::MLTransform";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueMLTransformInputRecordTables {
    GlueTables?: AWSGlueMLTransformGlueTables[];
}
export interface AWSGlueMLTransformGlueTables {
    CatalogId?: string;
    ConnectionName?: string;
    DatabaseName: string;
    TableName: string;
}
export interface AWSGlueMLTransformTransformEncryption {
    MLUserDataEncryption?: AWSGlueMLTransformMLUserDataEncryption;
    TaskRunSecurityConfigurationName?: string;
}
export interface AWSGlueMLTransformMLUserDataEncryption {
    KmsKeyId?: string;
    MLUserDataEncryptionMode: string;
}
export interface AWSGlueMLTransformTransformParameters {
    FindMatchesParameters?: AWSGlueMLTransformFindMatchesParameters;
    TransformType: string;
}
export interface AWSGlueMLTransformFindMatchesParameters {
    AccuracyCostTradeoff?: number;
    EnforceProvidedLabels?: boolean;
    PrecisionRecallTradeoff?: number;
    PrimaryKeyColumnName: string;
}
export interface AWSGluePartition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CatalogId: string;
        DatabaseName: string;
        PartitionInput: AWSGluePartitionPartitionInput;
        TableName: string;
    };
    Type: "AWS::Glue::Partition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGluePartitionPartitionInput {
    Parameters?: {
        [k: string]: unknown;
    };
    StorageDescriptor?: AWSGluePartitionStorageDescriptor;
    Values: string[];
}
export interface AWSGluePartitionStorageDescriptor {
    BucketColumns?: string[];
    Columns?: AWSGluePartitionColumn[];
    Compressed?: boolean;
    InputFormat?: string;
    Location?: string;
    NumberOfBuckets?: number;
    OutputFormat?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    SchemaReference?: AWSGluePartitionSchemaReference;
    SerdeInfo?: AWSGluePartitionSerdeInfo;
    SkewedInfo?: AWSGluePartitionSkewedInfo;
    SortColumns?: AWSGluePartitionOrder[];
    StoredAsSubDirectories?: boolean;
}
export interface AWSGluePartitionColumn {
    Comment?: string;
    Name: string;
    Type?: string;
}
export interface AWSGluePartitionSchemaReference {
    SchemaId?: AWSGluePartitionSchemaId;
    SchemaVersionId?: string;
    SchemaVersionNumber?: number;
}
export interface AWSGluePartitionSchemaId {
    RegistryName?: string;
    SchemaArn?: string;
    SchemaName?: string;
}
export interface AWSGluePartitionSerdeInfo {
    Name?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    SerializationLibrary?: string;
}
export interface AWSGluePartitionSkewedInfo {
    SkewedColumnNames?: string[];
    SkewedColumnValueLocationMaps?: {
        [k: string]: unknown;
    };
    SkewedColumnValues?: string[];
}
export interface AWSGluePartitionOrder {
    Column: string;
    SortOrder?: number;
}
export interface AWSGlueRegistry {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::Glue::Registry";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueSchema {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CheckpointVersion?: AWSGlueSchemaSchemaVersion;
        Compatibility: string;
        DataFormat: string;
        Description?: string;
        Name: string;
        Registry?: AWSGlueSchemaRegistry;
        SchemaDefinition: string;
        Tags?: Tag[];
    };
    Type: "AWS::Glue::Schema";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueSchemaSchemaVersion {
    IsLatest?: boolean;
    VersionNumber?: number;
}
export interface AWSGlueSchemaRegistry {
    Arn?: string;
    Name?: string;
}
export interface AWSGlueSchemaVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Schema: AWSGlueSchemaVersionSchema;
        SchemaDefinition: string;
    };
    Type: "AWS::Glue::SchemaVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueSchemaVersionSchema {
    RegistryName?: string;
    SchemaArn?: string;
    SchemaName?: string;
}
export interface AWSGlueSchemaVersionMetadata {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Key: string;
        SchemaVersionId: string;
        Value: string;
    };
    Type: "AWS::Glue::SchemaVersionMetadata";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueSecurityConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EncryptionConfiguration: AWSGlueSecurityConfigurationEncryptionConfiguration;
        Name: string;
    };
    Type: "AWS::Glue::SecurityConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueSecurityConfigurationEncryptionConfiguration {
    CloudWatchEncryption?: AWSGlueSecurityConfigurationCloudWatchEncryption;
    JobBookmarksEncryption?: AWSGlueSecurityConfigurationJobBookmarksEncryption;
    S3Encryptions?: AWSGlueSecurityConfigurationS3Encryptions;
}
export interface AWSGlueSecurityConfigurationCloudWatchEncryption {
    CloudWatchEncryptionMode?: string;
    KmsKeyArn?: string;
}
export interface AWSGlueSecurityConfigurationJobBookmarksEncryption {
    JobBookmarksEncryptionMode?: string;
    KmsKeyArn?: string;
}
export interface AWSGlueSecurityConfigurationS3Encryptions {}
export interface AWSGlueTable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CatalogId: string;
        DatabaseName: string;
        TableInput: AWSGlueTableTableInput;
    };
    Type: "AWS::Glue::Table";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueTableTableInput {
    Description?: string;
    Name?: string;
    Owner?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    PartitionKeys?: AWSGlueTableColumn[];
    Retention?: number;
    StorageDescriptor?: AWSGlueTableStorageDescriptor;
    TableType?: string;
    TargetTable?: AWSGlueTableTableIdentifier;
    ViewExpandedText?: string;
    ViewOriginalText?: string;
}
export interface AWSGlueTableColumn {
    Comment?: string;
    Name: string;
    Type?: string;
}
export interface AWSGlueTableStorageDescriptor {
    BucketColumns?: string[];
    Columns?: AWSGlueTableColumn[];
    Compressed?: boolean;
    InputFormat?: string;
    Location?: string;
    NumberOfBuckets?: number;
    OutputFormat?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    SchemaReference?: AWSGlueTableSchemaReference;
    SerdeInfo?: AWSGlueTableSerdeInfo;
    SkewedInfo?: AWSGlueTableSkewedInfo;
    SortColumns?: AWSGlueTableOrder[];
    StoredAsSubDirectories?: boolean;
}
export interface AWSGlueTableSchemaReference {
    SchemaId?: AWSGlueTableSchemaId;
    SchemaVersionId?: string;
    SchemaVersionNumber?: number;
}
export interface AWSGlueTableSchemaId {
    RegistryName?: string;
    SchemaArn?: string;
    SchemaName?: string;
}
export interface AWSGlueTableSerdeInfo {
    Name?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    SerializationLibrary?: string;
}
export interface AWSGlueTableSkewedInfo {
    SkewedColumnNames?: string[];
    SkewedColumnValueLocationMaps?: {
        [k: string]: unknown;
    };
    SkewedColumnValues?: string[];
}
export interface AWSGlueTableOrder {
    Column: string;
    SortOrder: number;
}
export interface AWSGlueTableTableIdentifier {
    CatalogId?: string;
    DatabaseName?: string;
    Name?: string;
}
export interface AWSGlueTrigger {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Actions: AWSGlueTriggerAction[];
        Description?: string;
        Name?: string;
        Predicate?: AWSGlueTriggerPredicate;
        Schedule?: string;
        StartOnCreation?: boolean;
        Tags?: {
            [k: string]: unknown;
        };
        Type: string;
        WorkflowName?: string;
    };
    Type: "AWS::Glue::Trigger";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGlueTriggerAction {
    Arguments?: {
        [k: string]: unknown;
    };
    CrawlerName?: string;
    JobName?: string;
    NotificationProperty?: AWSGlueTriggerNotificationProperty;
    SecurityConfiguration?: string;
    Timeout?: number;
}
export interface AWSGlueTriggerNotificationProperty {
    NotifyDelayAfter?: number;
}
export interface AWSGlueTriggerPredicate {
    Conditions?: AWSGlueTriggerCondition[];
    Logical?: string;
}
export interface AWSGlueTriggerCondition {
    CrawlState?: string;
    CrawlerName?: string;
    JobName?: string;
    LogicalOperator?: string;
    State?: string;
}
export interface AWSGlueWorkflow {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        DefaultRunProperties?: {
            [k: string]: unknown;
        };
        Description?: string;
        Name?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Glue::Workflow";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassConnectorDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassConnectorDefinitionConnectorDefinitionVersion;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::ConnectorDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassConnectorDefinitionConnectorDefinitionVersion {
    Connectors: AWSGreengrassConnectorDefinitionConnector[];
}
export interface AWSGreengrassConnectorDefinitionConnector {
    ConnectorArn: string;
    Id: string;
    Parameters?: {
        [k: string]: unknown;
    };
}
export interface AWSGreengrassConnectorDefinitionVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectorDefinitionId: string;
        Connectors: AWSGreengrassConnectorDefinitionVersionConnector[];
    };
    Type: "AWS::Greengrass::ConnectorDefinitionVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassConnectorDefinitionVersionConnector {
    ConnectorArn: string;
    Id: string;
    Parameters?: {
        [k: string]: unknown;
    };
}
export interface AWSGreengrassCoreDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassCoreDefinitionCoreDefinitionVersion;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::CoreDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassCoreDefinitionCoreDefinitionVersion {
    Cores: AWSGreengrassCoreDefinitionCore[];
}
export interface AWSGreengrassCoreDefinitionCore {
    CertificateArn: string;
    Id: string;
    SyncShadow?: boolean;
    ThingArn: string;
}
export interface AWSGreengrassCoreDefinitionVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CoreDefinitionId: string;
        Cores: AWSGreengrassCoreDefinitionVersionCore[];
    };
    Type: "AWS::Greengrass::CoreDefinitionVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassCoreDefinitionVersionCore {
    CertificateArn: string;
    Id: string;
    SyncShadow?: boolean;
    ThingArn: string;
}
export interface AWSGreengrassDeviceDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassDeviceDefinitionDeviceDefinitionVersion;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::DeviceDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassDeviceDefinitionDeviceDefinitionVersion {
    Devices: AWSGreengrassDeviceDefinitionDevice[];
}
export interface AWSGreengrassDeviceDefinitionDevice {
    CertificateArn: string;
    Id: string;
    SyncShadow?: boolean;
    ThingArn: string;
}
export interface AWSGreengrassDeviceDefinitionVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeviceDefinitionId: string;
        Devices: AWSGreengrassDeviceDefinitionVersionDevice[];
    };
    Type: "AWS::Greengrass::DeviceDefinitionVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassDeviceDefinitionVersionDevice {
    CertificateArn: string;
    Id: string;
    SyncShadow?: boolean;
    ThingArn: string;
}
export interface AWSGreengrassFunctionDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassFunctionDefinitionFunctionDefinitionVersion;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::FunctionDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassFunctionDefinitionFunctionDefinitionVersion {
    DefaultConfig?: AWSGreengrassFunctionDefinitionDefaultConfig;
    Functions: AWSGreengrassFunctionDefinitionFunction[];
}
export interface AWSGreengrassFunctionDefinitionDefaultConfig {
    Execution: AWSGreengrassFunctionDefinitionExecution;
}
export interface AWSGreengrassFunctionDefinitionExecution {
    IsolationMode?: string;
    RunAs?: AWSGreengrassFunctionDefinitionRunAs;
}
export interface AWSGreengrassFunctionDefinitionRunAs {
    Gid?: number;
    Uid?: number;
}
export interface AWSGreengrassFunctionDefinitionFunction {
    FunctionArn: string;
    FunctionConfiguration: AWSGreengrassFunctionDefinitionFunctionConfiguration;
    Id: string;
}
export interface AWSGreengrassFunctionDefinitionFunctionConfiguration {
    EncodingType?: string;
    Environment?: AWSGreengrassFunctionDefinitionEnvironment;
    ExecArgs?: string;
    Executable?: string;
    MemorySize?: number;
    Pinned?: boolean;
    Timeout?: number;
}
export interface AWSGreengrassFunctionDefinitionEnvironment {
    AccessSysfs?: boolean;
    Execution?: AWSGreengrassFunctionDefinitionExecution;
    ResourceAccessPolicies?: AWSGreengrassFunctionDefinitionResourceAccessPolicy[];
    Variables?: {
        [k: string]: unknown;
    };
}
export interface AWSGreengrassFunctionDefinitionResourceAccessPolicy {
    Permission?: string;
    ResourceId: string;
}
export interface AWSGreengrassFunctionDefinitionVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DefaultConfig?: AWSGreengrassFunctionDefinitionVersionDefaultConfig;
        FunctionDefinitionId: string;
        Functions: AWSGreengrassFunctionDefinitionVersionFunction[];
    };
    Type: "AWS::Greengrass::FunctionDefinitionVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassFunctionDefinitionVersionDefaultConfig {
    Execution: AWSGreengrassFunctionDefinitionVersionExecution;
}
export interface AWSGreengrassFunctionDefinitionVersionExecution {
    IsolationMode?: string;
    RunAs?: AWSGreengrassFunctionDefinitionVersionRunAs;
}
export interface AWSGreengrassFunctionDefinitionVersionRunAs {
    Gid?: number;
    Uid?: number;
}
export interface AWSGreengrassFunctionDefinitionVersionFunction {
    FunctionArn: string;
    FunctionConfiguration: AWSGreengrassFunctionDefinitionVersionFunctionConfiguration;
    Id: string;
}
export interface AWSGreengrassFunctionDefinitionVersionFunctionConfiguration {
    EncodingType?: string;
    Environment?: AWSGreengrassFunctionDefinitionVersionEnvironment;
    ExecArgs?: string;
    Executable?: string;
    MemorySize?: number;
    Pinned?: boolean;
    Timeout?: number;
}
export interface AWSGreengrassFunctionDefinitionVersionEnvironment {
    AccessSysfs?: boolean;
    Execution?: AWSGreengrassFunctionDefinitionVersionExecution;
    ResourceAccessPolicies?: AWSGreengrassFunctionDefinitionVersionResourceAccessPolicy[];
    Variables?: {
        [k: string]: unknown;
    };
}
export interface AWSGreengrassFunctionDefinitionVersionResourceAccessPolicy {
    Permission?: string;
    ResourceId: string;
}
export interface AWSGreengrassGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassGroupGroupVersion;
        Name: string;
        RoleArn?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::Group";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassGroupGroupVersion {
    ConnectorDefinitionVersionArn?: string;
    CoreDefinitionVersionArn?: string;
    DeviceDefinitionVersionArn?: string;
    FunctionDefinitionVersionArn?: string;
    LoggerDefinitionVersionArn?: string;
    ResourceDefinitionVersionArn?: string;
    SubscriptionDefinitionVersionArn?: string;
}
export interface AWSGreengrassGroupVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectorDefinitionVersionArn?: string;
        CoreDefinitionVersionArn?: string;
        DeviceDefinitionVersionArn?: string;
        FunctionDefinitionVersionArn?: string;
        GroupId: string;
        LoggerDefinitionVersionArn?: string;
        ResourceDefinitionVersionArn?: string;
        SubscriptionDefinitionVersionArn?: string;
    };
    Type: "AWS::Greengrass::GroupVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassLoggerDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassLoggerDefinitionLoggerDefinitionVersion;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::LoggerDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassLoggerDefinitionLoggerDefinitionVersion {
    Loggers: AWSGreengrassLoggerDefinitionLogger[];
}
export interface AWSGreengrassLoggerDefinitionLogger {
    Component: string;
    Id: string;
    Level: string;
    Space?: number;
    Type: string;
}
export interface AWSGreengrassLoggerDefinitionVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        LoggerDefinitionId: string;
        Loggers: AWSGreengrassLoggerDefinitionVersionLogger[];
    };
    Type: "AWS::Greengrass::LoggerDefinitionVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassLoggerDefinitionVersionLogger {
    Component: string;
    Id: string;
    Level: string;
    Space?: number;
    Type: string;
}
export interface AWSGreengrassResourceDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassResourceDefinitionResourceDefinitionVersion;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::ResourceDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassResourceDefinitionResourceDefinitionVersion {
    Resources: AWSGreengrassResourceDefinitionResourceInstance[];
}
export interface AWSGreengrassResourceDefinitionResourceInstance {
    Id: string;
    Name: string;
    ResourceDataContainer: AWSGreengrassResourceDefinitionResourceDataContainer;
}
export interface AWSGreengrassResourceDefinitionResourceDataContainer {
    LocalDeviceResourceData?: AWSGreengrassResourceDefinitionLocalDeviceResourceData;
    LocalVolumeResourceData?: AWSGreengrassResourceDefinitionLocalVolumeResourceData;
    S3MachineLearningModelResourceData?: AWSGreengrassResourceDefinitionS3MachineLearningModelResourceData;
    SageMakerMachineLearningModelResourceData?: AWSGreengrassResourceDefinitionSageMakerMachineLearningModelResourceData;
    SecretsManagerSecretResourceData?: AWSGreengrassResourceDefinitionSecretsManagerSecretResourceData;
}
export interface AWSGreengrassResourceDefinitionLocalDeviceResourceData {
    GroupOwnerSetting?: AWSGreengrassResourceDefinitionGroupOwnerSetting;
    SourcePath: string;
}
export interface AWSGreengrassResourceDefinitionGroupOwnerSetting {
    AutoAddGroupOwner: boolean;
    GroupOwner?: string;
}
export interface AWSGreengrassResourceDefinitionLocalVolumeResourceData {
    DestinationPath: string;
    GroupOwnerSetting?: AWSGreengrassResourceDefinitionGroupOwnerSetting;
    SourcePath: string;
}
export interface AWSGreengrassResourceDefinitionS3MachineLearningModelResourceData {
    DestinationPath: string;
    OwnerSetting?: AWSGreengrassResourceDefinitionResourceDownloadOwnerSetting;
    S3Uri: string;
}
export interface AWSGreengrassResourceDefinitionResourceDownloadOwnerSetting {
    GroupOwner: string;
    GroupPermission: string;
}
export interface AWSGreengrassResourceDefinitionSageMakerMachineLearningModelResourceData {
    DestinationPath: string;
    OwnerSetting?: AWSGreengrassResourceDefinitionResourceDownloadOwnerSetting;
    SageMakerJobArn: string;
}
export interface AWSGreengrassResourceDefinitionSecretsManagerSecretResourceData {
    ARN: string;
    AdditionalStagingLabelsToDownload?: string[];
}
export interface AWSGreengrassResourceDefinitionVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceDefinitionId: string;
        Resources: AWSGreengrassResourceDefinitionVersionResourceInstance[];
    };
    Type: "AWS::Greengrass::ResourceDefinitionVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassResourceDefinitionVersionResourceInstance {
    Id: string;
    Name: string;
    ResourceDataContainer: AWSGreengrassResourceDefinitionVersionResourceDataContainer;
}
export interface AWSGreengrassResourceDefinitionVersionResourceDataContainer {
    LocalDeviceResourceData?: AWSGreengrassResourceDefinitionVersionLocalDeviceResourceData;
    LocalVolumeResourceData?: AWSGreengrassResourceDefinitionVersionLocalVolumeResourceData;
    S3MachineLearningModelResourceData?: AWSGreengrassResourceDefinitionVersionS3MachineLearningModelResourceData;
    SageMakerMachineLearningModelResourceData?: AWSGreengrassResourceDefinitionVersionSageMakerMachineLearningModelResourceData;
    SecretsManagerSecretResourceData?: AWSGreengrassResourceDefinitionVersionSecretsManagerSecretResourceData;
}
export interface AWSGreengrassResourceDefinitionVersionLocalDeviceResourceData {
    GroupOwnerSetting?: AWSGreengrassResourceDefinitionVersionGroupOwnerSetting;
    SourcePath: string;
}
export interface AWSGreengrassResourceDefinitionVersionGroupOwnerSetting {
    AutoAddGroupOwner: boolean;
    GroupOwner?: string;
}
export interface AWSGreengrassResourceDefinitionVersionLocalVolumeResourceData {
    DestinationPath: string;
    GroupOwnerSetting?: AWSGreengrassResourceDefinitionVersionGroupOwnerSetting;
    SourcePath: string;
}
export interface AWSGreengrassResourceDefinitionVersionS3MachineLearningModelResourceData {
    DestinationPath: string;
    OwnerSetting?: AWSGreengrassResourceDefinitionVersionResourceDownloadOwnerSetting;
    S3Uri: string;
}
export interface AWSGreengrassResourceDefinitionVersionResourceDownloadOwnerSetting {
    GroupOwner: string;
    GroupPermission: string;
}
export interface AWSGreengrassResourceDefinitionVersionSageMakerMachineLearningModelResourceData {
    DestinationPath: string;
    OwnerSetting?: AWSGreengrassResourceDefinitionVersionResourceDownloadOwnerSetting;
    SageMakerJobArn: string;
}
export interface AWSGreengrassResourceDefinitionVersionSecretsManagerSecretResourceData {
    ARN: string;
    AdditionalStagingLabelsToDownload?: string[];
}
export interface AWSGreengrassSubscriptionDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InitialVersion?: AWSGreengrassSubscriptionDefinitionSubscriptionDefinitionVersion;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Greengrass::SubscriptionDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassSubscriptionDefinitionSubscriptionDefinitionVersion {
    Subscriptions: AWSGreengrassSubscriptionDefinitionSubscription[];
}
export interface AWSGreengrassSubscriptionDefinitionSubscription {
    Id: string;
    Source: string;
    Subject: string;
    Target: string;
}
export interface AWSGreengrassSubscriptionDefinitionVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        SubscriptionDefinitionId: string;
        Subscriptions: AWSGreengrassSubscriptionDefinitionVersionSubscription[];
    };
    Type: "AWS::Greengrass::SubscriptionDefinitionVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassSubscriptionDefinitionVersionSubscription {
    Id: string;
    Source: string;
    Subject: string;
    Target: string;
}
export interface AWSGreengrassV2ComponentVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        InlineRecipe?: string;
        LambdaFunction?: AWSGreengrassV2ComponentVersionLambdaFunctionRecipeSource;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::GreengrassV2::ComponentVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGreengrassV2ComponentVersionLambdaFunctionRecipeSource {
    ComponentDependencies?: {
        [k: string]: AWSGreengrassV2ComponentVersionComponentDependencyRequirement;
    };
    ComponentLambdaParameters?: AWSGreengrassV2ComponentVersionLambdaExecutionParameters;
    ComponentName?: string;
    ComponentPlatforms?: AWSGreengrassV2ComponentVersionComponentPlatform[];
    ComponentVersion?: string;
    LambdaArn?: string;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSGreengrassV2ComponentVersionComponentDependencyRequirement {
    DependencyType?: string;
    VersionRequirement?: string;
}
export interface AWSGreengrassV2ComponentVersionLambdaExecutionParameters {
    EnvironmentVariables?: {
        [k: string]: unknown;
    };
    EventSources?: AWSGreengrassV2ComponentVersionLambdaEventSource[];
    ExecArgs?: string[];
    InputPayloadEncodingType?: string;
    LinuxProcessParams?: AWSGreengrassV2ComponentVersionLambdaLinuxProcessParams;
    MaxIdleTimeInSeconds?: number;
    MaxInstancesCount?: number;
    MaxQueueSize?: number;
    Pinned?: boolean;
    StatusTimeoutInSeconds?: number;
    TimeoutInSeconds?: number;
}
export interface AWSGreengrassV2ComponentVersionLambdaEventSource {
    Topic?: string;
    Type?: string;
}
export interface AWSGreengrassV2ComponentVersionLambdaLinuxProcessParams {
    ContainerParams?: AWSGreengrassV2ComponentVersionLambdaContainerParams;
    IsolationMode?: string;
}
export interface AWSGreengrassV2ComponentVersionLambdaContainerParams {
    Devices?: AWSGreengrassV2ComponentVersionLambdaDeviceMount[];
    MemorySizeInKB?: number;
    MountROSysfs?: boolean;
    Volumes?: AWSGreengrassV2ComponentVersionLambdaVolumeMount[];
}
export interface AWSGreengrassV2ComponentVersionLambdaDeviceMount {
    AddGroupOwner?: boolean;
    Path?: string;
    Permission?: string;
}
export interface AWSGreengrassV2ComponentVersionLambdaVolumeMount {
    AddGroupOwner?: boolean;
    DestinationPath?: string;
    Permission?: string;
    SourcePath?: string;
}
export interface AWSGreengrassV2ComponentVersionComponentPlatform {
    Attributes?: {
        [k: string]: unknown;
    };
    Name?: string;
}
export interface AWSGroundStationConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConfigData: AWSGroundStationConfigConfigData;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::GroundStation::Config";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGroundStationConfigConfigData {
    AntennaDownlinkConfig?: AWSGroundStationConfigAntennaDownlinkConfig;
    AntennaDownlinkDemodDecodeConfig?: AWSGroundStationConfigAntennaDownlinkDemodDecodeConfig;
    AntennaUplinkConfig?: AWSGroundStationConfigAntennaUplinkConfig;
    DataflowEndpointConfig?: AWSGroundStationConfigDataflowEndpointConfig;
    S3RecordingConfig?: AWSGroundStationConfigS3RecordingConfig;
    TrackingConfig?: AWSGroundStationConfigTrackingConfig;
    UplinkEchoConfig?: AWSGroundStationConfigUplinkEchoConfig;
}
export interface AWSGroundStationConfigAntennaDownlinkConfig {
    SpectrumConfig?: AWSGroundStationConfigSpectrumConfig;
}
export interface AWSGroundStationConfigSpectrumConfig {
    Bandwidth?: AWSGroundStationConfigFrequencyBandwidth;
    CenterFrequency?: AWSGroundStationConfigFrequency;
    Polarization?: string;
}
export interface AWSGroundStationConfigFrequencyBandwidth {
    Units?: string;
    Value?: number;
}
export interface AWSGroundStationConfigFrequency {
    Units?: string;
    Value?: number;
}
export interface AWSGroundStationConfigAntennaDownlinkDemodDecodeConfig {
    DecodeConfig?: AWSGroundStationConfigDecodeConfig;
    DemodulationConfig?: AWSGroundStationConfigDemodulationConfig;
    SpectrumConfig?: AWSGroundStationConfigSpectrumConfig;
}
export interface AWSGroundStationConfigDecodeConfig {
    UnvalidatedJSON?: string;
}
export interface AWSGroundStationConfigDemodulationConfig {
    UnvalidatedJSON?: string;
}
export interface AWSGroundStationConfigAntennaUplinkConfig {
    SpectrumConfig?: AWSGroundStationConfigUplinkSpectrumConfig;
    TargetEirp?: AWSGroundStationConfigEirp;
    TransmitDisabled?: boolean;
}
export interface AWSGroundStationConfigUplinkSpectrumConfig {
    CenterFrequency?: AWSGroundStationConfigFrequency;
    Polarization?: string;
}
export interface AWSGroundStationConfigEirp {
    Units?: string;
    Value?: number;
}
export interface AWSGroundStationConfigDataflowEndpointConfig {
    DataflowEndpointName?: string;
    DataflowEndpointRegion?: string;
}
export interface AWSGroundStationConfigS3RecordingConfig {
    BucketArn?: string;
    Prefix?: string;
    RoleArn?: string;
}
export interface AWSGroundStationConfigTrackingConfig {
    Autotrack?: string;
}
export interface AWSGroundStationConfigUplinkEchoConfig {
    AntennaUplinkConfigArn?: string;
    Enabled?: boolean;
}
export interface AWSGroundStationDataflowEndpointGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EndpointDetails: AWSGroundStationDataflowEndpointGroupEndpointDetails[];
        Tags?: Tag[];
    };
    Type: "AWS::GroundStation::DataflowEndpointGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGroundStationDataflowEndpointGroupEndpointDetails {
    Endpoint?: AWSGroundStationDataflowEndpointGroupDataflowEndpoint;
    SecurityDetails?: AWSGroundStationDataflowEndpointGroupSecurityDetails;
}
export interface AWSGroundStationDataflowEndpointGroupDataflowEndpoint {
    Address?: AWSGroundStationDataflowEndpointGroupSocketAddress;
    Mtu?: number;
    Name?: string;
}
export interface AWSGroundStationDataflowEndpointGroupSocketAddress {
    Name?: string;
    Port?: number;
}
export interface AWSGroundStationDataflowEndpointGroupSecurityDetails {
    RoleArn?: string;
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSGroundStationMissionProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ContactPostPassDurationSeconds?: number;
        ContactPrePassDurationSeconds?: number;
        DataflowEdges: AWSGroundStationMissionProfileDataflowEdge[];
        MinimumViableContactDurationSeconds: number;
        Name: string;
        Tags?: Tag[];
        TrackingConfigArn: string;
    };
    Type: "AWS::GroundStation::MissionProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGroundStationMissionProfileDataflowEdge {
    Destination?: string;
    Source?: string;
}
export interface AWSGuardDutyDetector {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataSources?: AWSGuardDutyDetectorCFNDataSourceConfigurations;
        Enable: boolean;
        FindingPublishingFrequency?: string;
    };
    Type: "AWS::GuardDuty::Detector";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGuardDutyDetectorCFNDataSourceConfigurations {
    S3Logs?: AWSGuardDutyDetectorCFNS3LogsConfiguration;
}
export interface AWSGuardDutyDetectorCFNS3LogsConfiguration {
    Enable?: boolean;
}
export interface AWSGuardDutyFilter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Action: string;
        Description: string;
        DetectorId: string;
        FindingCriteria: AWSGuardDutyFilterFindingCriteria;
        Name: string;
        Rank: number;
    };
    Type: "AWS::GuardDuty::Filter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGuardDutyFilterFindingCriteria {
    Criterion?: {
        [k: string]: unknown;
    };
    ItemType?: AWSGuardDutyFilterCondition;
}
export interface AWSGuardDutyFilterCondition {
    Eq?: string[];
    Gte?: number;
    Lt?: number;
    Lte?: number;
    Neq?: string[];
}
export interface AWSGuardDutyIPSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Activate: boolean;
        DetectorId: string;
        Format: string;
        Location: string;
        Name?: string;
    };
    Type: "AWS::GuardDuty::IPSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGuardDutyMaster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DetectorId: string;
        InvitationId?: string;
        MasterId: string;
    };
    Type: "AWS::GuardDuty::Master";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGuardDutyMember {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DetectorId: string;
        DisableEmailNotification?: boolean;
        Email: string;
        MemberId: string;
        Message?: string;
        Status?: string;
    };
    Type: "AWS::GuardDuty::Member";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSGuardDutyThreatIntelSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Activate: boolean;
        DetectorId: string;
        Format: string;
        Location: string;
        Name?: string;
    };
    Type: "AWS::GuardDuty::ThreatIntelSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSHealthLakeFHIRDatastore {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DatastoreName?: string;
        DatastoreTypeVersion: string;
        PreloadDataConfig?: AWSHealthLakeFHIRDatastorePreloadDataConfig;
        SseConfiguration?: AWSHealthLakeFHIRDatastoreSseConfiguration;
        Tags?: Tag[];
    };
    Type: "AWS::HealthLake::FHIRDatastore";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSHealthLakeFHIRDatastorePreloadDataConfig {
    PreloadDataType: string;
}
export interface AWSHealthLakeFHIRDatastoreSseConfiguration {
    KmsEncryptionConfig: AWSHealthLakeFHIRDatastoreKmsEncryptionConfig;
}
export interface AWSHealthLakeFHIRDatastoreKmsEncryptionConfig {
    CmkType: string;
    KmsKeyId?: string;
}
export interface AWSIAMAccessKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Serial?: number;
        Status?: string;
        UserName: string;
    };
    Type: "AWS::IAM::AccessKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        GroupName?: string;
        ManagedPolicyArns?: string[];
        Path?: string;
        Policies?: AWSIAMGroupPolicy[];
    };
    Type: "AWS::IAM::Group";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMGroupPolicy {
    PolicyDocument: {
        [k: string]: unknown;
    };
    PolicyName: string;
}
export interface AWSIAMInstanceProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InstanceProfileName?: string;
        Path?: string;
        Roles: string[];
    };
    Type: "AWS::IAM::InstanceProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMManagedPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Groups?: string[];
        ManagedPolicyName?: string;
        Path?: string;
        PolicyDocument: {
            [k: string]: unknown;
        };
        Roles?: string[];
        Users?: string[];
    };
    Type: "AWS::IAM::ManagedPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMOIDCProvider {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClientIdList?: string[];
        Tags?: Tag[];
        ThumbprintList: string[];
        Url?: string;
    };
    Type: "AWS::IAM::OIDCProvider";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Groups?: string[];
        PolicyDocument: {
            [k: string]: unknown;
        };
        PolicyName: string;
        Roles?: string[];
        Users?: string[];
    };
    Type: "AWS::IAM::Policy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMRole {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssumeRolePolicyDocument: {
            [k: string]: unknown;
        };
        Description?: string;
        ManagedPolicyArns?: string[];
        MaxSessionDuration?: number;
        Path?: string;
        PermissionsBoundary?: string;
        Policies?: AWSIAMRolePolicy[];
        RoleName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IAM::Role";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMRolePolicy {
    PolicyDocument: {
        [k: string]: unknown;
    };
    PolicyName: string;
}
export interface AWSIAMSAMLProvider {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        SamlMetadataDocument: string;
        Tags?: Tag[];
    };
    Type: "AWS::IAM::SAMLProvider";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMServerCertificate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CertificateBody?: string;
        CertificateChain?: string;
        Path?: string;
        PrivateKey?: string;
        ServerCertificateName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IAM::ServerCertificate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMServiceLinkedRole {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AWSServiceName: string;
        CustomSuffix?: string;
        Description?: string;
    };
    Type: "AWS::IAM::ServiceLinkedRole";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMUser {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Groups?: string[];
        LoginProfile?: AWSIAMUserLoginProfile;
        ManagedPolicyArns?: string[];
        Path?: string;
        PermissionsBoundary?: string;
        Policies?: AWSIAMUserPolicy[];
        Tags?: Tag[];
        UserName?: string;
    };
    Type: "AWS::IAM::User";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMUserLoginProfile {
    Password: string;
    PasswordResetRequired?: boolean;
}
export interface AWSIAMUserPolicy {
    PolicyDocument: {
        [k: string]: unknown;
    };
    PolicyName: string;
}
export interface AWSIAMUserToGroupAddition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GroupName: string;
        Users: string[];
    };
    Type: "AWS::IAM::UserToGroupAddition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIAMVirtualMFADevice {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Path?: string;
        Tags?: Tag[];
        Users: string[];
        VirtualMfaDeviceName?: string;
    };
    Type: "AWS::IAM::VirtualMFADevice";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIVSChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Authorized?: boolean;
        LatencyMode?: string;
        Name?: string;
        RecordingConfigurationArn?: string;
        Tags?: Tag[];
        Type?: string;
    };
    Type: "AWS::IVS::Channel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIVSPlaybackKeyPair {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        PublicKeyMaterial: string;
        Tags?: Tag[];
    };
    Type: "AWS::IVS::PlaybackKeyPair";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIVSRecordingConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DestinationConfiguration: AWSIVSRecordingConfigurationDestinationConfiguration;
        Name?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IVS::RecordingConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIVSRecordingConfigurationDestinationConfiguration {
    S3: AWSIVSRecordingConfigurationS3DestinationConfiguration;
}
export interface AWSIVSRecordingConfigurationS3DestinationConfiguration {
    BucketName: string;
}
export interface AWSIVSStreamKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ChannelArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::IVS::StreamKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderComponent {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ChangeDescription?: string;
        Data?: string;
        Description?: string;
        KmsKeyId?: string;
        Name: string;
        Platform: string;
        SupportedOsVersions?: string[];
        Tags?: {
            [k: string]: unknown;
        };
        Uri?: string;
        Version: string;
    };
    Type: "AWS::ImageBuilder::Component";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderContainerRecipe {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Components: AWSImageBuilderContainerRecipeComponentConfiguration[];
        ContainerType: string;
        Description?: string;
        DockerfileTemplateData?: string;
        DockerfileTemplateUri?: string;
        ImageOsVersionOverride?: string;
        InstanceConfiguration?: AWSImageBuilderContainerRecipeInstanceConfiguration;
        KmsKeyId?: string;
        Name: string;
        ParentImage: string;
        PlatformOverride?: string;
        Tags?: {
            [k: string]: unknown;
        };
        TargetRepository: AWSImageBuilderContainerRecipeTargetContainerRepository;
        Version: string;
        WorkingDirectory?: string;
    };
    Type: "AWS::ImageBuilder::ContainerRecipe";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderContainerRecipeComponentConfiguration {
    ComponentArn?: string;
}
export interface AWSImageBuilderContainerRecipeInstanceConfiguration {
    BlockDeviceMappings?: AWSImageBuilderContainerRecipeInstanceBlockDeviceMapping[];
    Image?: string;
}
export interface AWSImageBuilderContainerRecipeInstanceBlockDeviceMapping {
    DeviceName?: string;
    Ebs?: AWSImageBuilderContainerRecipeEbsInstanceBlockDeviceSpecification;
    NoDevice?: string;
    VirtualName?: string;
}
export interface AWSImageBuilderContainerRecipeEbsInstanceBlockDeviceSpecification {
    DeleteOnTermination?: boolean;
    Encrypted?: boolean;
    Iops?: number;
    KmsKeyId?: string;
    SnapshotId?: string;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSImageBuilderContainerRecipeTargetContainerRepository {
    RepositoryName?: string;
    Service?: string;
}
export interface AWSImageBuilderDistributionConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Distributions: AWSImageBuilderDistributionConfigurationDistribution[];
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ImageBuilder::DistributionConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderDistributionConfigurationDistribution {
    AmiDistributionConfiguration?: {
        [k: string]: unknown;
    };
    ContainerDistributionConfiguration?: {
        [k: string]: unknown;
    };
    LaunchTemplateConfigurations?: AWSImageBuilderDistributionConfigurationLaunchTemplateConfiguration[];
    LicenseConfigurationArns?: string[];
    Region: string;
}
export interface AWSImageBuilderDistributionConfigurationLaunchTemplateConfiguration {
    AccountId?: string;
    LaunchTemplateId?: string;
    SetDefaultVersion?: boolean;
}
export interface AWSImageBuilderImage {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ContainerRecipeArn?: string;
        DistributionConfigurationArn?: string;
        EnhancedImageMetadataEnabled?: boolean;
        ImageRecipeArn?: string;
        ImageTestsConfiguration?: AWSImageBuilderImageImageTestsConfiguration;
        InfrastructureConfigurationArn: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ImageBuilder::Image";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderImageImageTestsConfiguration {
    ImageTestsEnabled?: boolean;
    TimeoutMinutes?: number;
}
export interface AWSImageBuilderImagePipeline {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ContainerRecipeArn?: string;
        Description?: string;
        DistributionConfigurationArn?: string;
        EnhancedImageMetadataEnabled?: boolean;
        ImageRecipeArn?: string;
        ImageTestsConfiguration?: AWSImageBuilderImagePipelineImageTestsConfiguration;
        InfrastructureConfigurationArn: string;
        Name: string;
        Schedule?: AWSImageBuilderImagePipelineSchedule;
        Status?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ImageBuilder::ImagePipeline";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderImagePipelineImageTestsConfiguration {
    ImageTestsEnabled?: boolean;
    TimeoutMinutes?: number;
}
export interface AWSImageBuilderImagePipelineSchedule {
    PipelineExecutionStartCondition?: string;
    ScheduleExpression?: string;
}
export interface AWSImageBuilderImageRecipe {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdditionalInstanceConfiguration?: AWSImageBuilderImageRecipeAdditionalInstanceConfiguration;
        BlockDeviceMappings?: AWSImageBuilderImageRecipeInstanceBlockDeviceMapping[];
        Components: AWSImageBuilderImageRecipeComponentConfiguration[];
        Description?: string;
        Name: string;
        ParentImage: string;
        Tags?: {
            [k: string]: unknown;
        };
        Version: string;
        WorkingDirectory?: string;
    };
    Type: "AWS::ImageBuilder::ImageRecipe";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderImageRecipeAdditionalInstanceConfiguration {
    SystemsManagerAgent?: AWSImageBuilderImageRecipeSystemsManagerAgent;
    UserDataOverride?: string;
}
export interface AWSImageBuilderImageRecipeSystemsManagerAgent {
    UninstallAfterBuild?: boolean;
}
export interface AWSImageBuilderImageRecipeInstanceBlockDeviceMapping {
    DeviceName?: string;
    Ebs?: AWSImageBuilderImageRecipeEbsInstanceBlockDeviceSpecification;
    NoDevice?: string;
    VirtualName?: string;
}
export interface AWSImageBuilderImageRecipeEbsInstanceBlockDeviceSpecification {
    DeleteOnTermination?: boolean;
    Encrypted?: boolean;
    Iops?: number;
    KmsKeyId?: string;
    SnapshotId?: string;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSImageBuilderImageRecipeComponentConfiguration {
    ComponentArn?: string;
    Parameters?: AWSImageBuilderImageRecipeComponentParameter[];
}
export interface AWSImageBuilderImageRecipeComponentParameter {
    Name: string;
    Value: string[];
}
export interface AWSImageBuilderInfrastructureConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        InstanceProfileName: string;
        InstanceTypes?: string[];
        KeyPair?: string;
        Logging?: AWSImageBuilderInfrastructureConfigurationLogging;
        Name: string;
        ResourceTags?: {
            [k: string]: unknown;
        };
        SecurityGroupIds?: string[];
        SnsTopicArn?: string;
        SubnetId?: string;
        Tags?: {
            [k: string]: unknown;
        };
        TerminateInstanceOnFailure?: boolean;
    };
    Type: "AWS::ImageBuilder::InfrastructureConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSImageBuilderInfrastructureConfigurationLogging {
    S3Logs?: AWSImageBuilderInfrastructureConfigurationS3Logs;
}
export interface AWSImageBuilderInfrastructureConfigurationS3Logs {
    S3BucketName?: string;
    S3KeyPrefix?: string;
}
export interface AWSInspectorAssessmentTarget {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AssessmentTargetName?: string;
        ResourceGroupArn?: string;
    };
    Type: "AWS::Inspector::AssessmentTarget";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSInspectorAssessmentTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssessmentTargetArn: string;
        AssessmentTemplateName?: string;
        DurationInSeconds: number;
        RulesPackageArns: string[];
        UserAttributesForFindings?: Tag[];
    };
    Type: "AWS::Inspector::AssessmentTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSInspectorResourceGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceGroupTags: Tag[];
    };
    Type: "AWS::Inspector::ResourceGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoT1ClickDevice {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeviceId: string;
        Enabled: boolean;
    };
    Type: "AWS::IoT1Click::Device";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoT1ClickPlacement {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssociatedDevices?: {
            [k: string]: unknown;
        };
        Attributes?: {
            [k: string]: unknown;
        };
        PlacementName?: string;
        ProjectName: string;
    };
    Type: "AWS::IoT1Click::Placement";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoT1ClickProject {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        PlacementTemplate: AWSIoT1ClickProjectPlacementTemplate;
        ProjectName?: string;
    };
    Type: "AWS::IoT1Click::Project";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoT1ClickProjectPlacementTemplate {
    DefaultAttributes?: {
        [k: string]: unknown;
    };
    DeviceTemplates?: {
        [k: string]: unknown;
    };
}
export interface AWSIoTAccountAuditConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccountId: string;
        AuditCheckConfigurations: AWSIoTAccountAuditConfigurationAuditCheckConfigurations;
        AuditNotificationTargetConfigurations?: AWSIoTAccountAuditConfigurationAuditNotificationTargetConfigurations;
        RoleArn: string;
    };
    Type: "AWS::IoT::AccountAuditConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTAccountAuditConfigurationAuditCheckConfigurations {
    AuthenticatedCognitoRoleOverlyPermissiveCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    CaCertificateExpiringCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    CaCertificateKeyQualityCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    ConflictingClientIdsCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    DeviceCertificateExpiringCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    DeviceCertificateKeyQualityCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    DeviceCertificateSharedCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    IotPolicyOverlyPermissiveCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    IotRoleAliasAllowsAccessToUnusedServicesCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    IotRoleAliasOverlyPermissiveCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    LoggingDisabledCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    RevokedCaCertificateStillActiveCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    RevokedDeviceCertificateStillActiveCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
    UnauthenticatedCognitoRoleOverlyPermissiveCheck?: AWSIoTAccountAuditConfigurationAuditCheckConfiguration;
}
export interface AWSIoTAccountAuditConfigurationAuditCheckConfiguration {
    Enabled?: boolean;
}
export interface AWSIoTAccountAuditConfigurationAuditNotificationTargetConfigurations {
    Sns?: AWSIoTAccountAuditConfigurationAuditNotificationTarget;
}
export interface AWSIoTAccountAuditConfigurationAuditNotificationTarget {
    Enabled?: boolean;
    RoleArn?: string;
    TargetArn?: string;
}
export interface AWSIoTAuthorizer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthorizerFunctionArn: string;
        AuthorizerName?: string;
        SigningDisabled?: boolean;
        Status?: string;
        Tags?: Tag[];
        TokenKeyName?: string;
        TokenSigningPublicKeys?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::IoT::Authorizer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTCertificate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CACertificatePem?: string;
        CertificateMode?: string;
        CertificatePem?: string;
        CertificateSigningRequest?: string;
        Status: string;
    };
    Type: "AWS::IoT::Certificate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTCustomMetric {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DisplayName?: string;
        MetricName?: string;
        MetricType: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoT::CustomMetric";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTDimension {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        StringValues: string[];
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::IoT::Dimension";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTDomainConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AuthorizerConfig?: AWSIoTDomainConfigurationAuthorizerConfig;
        DomainConfigurationName?: string;
        DomainConfigurationStatus?: string;
        DomainName?: string;
        ServerCertificateArns?: string[];
        ServiceType?: string;
        Tags?: Tag[];
        ValidationCertificateArn?: string;
    };
    Type: "AWS::IoT::DomainConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTDomainConfigurationAuthorizerConfig {
    AllowAuthorizerOverride?: boolean;
    DefaultAuthorizerName?: string;
}
export interface AWSIoTFleetMetric {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AggregationField?: string;
        AggregationType?: AWSIoTFleetMetricAggregationType;
        Description?: string;
        IndexName?: string;
        MetricName: string;
        Period?: number;
        QueryString?: string;
        QueryVersion?: string;
        Tags?: Tag[];
        Unit?: string;
    };
    Type: "AWS::IoT::FleetMetric";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTFleetMetricAggregationType {
    Name: string;
    Values: string[];
}
export interface AWSIoTMitigationAction {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ActionName?: string;
        ActionParams: AWSIoTMitigationActionActionParams;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoT::MitigationAction";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTMitigationActionActionParams {
    AddThingsToThingGroupParams?: AWSIoTMitigationActionAddThingsToThingGroupParams;
    EnableIoTLoggingParams?: AWSIoTMitigationActionEnableIoTLoggingParams;
    PublishFindingToSnsParams?: AWSIoTMitigationActionPublishFindingToSnsParams;
    ReplaceDefaultPolicyVersionParams?: AWSIoTMitigationActionReplaceDefaultPolicyVersionParams;
    UpdateCACertificateParams?: AWSIoTMitigationActionUpdateCACertificateParams;
    UpdateDeviceCertificateParams?: AWSIoTMitigationActionUpdateDeviceCertificateParams;
}
export interface AWSIoTMitigationActionAddThingsToThingGroupParams {
    OverrideDynamicGroups?: boolean;
    ThingGroupNames: string[];
}
export interface AWSIoTMitigationActionEnableIoTLoggingParams {
    LogLevel: string;
    RoleArnForLogging: string;
}
export interface AWSIoTMitigationActionPublishFindingToSnsParams {
    TopicArn: string;
}
export interface AWSIoTMitigationActionReplaceDefaultPolicyVersionParams {
    TemplateName: string;
}
export interface AWSIoTMitigationActionUpdateCACertificateParams {
    Action: string;
}
export interface AWSIoTMitigationActionUpdateDeviceCertificateParams {
    Action: string;
}
export interface AWSIoTPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyDocument: {
            [k: string]: unknown;
        };
        PolicyName?: string;
    };
    Type: "AWS::IoT::Policy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTPolicyPrincipalAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyName: string;
        Principal: string;
    };
    Type: "AWS::IoT::PolicyPrincipalAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTProvisioningTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Enabled?: boolean;
        PreProvisioningHook?: AWSIoTProvisioningTemplateProvisioningHook;
        ProvisioningRoleArn: string;
        Tags?: Tag[];
        TemplateBody: string;
        TemplateName?: string;
    };
    Type: "AWS::IoT::ProvisioningTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTProvisioningTemplateProvisioningHook {
    PayloadVersion?: string;
    TargetArn?: string;
}
export interface AWSIoTScheduledAudit {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DayOfMonth?: string;
        DayOfWeek?: string;
        Frequency: string;
        ScheduledAuditName?: string;
        Tags?: Tag[];
        TargetCheckNames: string[];
    };
    Type: "AWS::IoT::ScheduledAudit";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSecurityProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AdditionalMetricsToRetainV2?: AWSIoTSecurityProfileMetricToRetain[];
        AlertTargets?: {
            [k: string]: AWSIoTSecurityProfileAlertTarget;
        };
        Behaviors?: AWSIoTSecurityProfileBehavior[];
        SecurityProfileDescription?: string;
        SecurityProfileName?: string;
        Tags?: Tag[];
        TargetArns?: string[];
    };
    Type: "AWS::IoT::SecurityProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSecurityProfileMetricToRetain {
    Metric: string;
    MetricDimension?: AWSIoTSecurityProfileMetricDimension;
}
export interface AWSIoTSecurityProfileMetricDimension {
    DimensionName: string;
    Operator?: string;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSIoTSecurityProfileAlertTarget {
    AlertTargetArn: string;
    RoleArn: string;
}
export interface AWSIoTSecurityProfileBehavior {
    Criteria?: AWSIoTSecurityProfileBehaviorCriteria;
    Metric?: string;
    MetricDimension?: AWSIoTSecurityProfileMetricDimension;
    Name: string;
    SuppressAlerts?: boolean;
}
export interface AWSIoTSecurityProfileBehaviorCriteria {
    ComparisonOperator?: string;
    ConsecutiveDatapointsToAlarm?: number;
    ConsecutiveDatapointsToClear?: number;
    DurationSeconds?: number;
    MlDetectionConfig?: AWSIoTSecurityProfileMachineLearningDetectionConfig;
    StatisticalThreshold?: AWSIoTSecurityProfileStatisticalThreshold;
    Value?: AWSIoTSecurityProfileMetricValue;
}
export interface AWSIoTSecurityProfileMachineLearningDetectionConfig {
    ConfidenceLevel?: string;
}
export interface AWSIoTSecurityProfileStatisticalThreshold {
    Statistic?: string;
}
export interface AWSIoTSecurityProfileMetricValue {
    Cidrs?: string[];
    Count?: string;
    Number?: number;
    Numbers?: number[];
    Ports?: number[];
    Strings?: string[];
}
export interface AWSIoTThing {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AttributePayload?: AWSIoTThingAttributePayload;
        ThingName?: string;
    };
    Type: "AWS::IoT::Thing";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTThingAttributePayload {
    Attributes?: {
        [k: string]: unknown;
    };
}
export interface AWSIoTThingPrincipalAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Principal: string;
        ThingName: string;
    };
    Type: "AWS::IoT::ThingPrincipalAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTTopicRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        RuleName?: string;
        Tags?: Tag[];
        TopicRulePayload: AWSIoTTopicRuleTopicRulePayload;
    };
    Type: "AWS::IoT::TopicRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTTopicRuleTopicRulePayload {
    Actions: AWSIoTTopicRuleAction[];
    AwsIotSqlVersion?: string;
    Description?: string;
    ErrorAction?: AWSIoTTopicRuleAction;
    RuleDisabled?: boolean;
    Sql: string;
}
export interface AWSIoTTopicRuleAction {
    CloudwatchAlarm?: AWSIoTTopicRuleCloudwatchAlarmAction;
    CloudwatchLogs?: AWSIoTTopicRuleCloudwatchLogsAction;
    CloudwatchMetric?: AWSIoTTopicRuleCloudwatchMetricAction;
    DynamoDB?: AWSIoTTopicRuleDynamoDBAction;
    DynamoDBv2?: AWSIoTTopicRuleDynamoDBv2Action;
    Elasticsearch?: AWSIoTTopicRuleElasticsearchAction;
    Firehose?: AWSIoTTopicRuleFirehoseAction;
    Http?: AWSIoTTopicRuleHttpAction;
    IotAnalytics?: AWSIoTTopicRuleIotAnalyticsAction;
    IotEvents?: AWSIoTTopicRuleIotEventsAction;
    IotSiteWise?: AWSIoTTopicRuleIotSiteWiseAction;
    Kafka?: AWSIoTTopicRuleKafkaAction;
    Kinesis?: AWSIoTTopicRuleKinesisAction;
    Lambda?: AWSIoTTopicRuleLambdaAction;
    OpenSearch?: AWSIoTTopicRuleOpenSearchAction;
    Republish?: AWSIoTTopicRuleRepublishAction;
    S3?: AWSIoTTopicRuleS3Action;
    Sns?: AWSIoTTopicRuleSnsAction;
    Sqs?: AWSIoTTopicRuleSqsAction;
    StepFunctions?: AWSIoTTopicRuleStepFunctionsAction;
    Timestream?: AWSIoTTopicRuleTimestreamAction;
}
export interface AWSIoTTopicRuleCloudwatchAlarmAction {
    AlarmName: string;
    RoleArn: string;
    StateReason: string;
    StateValue: string;
}
export interface AWSIoTTopicRuleCloudwatchLogsAction {
    LogGroupName: string;
    RoleArn: string;
}
export interface AWSIoTTopicRuleCloudwatchMetricAction {
    MetricName: string;
    MetricNamespace: string;
    MetricTimestamp?: string;
    MetricUnit: string;
    MetricValue: string;
    RoleArn: string;
}
export interface AWSIoTTopicRuleDynamoDBAction {
    HashKeyField: string;
    HashKeyType?: string;
    HashKeyValue: string;
    PayloadField?: string;
    RangeKeyField?: string;
    RangeKeyType?: string;
    RangeKeyValue?: string;
    RoleArn: string;
    TableName: string;
}
export interface AWSIoTTopicRuleDynamoDBv2Action {
    PutItem?: AWSIoTTopicRulePutItemInput;
    RoleArn?: string;
}
export interface AWSIoTTopicRulePutItemInput {
    TableName: string;
}
export interface AWSIoTTopicRuleElasticsearchAction {
    Endpoint: string;
    Id: string;
    Index: string;
    RoleArn: string;
    Type: string;
}
export interface AWSIoTTopicRuleFirehoseAction {
    BatchMode?: boolean;
    DeliveryStreamName: string;
    RoleArn: string;
    Separator?: string;
}
export interface AWSIoTTopicRuleHttpAction {
    Auth?: AWSIoTTopicRuleHttpAuthorization;
    ConfirmationUrl?: string;
    Headers?: AWSIoTTopicRuleHttpActionHeader[];
    Url: string;
}
export interface AWSIoTTopicRuleHttpAuthorization {
    Sigv4?: AWSIoTTopicRuleSigV4Authorization;
}
export interface AWSIoTTopicRuleSigV4Authorization {
    RoleArn: string;
    ServiceName: string;
    SigningRegion: string;
}
export interface AWSIoTTopicRuleHttpActionHeader {
    Key: string;
    Value: string;
}
export interface AWSIoTTopicRuleIotAnalyticsAction {
    BatchMode?: boolean;
    ChannelName: string;
    RoleArn: string;
}
export interface AWSIoTTopicRuleIotEventsAction {
    BatchMode?: boolean;
    InputName: string;
    MessageId?: string;
    RoleArn: string;
}
export interface AWSIoTTopicRuleIotSiteWiseAction {
    PutAssetPropertyValueEntries: AWSIoTTopicRulePutAssetPropertyValueEntry[];
    RoleArn: string;
}
export interface AWSIoTTopicRulePutAssetPropertyValueEntry {
    AssetId?: string;
    EntryId?: string;
    PropertyAlias?: string;
    PropertyId?: string;
    PropertyValues: AWSIoTTopicRuleAssetPropertyValue[];
}
export interface AWSIoTTopicRuleAssetPropertyValue {
    Quality?: string;
    Timestamp: AWSIoTTopicRuleAssetPropertyTimestamp;
    Value: AWSIoTTopicRuleAssetPropertyVariant;
}
export interface AWSIoTTopicRuleAssetPropertyTimestamp {
    OffsetInNanos?: string;
    TimeInSeconds: string;
}
export interface AWSIoTTopicRuleAssetPropertyVariant {
    BooleanValue?: string;
    DoubleValue?: string;
    IntegerValue?: string;
    StringValue?: string;
}
export interface AWSIoTTopicRuleKafkaAction {
    ClientProperties: {
        [k: string]: unknown;
    };
    DestinationArn: string;
    Key?: string;
    Partition?: string;
    Topic: string;
}
export interface AWSIoTTopicRuleKinesisAction {
    PartitionKey?: string;
    RoleArn: string;
    StreamName: string;
}
export interface AWSIoTTopicRuleLambdaAction {
    FunctionArn?: string;
}
export interface AWSIoTTopicRuleOpenSearchAction {
    Endpoint: string;
    Id: string;
    Index: string;
    RoleArn: string;
    Type: string;
}
export interface AWSIoTTopicRuleRepublishAction {
    Qos?: number;
    RoleArn: string;
    Topic: string;
}
export interface AWSIoTTopicRuleS3Action {
    BucketName: string;
    CannedAcl?: string;
    Key: string;
    RoleArn: string;
}
export interface AWSIoTTopicRuleSnsAction {
    MessageFormat?: string;
    RoleArn: string;
    TargetArn: string;
}
export interface AWSIoTTopicRuleSqsAction {
    QueueUrl: string;
    RoleArn: string;
    UseBase64?: boolean;
}
export interface AWSIoTTopicRuleStepFunctionsAction {
    ExecutionNamePrefix?: string;
    RoleArn: string;
    StateMachineName: string;
}
export interface AWSIoTTopicRuleTimestreamAction {
    BatchMode?: boolean;
    DatabaseName: string;
    Dimensions: AWSIoTTopicRuleTimestreamDimension[];
    RoleArn: string;
    TableName: string;
    Timestamp?: AWSIoTTopicRuleTimestreamTimestamp;
}
export interface AWSIoTTopicRuleTimestreamDimension {
    Name: string;
    Value: string;
}
export interface AWSIoTTopicRuleTimestreamTimestamp {
    Unit: string;
    Value: string;
}
export interface AWSIoTTopicRuleDestination {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        HttpUrlProperties?: AWSIoTTopicRuleDestinationHttpUrlDestinationSummary;
        Status?: string;
        VpcProperties?: AWSIoTTopicRuleDestinationVpcDestinationProperties;
    };
    Type: "AWS::IoT::TopicRuleDestination";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTTopicRuleDestinationHttpUrlDestinationSummary {
    ConfirmationUrl?: string;
}
export interface AWSIoTTopicRuleDestinationVpcDestinationProperties {
    RoleArn?: string;
    SecurityGroups?: string[];
    SubnetIds?: string[];
    VpcId?: string;
}
export interface AWSIoTAnalyticsChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ChannelName?: string;
        ChannelStorage?: AWSIoTAnalyticsChannelChannelStorage;
        RetentionPeriod?: AWSIoTAnalyticsChannelRetentionPeriod;
        Tags?: Tag[];
    };
    Type: "AWS::IoTAnalytics::Channel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTAnalyticsChannelChannelStorage {
    CustomerManagedS3?: AWSIoTAnalyticsChannelCustomerManagedS3;
    ServiceManagedS3?: AWSIoTAnalyticsChannelServiceManagedS3;
}
export interface AWSIoTAnalyticsChannelCustomerManagedS3 {
    Bucket: string;
    KeyPrefix?: string;
    RoleArn: string;
}
export interface AWSIoTAnalyticsChannelServiceManagedS3 {}
export interface AWSIoTAnalyticsChannelRetentionPeriod {
    NumberOfDays?: number;
    Unlimited?: boolean;
}
export interface AWSIoTAnalyticsDataset {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Actions: AWSIoTAnalyticsDatasetAction[];
        ContentDeliveryRules?: AWSIoTAnalyticsDatasetDatasetContentDeliveryRule[];
        DatasetName?: string;
        LateDataRules?: AWSIoTAnalyticsDatasetLateDataRule[];
        RetentionPeriod?: AWSIoTAnalyticsDatasetRetentionPeriod;
        Tags?: Tag[];
        Triggers?: AWSIoTAnalyticsDatasetTrigger[];
        VersioningConfiguration?: AWSIoTAnalyticsDatasetVersioningConfiguration;
    };
    Type: "AWS::IoTAnalytics::Dataset";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTAnalyticsDatasetAction {
    ActionName: string;
    ContainerAction?: AWSIoTAnalyticsDatasetContainerAction;
    QueryAction?: AWSIoTAnalyticsDatasetQueryAction;
}
export interface AWSIoTAnalyticsDatasetContainerAction {
    ExecutionRoleArn: string;
    Image: string;
    ResourceConfiguration: AWSIoTAnalyticsDatasetResourceConfiguration;
    Variables?: AWSIoTAnalyticsDatasetVariable[];
}
export interface AWSIoTAnalyticsDatasetResourceConfiguration {
    ComputeType: string;
    VolumeSizeInGB: number;
}
export interface AWSIoTAnalyticsDatasetVariable {
    DatasetContentVersionValue?: AWSIoTAnalyticsDatasetDatasetContentVersionValue;
    DoubleValue?: number;
    OutputFileUriValue?: AWSIoTAnalyticsDatasetOutputFileUriValue;
    StringValue?: string;
    VariableName: string;
}
export interface AWSIoTAnalyticsDatasetDatasetContentVersionValue {
    DatasetName?: string;
}
export interface AWSIoTAnalyticsDatasetOutputFileUriValue {
    FileName?: string;
}
export interface AWSIoTAnalyticsDatasetQueryAction {
    Filters?: AWSIoTAnalyticsDatasetFilter[];
    SqlQuery: string;
}
export interface AWSIoTAnalyticsDatasetFilter {
    DeltaTime?: AWSIoTAnalyticsDatasetDeltaTime;
}
export interface AWSIoTAnalyticsDatasetDeltaTime {
    OffsetSeconds: number;
    TimeExpression: string;
}
export interface AWSIoTAnalyticsDatasetDatasetContentDeliveryRule {
    Destination: AWSIoTAnalyticsDatasetDatasetContentDeliveryRuleDestination;
    EntryName?: string;
}
export interface AWSIoTAnalyticsDatasetDatasetContentDeliveryRuleDestination {
    IotEventsDestinationConfiguration?: AWSIoTAnalyticsDatasetIotEventsDestinationConfiguration;
    S3DestinationConfiguration?: AWSIoTAnalyticsDatasetS3DestinationConfiguration;
}
export interface AWSIoTAnalyticsDatasetIotEventsDestinationConfiguration {
    InputName: string;
    RoleArn: string;
}
export interface AWSIoTAnalyticsDatasetS3DestinationConfiguration {
    Bucket: string;
    GlueConfiguration?: AWSIoTAnalyticsDatasetGlueConfiguration;
    Key: string;
    RoleArn: string;
}
export interface AWSIoTAnalyticsDatasetGlueConfiguration {
    DatabaseName: string;
    TableName: string;
}
export interface AWSIoTAnalyticsDatasetLateDataRule {
    RuleConfiguration: AWSIoTAnalyticsDatasetLateDataRuleConfiguration;
    RuleName?: string;
}
export interface AWSIoTAnalyticsDatasetLateDataRuleConfiguration {
    DeltaTimeSessionWindowConfiguration?: AWSIoTAnalyticsDatasetDeltaTimeSessionWindowConfiguration;
}
export interface AWSIoTAnalyticsDatasetDeltaTimeSessionWindowConfiguration {
    TimeoutInMinutes: number;
}
export interface AWSIoTAnalyticsDatasetRetentionPeriod {
    NumberOfDays: number;
    Unlimited: boolean;
}
export interface AWSIoTAnalyticsDatasetTrigger {
    Schedule?: AWSIoTAnalyticsDatasetSchedule;
    TriggeringDataset?: AWSIoTAnalyticsDatasetTriggeringDataset;
}
export interface AWSIoTAnalyticsDatasetSchedule {
    ScheduleExpression: string;
}
export interface AWSIoTAnalyticsDatasetTriggeringDataset {
    DatasetName: string;
}
export interface AWSIoTAnalyticsDatasetVersioningConfiguration {
    MaxVersions?: number;
    Unlimited?: boolean;
}
export interface AWSIoTAnalyticsDatastore {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        DatastoreName?: string;
        DatastorePartitions?: AWSIoTAnalyticsDatastoreDatastorePartitions;
        DatastoreStorage?: AWSIoTAnalyticsDatastoreDatastoreStorage;
        FileFormatConfiguration?: AWSIoTAnalyticsDatastoreFileFormatConfiguration;
        RetentionPeriod?: AWSIoTAnalyticsDatastoreRetentionPeriod;
        Tags?: Tag[];
    };
    Type: "AWS::IoTAnalytics::Datastore";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTAnalyticsDatastoreDatastorePartitions {
    Partitions?: AWSIoTAnalyticsDatastoreDatastorePartition[];
}
export interface AWSIoTAnalyticsDatastoreDatastorePartition {
    Partition?: AWSIoTAnalyticsDatastorePartition;
    TimestampPartition?: AWSIoTAnalyticsDatastoreTimestampPartition;
}
export interface AWSIoTAnalyticsDatastorePartition {
    AttributeName: string;
}
export interface AWSIoTAnalyticsDatastoreTimestampPartition {
    AttributeName: string;
    TimestampFormat?: string;
}
export interface AWSIoTAnalyticsDatastoreDatastoreStorage {
    CustomerManagedS3?: AWSIoTAnalyticsDatastoreCustomerManagedS3;
    IotSiteWiseMultiLayerStorage?: AWSIoTAnalyticsDatastoreIotSiteWiseMultiLayerStorage;
    ServiceManagedS3?: AWSIoTAnalyticsDatastoreServiceManagedS3;
}
export interface AWSIoTAnalyticsDatastoreCustomerManagedS3 {
    Bucket: string;
    KeyPrefix?: string;
    RoleArn: string;
}
export interface AWSIoTAnalyticsDatastoreIotSiteWiseMultiLayerStorage {
    CustomerManagedS3Storage: AWSIoTAnalyticsDatastoreCustomerManagedS3Storage;
}
export interface AWSIoTAnalyticsDatastoreCustomerManagedS3Storage {
    Bucket: string;
    KeyPrefix?: string;
}
export interface AWSIoTAnalyticsDatastoreServiceManagedS3 {}
export interface AWSIoTAnalyticsDatastoreFileFormatConfiguration {
    JsonConfiguration?: AWSIoTAnalyticsDatastoreJsonConfiguration;
    ParquetConfiguration?: AWSIoTAnalyticsDatastoreParquetConfiguration;
}
export interface AWSIoTAnalyticsDatastoreJsonConfiguration {}
export interface AWSIoTAnalyticsDatastoreParquetConfiguration {
    SchemaDefinition?: AWSIoTAnalyticsDatastoreSchemaDefinition;
}
export interface AWSIoTAnalyticsDatastoreSchemaDefinition {
    Columns?: AWSIoTAnalyticsDatastoreColumn[];
}
export interface AWSIoTAnalyticsDatastoreColumn {
    Name: string;
    Type: string;
}
export interface AWSIoTAnalyticsDatastoreRetentionPeriod {
    NumberOfDays?: number;
    Unlimited?: boolean;
}
export interface AWSIoTAnalyticsPipeline {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PipelineActivities: AWSIoTAnalyticsPipelineActivity[];
        PipelineName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTAnalytics::Pipeline";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTAnalyticsPipelineActivity {
    AddAttributes?: AWSIoTAnalyticsPipelineAddAttributes;
    Channel?: AWSIoTAnalyticsPipelineChannel;
    Datastore?: AWSIoTAnalyticsPipelineDatastore;
    DeviceRegistryEnrich?: AWSIoTAnalyticsPipelineDeviceRegistryEnrich;
    DeviceShadowEnrich?: AWSIoTAnalyticsPipelineDeviceShadowEnrich;
    Filter?: AWSIoTAnalyticsPipelineFilter;
    Lambda?: AWSIoTAnalyticsPipelineLambda;
    Math?: AWSIoTAnalyticsPipelineMath;
    RemoveAttributes?: AWSIoTAnalyticsPipelineRemoveAttributes;
    SelectAttributes?: AWSIoTAnalyticsPipelineSelectAttributes;
}
export interface AWSIoTAnalyticsPipelineAddAttributes {
    Attributes?: {
        [k: string]: unknown;
    };
    Name?: string;
    Next?: string;
}
export interface AWSIoTAnalyticsPipelineChannel {
    ChannelName?: string;
    Name?: string;
    Next?: string;
}
export interface AWSIoTAnalyticsPipelineDatastore {
    DatastoreName?: string;
    Name?: string;
}
export interface AWSIoTAnalyticsPipelineDeviceRegistryEnrich {
    Attribute?: string;
    Name?: string;
    Next?: string;
    RoleArn?: string;
    ThingName?: string;
}
export interface AWSIoTAnalyticsPipelineDeviceShadowEnrich {
    Attribute?: string;
    Name?: string;
    Next?: string;
    RoleArn?: string;
    ThingName?: string;
}
export interface AWSIoTAnalyticsPipelineFilter {
    Filter?: string;
    Name?: string;
    Next?: string;
}
export interface AWSIoTAnalyticsPipelineLambda {
    BatchSize?: number;
    LambdaName?: string;
    Name?: string;
    Next?: string;
}
export interface AWSIoTAnalyticsPipelineMath {
    Attribute?: string;
    Math?: string;
    Name?: string;
    Next?: string;
}
export interface AWSIoTAnalyticsPipelineRemoveAttributes {
    Attributes?: string[];
    Name?: string;
    Next?: string;
}
export interface AWSIoTAnalyticsPipelineSelectAttributes {
    Attributes?: string[];
    Name?: string;
    Next?: string;
}
export interface AWSIoTCoreDeviceAdvisorSuiteDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        SuiteDefinitionConfiguration: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::IoTCoreDeviceAdvisor::SuiteDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTEventsDetectorModel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DetectorModelDefinition: AWSIoTEventsDetectorModelDetectorModelDefinition;
        DetectorModelDescription?: string;
        DetectorModelName?: string;
        EvaluationMethod?: string;
        Key?: string;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTEvents::DetectorModel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTEventsDetectorModelDetectorModelDefinition {
    InitialStateName: string;
    States: AWSIoTEventsDetectorModelState[];
}
export interface AWSIoTEventsDetectorModelState {
    OnEnter?: AWSIoTEventsDetectorModelOnEnter;
    OnExit?: AWSIoTEventsDetectorModelOnExit;
    OnInput?: AWSIoTEventsDetectorModelOnInput;
    StateName: string;
}
export interface AWSIoTEventsDetectorModelOnEnter {
    Events?: AWSIoTEventsDetectorModelEvent[];
}
export interface AWSIoTEventsDetectorModelEvent {
    Actions?: AWSIoTEventsDetectorModelAction[];
    Condition?: string;
    EventName: string;
}
export interface AWSIoTEventsDetectorModelAction {
    ClearTimer?: AWSIoTEventsDetectorModelClearTimer;
    DynamoDB?: AWSIoTEventsDetectorModelDynamoDB;
    DynamoDBv2?: AWSIoTEventsDetectorModelDynamoDBv2;
    Firehose?: AWSIoTEventsDetectorModelFirehose;
    IotEvents?: AWSIoTEventsDetectorModelIotEvents;
    IotSiteWise?: AWSIoTEventsDetectorModelIotSiteWise;
    IotTopicPublish?: AWSIoTEventsDetectorModelIotTopicPublish;
    Lambda?: AWSIoTEventsDetectorModelLambda;
    ResetTimer?: AWSIoTEventsDetectorModelResetTimer;
    SetTimer?: AWSIoTEventsDetectorModelSetTimer;
    SetVariable?: AWSIoTEventsDetectorModelSetVariable;
    Sns?: AWSIoTEventsDetectorModelSns;
    Sqs?: AWSIoTEventsDetectorModelSqs;
}
export interface AWSIoTEventsDetectorModelClearTimer {
    TimerName: string;
}
export interface AWSIoTEventsDetectorModelDynamoDB {
    HashKeyField: string;
    HashKeyType?: string;
    HashKeyValue: string;
    Operation?: string;
    Payload?: AWSIoTEventsDetectorModelPayload;
    PayloadField?: string;
    RangeKeyField?: string;
    RangeKeyType?: string;
    RangeKeyValue?: string;
    TableName: string;
}
export interface AWSIoTEventsDetectorModelPayload {
    ContentExpression: string;
    Type: string;
}
export interface AWSIoTEventsDetectorModelDynamoDBv2 {
    Payload?: AWSIoTEventsDetectorModelPayload;
    TableName: string;
}
export interface AWSIoTEventsDetectorModelFirehose {
    DeliveryStreamName: string;
    Payload?: AWSIoTEventsDetectorModelPayload;
    Separator?: string;
}
export interface AWSIoTEventsDetectorModelIotEvents {
    InputName: string;
    Payload?: AWSIoTEventsDetectorModelPayload;
}
export interface AWSIoTEventsDetectorModelIotSiteWise {
    AssetId?: string;
    EntryId?: string;
    PropertyAlias?: string;
    PropertyId?: string;
    PropertyValue: AWSIoTEventsDetectorModelAssetPropertyValue;
}
export interface AWSIoTEventsDetectorModelAssetPropertyValue {
    Quality?: string;
    Timestamp?: AWSIoTEventsDetectorModelAssetPropertyTimestamp;
    Value: AWSIoTEventsDetectorModelAssetPropertyVariant;
}
export interface AWSIoTEventsDetectorModelAssetPropertyTimestamp {
    OffsetInNanos?: string;
    TimeInSeconds: string;
}
export interface AWSIoTEventsDetectorModelAssetPropertyVariant {
    BooleanValue?: string;
    DoubleValue?: string;
    IntegerValue?: string;
    StringValue?: string;
}
export interface AWSIoTEventsDetectorModelIotTopicPublish {
    MqttTopic: string;
    Payload?: AWSIoTEventsDetectorModelPayload;
}
export interface AWSIoTEventsDetectorModelLambda {
    FunctionArn: string;
    Payload?: AWSIoTEventsDetectorModelPayload;
}
export interface AWSIoTEventsDetectorModelResetTimer {
    TimerName: string;
}
export interface AWSIoTEventsDetectorModelSetTimer {
    DurationExpression?: string;
    Seconds?: number;
    TimerName: string;
}
export interface AWSIoTEventsDetectorModelSetVariable {
    Value: string;
    VariableName: string;
}
export interface AWSIoTEventsDetectorModelSns {
    Payload?: AWSIoTEventsDetectorModelPayload;
    TargetArn: string;
}
export interface AWSIoTEventsDetectorModelSqs {
    Payload?: AWSIoTEventsDetectorModelPayload;
    QueueUrl: string;
    UseBase64?: boolean;
}
export interface AWSIoTEventsDetectorModelOnExit {
    Events?: AWSIoTEventsDetectorModelEvent[];
}
export interface AWSIoTEventsDetectorModelOnInput {
    Events?: AWSIoTEventsDetectorModelEvent[];
    TransitionEvents?: AWSIoTEventsDetectorModelTransitionEvent[];
}
export interface AWSIoTEventsDetectorModelTransitionEvent {
    Actions?: AWSIoTEventsDetectorModelAction[];
    Condition: string;
    EventName: string;
    NextState: string;
}
export interface AWSIoTEventsInput {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InputDefinition: AWSIoTEventsInputInputDefinition;
        InputDescription?: string;
        InputName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTEvents::Input";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTEventsInputInputDefinition {
    Attributes: AWSIoTEventsInputAttribute[];
}
export interface AWSIoTEventsInputAttribute {
    JsonPath: string;
}
export interface AWSIoTFleetHubApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationDescription?: string;
        ApplicationName: string;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTFleetHub::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSiteWiseAccessPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessPolicyIdentity: AWSIoTSiteWiseAccessPolicyAccessPolicyIdentity;
        AccessPolicyPermission: string;
        AccessPolicyResource: AWSIoTSiteWiseAccessPolicyAccessPolicyResource;
    };
    Type: "AWS::IoTSiteWise::AccessPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSiteWiseAccessPolicyAccessPolicyIdentity {
    IamRole?: AWSIoTSiteWiseAccessPolicyIamRole;
    IamUser?: AWSIoTSiteWiseAccessPolicyIamUser;
    User?: AWSIoTSiteWiseAccessPolicyUser;
}
export interface AWSIoTSiteWiseAccessPolicyIamRole {
    arn?: string;
}
export interface AWSIoTSiteWiseAccessPolicyIamUser {
    arn?: string;
}
export interface AWSIoTSiteWiseAccessPolicyUser {
    id?: string;
}
export interface AWSIoTSiteWiseAccessPolicyAccessPolicyResource {
    Portal?: AWSIoTSiteWiseAccessPolicyPortal;
    Project?: AWSIoTSiteWiseAccessPolicyProject;
}
export interface AWSIoTSiteWiseAccessPolicyPortal {
    id?: string;
}
export interface AWSIoTSiteWiseAccessPolicyProject {
    id?: string;
}
export interface AWSIoTSiteWiseAsset {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssetHierarchies?: AWSIoTSiteWiseAssetAssetHierarchy[];
        AssetModelId: string;
        AssetName: string;
        AssetProperties?: AWSIoTSiteWiseAssetAssetProperty[];
        Tags?: Tag[];
    };
    Type: "AWS::IoTSiteWise::Asset";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSiteWiseAssetAssetHierarchy {
    ChildAssetId: string;
    LogicalId: string;
}
export interface AWSIoTSiteWiseAssetAssetProperty {
    Alias?: string;
    LogicalId: string;
    NotificationState?: string;
}
export interface AWSIoTSiteWiseAssetModel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssetModelCompositeModels?: AWSIoTSiteWiseAssetModelAssetModelCompositeModel[];
        AssetModelDescription?: string;
        AssetModelHierarchies?: AWSIoTSiteWiseAssetModelAssetModelHierarchy[];
        AssetModelName: string;
        AssetModelProperties?: AWSIoTSiteWiseAssetModelAssetModelProperty[];
        Tags?: Tag[];
    };
    Type: "AWS::IoTSiteWise::AssetModel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSiteWiseAssetModelAssetModelCompositeModel {
    CompositeModelProperties?: AWSIoTSiteWiseAssetModelAssetModelProperty[];
    Description?: string;
    Name: string;
    Type: string;
}
export interface AWSIoTSiteWiseAssetModelAssetModelProperty {
    DataType: string;
    DataTypeSpec?: string;
    LogicalId: string;
    Name: string;
    Type: AWSIoTSiteWiseAssetModelPropertyType;
    Unit?: string;
}
export interface AWSIoTSiteWiseAssetModelPropertyType {
    Attribute?: AWSIoTSiteWiseAssetModelAttribute;
    Metric?: AWSIoTSiteWiseAssetModelMetric;
    Transform?: AWSIoTSiteWiseAssetModelTransform;
    TypeName: string;
}
export interface AWSIoTSiteWiseAssetModelAttribute {
    DefaultValue?: string;
}
export interface AWSIoTSiteWiseAssetModelMetric {
    Expression: string;
    Variables: AWSIoTSiteWiseAssetModelExpressionVariable[];
    Window: AWSIoTSiteWiseAssetModelMetricWindow;
}
export interface AWSIoTSiteWiseAssetModelExpressionVariable {
    Name: string;
    Value: AWSIoTSiteWiseAssetModelVariableValue;
}
export interface AWSIoTSiteWiseAssetModelVariableValue {
    HierarchyLogicalId?: string;
    PropertyLogicalId: string;
}
export interface AWSIoTSiteWiseAssetModelMetricWindow {
    Tumbling?: AWSIoTSiteWiseAssetModelTumblingWindow;
}
export interface AWSIoTSiteWiseAssetModelTumblingWindow {
    Interval: string;
    Offset?: string;
}
export interface AWSIoTSiteWiseAssetModelTransform {
    Expression: string;
    Variables: AWSIoTSiteWiseAssetModelExpressionVariable[];
}
export interface AWSIoTSiteWiseAssetModelAssetModelHierarchy {
    ChildAssetModelId: string;
    LogicalId: string;
    Name: string;
}
export interface AWSIoTSiteWiseDashboard {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DashboardDefinition: string;
        DashboardDescription: string;
        DashboardName: string;
        ProjectId?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTSiteWise::Dashboard";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSiteWiseGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GatewayCapabilitySummaries?: AWSIoTSiteWiseGatewayGatewayCapabilitySummary[];
        GatewayName: string;
        GatewayPlatform: AWSIoTSiteWiseGatewayGatewayPlatform;
        Tags?: Tag[];
    };
    Type: "AWS::IoTSiteWise::Gateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSiteWiseGatewayGatewayCapabilitySummary {
    CapabilityConfiguration?: string;
    CapabilityNamespace: string;
}
export interface AWSIoTSiteWiseGatewayGatewayPlatform {
    Greengrass: AWSIoTSiteWiseGatewayGreengrass;
}
export interface AWSIoTSiteWiseGatewayGreengrass {
    GroupArn: string;
}
export interface AWSIoTSiteWisePortal {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Alarms?: {
            [k: string]: unknown;
        };
        NotificationSenderEmail?: string;
        PortalAuthMode?: string;
        PortalContactEmail: string;
        PortalDescription?: string;
        PortalName: string;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTSiteWise::Portal";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTSiteWiseProject {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PortalId: string;
        ProjectDescription?: string;
        ProjectName: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTSiteWise::Project";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTThingsGraphFlowTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CompatibleNamespaceVersion?: number;
        Definition: AWSIoTThingsGraphFlowTemplateDefinitionDocument;
    };
    Type: "AWS::IoTThingsGraph::FlowTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTThingsGraphFlowTemplateDefinitionDocument {
    Language: string;
    Text: string;
}
export interface AWSIoTWirelessDestination {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Expression: string;
        ExpressionType: string;
        Name: string;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTWireless::Destination";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTWirelessDeviceProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        LoRaWAN?: AWSIoTWirelessDeviceProfileLoRaWANDeviceProfile;
        Name?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTWireless::DeviceProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTWirelessDeviceProfileLoRaWANDeviceProfile {
    ClassBTimeout?: number;
    ClassCTimeout?: number;
    MacVersion?: string;
    MaxDutyCycle?: number;
    MaxEirp?: number;
    PingSlotDr?: number;
    PingSlotFreq?: number;
    PingSlotPeriod?: number;
    RegParamsRevision?: string;
    RfRegion?: string;
    Supports32BitFCnt?: boolean;
    SupportsClassB?: boolean;
    SupportsClassC?: boolean;
    SupportsJoin?: boolean;
}
export interface AWSIoTWirelessPartnerAccount {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AccountLinked?: boolean;
        Fingerprint?: string;
        PartnerAccountId?: string;
        PartnerType?: string;
        Sidewalk?: AWSIoTWirelessPartnerAccountSidewalkAccountInfo;
        SidewalkUpdate?: AWSIoTWirelessPartnerAccountSidewalkUpdateAccount;
        Tags?: Tag[];
    };
    Type: "AWS::IoTWireless::PartnerAccount";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTWirelessPartnerAccountSidewalkAccountInfo {
    AppServerPrivateKey: string;
}
export interface AWSIoTWirelessPartnerAccountSidewalkUpdateAccount {
    AppServerPrivateKey?: string;
}
export interface AWSIoTWirelessServiceProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        LoRaWAN?: AWSIoTWirelessServiceProfileLoRaWANServiceProfile;
        Name?: string;
        Tags?: Tag[];
    };
    Type: "AWS::IoTWireless::ServiceProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTWirelessServiceProfileLoRaWANServiceProfile {
    AddGwMetadata?: boolean;
    ChannelMask?: string;
    DevStatusReqFreq?: number;
    DlBucketSize?: number;
    DlRate?: number;
    DlRatePolicy?: string;
    DrMax?: number;
    DrMin?: number;
    HrAllowed?: boolean;
    MinGwDiversity?: number;
    NwkGeoLoc?: boolean;
    PrAllowed?: boolean;
    RaAllowed?: boolean;
    ReportDevStatusBattery?: boolean;
    ReportDevStatusMargin?: boolean;
    TargetPer?: number;
    UlBucketSize?: number;
    UlRate?: number;
    UlRatePolicy?: string;
}
export interface AWSIoTWirelessTaskDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AutoCreateTasks: boolean;
        LoRaWANUpdateGatewayTaskEntry?: AWSIoTWirelessTaskDefinitionLoRaWANUpdateGatewayTaskEntry;
        Name?: string;
        Tags?: Tag[];
        TaskDefinitionType?: string;
        Update?: AWSIoTWirelessTaskDefinitionUpdateWirelessGatewayTaskCreate;
    };
    Type: "AWS::IoTWireless::TaskDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTWirelessTaskDefinitionLoRaWANUpdateGatewayTaskEntry {
    CurrentVersion?: AWSIoTWirelessTaskDefinitionLoRaWANGatewayVersion;
    UpdateVersion?: AWSIoTWirelessTaskDefinitionLoRaWANGatewayVersion;
}
export interface AWSIoTWirelessTaskDefinitionLoRaWANGatewayVersion {
    Model?: string;
    PackageVersion?: string;
    Station?: string;
}
export interface AWSIoTWirelessTaskDefinitionUpdateWirelessGatewayTaskCreate {
    LoRaWAN?: AWSIoTWirelessTaskDefinitionLoRaWANUpdateGatewayTaskCreate;
    UpdateDataRole?: string;
    UpdateDataSource?: string;
}
export interface AWSIoTWirelessTaskDefinitionLoRaWANUpdateGatewayTaskCreate {
    CurrentVersion?: AWSIoTWirelessTaskDefinitionLoRaWANGatewayVersion;
    SigKeyCrc?: number;
    UpdateSignature?: string;
    UpdateVersion?: AWSIoTWirelessTaskDefinitionLoRaWANGatewayVersion;
}
export interface AWSIoTWirelessWirelessDevice {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        DestinationName: string;
        LastUplinkReceivedAt?: string;
        LoRaWAN?: AWSIoTWirelessWirelessDeviceLoRaWANDevice;
        Name?: string;
        Tags?: Tag[];
        ThingArn?: string;
        Type: string;
    };
    Type: "AWS::IoTWireless::WirelessDevice";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTWirelessWirelessDeviceLoRaWANDevice {
    AbpV10x?: AWSIoTWirelessWirelessDeviceAbpV10X;
    AbpV11?: AWSIoTWirelessWirelessDeviceAbpV11;
    DevEui?: string;
    DeviceProfileId?: string;
    OtaaV10x?: AWSIoTWirelessWirelessDeviceOtaaV10X;
    OtaaV11?: AWSIoTWirelessWirelessDeviceOtaaV11;
    ServiceProfileId?: string;
}
export interface AWSIoTWirelessWirelessDeviceAbpV10X {
    DevAddr: string;
    SessionKeys: AWSIoTWirelessWirelessDeviceSessionKeysAbpV10X;
}
export interface AWSIoTWirelessWirelessDeviceSessionKeysAbpV10X {
    AppSKey: string;
    NwkSKey: string;
}
export interface AWSIoTWirelessWirelessDeviceAbpV11 {
    DevAddr: string;
    SessionKeys: AWSIoTWirelessWirelessDeviceSessionKeysAbpV11;
}
export interface AWSIoTWirelessWirelessDeviceSessionKeysAbpV11 {
    AppSKey: string;
    FNwkSIntKey: string;
    NwkSEncKey: string;
    SNwkSIntKey: string;
}
export interface AWSIoTWirelessWirelessDeviceOtaaV10X {
    AppEui: string;
    AppKey: string;
}
export interface AWSIoTWirelessWirelessDeviceOtaaV11 {
    AppKey: string;
    JoinEui: string;
    NwkKey: string;
}
export interface AWSIoTWirelessWirelessGateway {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        LastUplinkReceivedAt?: string;
        LoRaWAN: AWSIoTWirelessWirelessGatewayLoRaWANGateway;
        Name?: string;
        Tags?: Tag[];
        ThingArn?: string;
    };
    Type: "AWS::IoTWireless::WirelessGateway";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSIoTWirelessWirelessGatewayLoRaWANGateway {
    GatewayEui: string;
    RfRegion: string;
}
export interface AWSKMSAlias {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AliasName: string;
        TargetKeyId: string;
    };
    Type: "AWS::KMS::Alias";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKMSKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        EnableKeyRotation?: boolean;
        Enabled?: boolean;
        KeyPolicy: {
            [k: string]: unknown;
        };
        KeySpec?: string;
        KeyUsage?: string;
        MultiRegion?: boolean;
        PendingWindowInDays?: number;
        Tags?: Tag[];
    };
    Type: "AWS::KMS::Key";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKMSReplicaKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Enabled?: boolean;
        KeyPolicy: {
            [k: string]: unknown;
        };
        PendingWindowInDays?: number;
        PrimaryKeyArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::KMS::ReplicaKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKendraDataSource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataSourceConfiguration?: AWSKendraDataSourceDataSourceConfiguration;
        Description?: string;
        IndexId: string;
        Name: string;
        RoleArn?: string;
        Schedule?: string;
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::Kendra::DataSource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKendraDataSourceDataSourceConfiguration {
    ConfluenceConfiguration?: AWSKendraDataSourceConfluenceConfiguration;
    DatabaseConfiguration?: AWSKendraDataSourceDatabaseConfiguration;
    GoogleDriveConfiguration?: AWSKendraDataSourceGoogleDriveConfiguration;
    OneDriveConfiguration?: AWSKendraDataSourceOneDriveConfiguration;
    S3Configuration?: AWSKendraDataSourceS3DataSourceConfiguration;
    SalesforceConfiguration?: AWSKendraDataSourceSalesforceConfiguration;
    ServiceNowConfiguration?: AWSKendraDataSourceServiceNowConfiguration;
    SharePointConfiguration?: AWSKendraDataSourceSharePointConfiguration;
    WebCrawlerConfiguration?: AWSKendraDataSourceWebCrawlerConfiguration;
    WorkDocsConfiguration?: AWSKendraDataSourceWorkDocsConfiguration;
}
export interface AWSKendraDataSourceConfluenceConfiguration {
    AttachmentConfiguration?: AWSKendraDataSourceConfluenceAttachmentConfiguration;
    BlogConfiguration?: AWSKendraDataSourceConfluenceBlogConfiguration;
    ExclusionPatterns?: string[];
    InclusionPatterns?: string[];
    PageConfiguration?: AWSKendraDataSourceConfluencePageConfiguration;
    SecretArn: string;
    ServerUrl: string;
    SpaceConfiguration?: AWSKendraDataSourceConfluenceSpaceConfiguration;
    Version: string;
    VpcConfiguration?: AWSKendraDataSourceDataSourceVpcConfiguration;
}
export interface AWSKendraDataSourceConfluenceAttachmentConfiguration {
    AttachmentFieldMappings?: AWSKendraDataSourceConfluenceAttachmentToIndexFieldMapping[];
    CrawlAttachments?: boolean;
}
export interface AWSKendraDataSourceConfluenceAttachmentToIndexFieldMapping {
    DataSourceFieldName: string;
    DateFieldFormat?: string;
    IndexFieldName: string;
}
export interface AWSKendraDataSourceConfluenceBlogConfiguration {
    BlogFieldMappings?: AWSKendraDataSourceConfluenceBlogToIndexFieldMapping[];
}
export interface AWSKendraDataSourceConfluenceBlogToIndexFieldMapping {
    DataSourceFieldName: string;
    DateFieldFormat?: string;
    IndexFieldName: string;
}
export interface AWSKendraDataSourceConfluencePageConfiguration {
    PageFieldMappings?: AWSKendraDataSourceConfluencePageToIndexFieldMapping[];
}
export interface AWSKendraDataSourceConfluencePageToIndexFieldMapping {
    DataSourceFieldName: string;
    DateFieldFormat?: string;
    IndexFieldName: string;
}
export interface AWSKendraDataSourceConfluenceSpaceConfiguration {
    CrawlArchivedSpaces?: boolean;
    CrawlPersonalSpaces?: boolean;
    ExcludeSpaces?: string[];
    IncludeSpaces?: string[];
    SpaceFieldMappings?: AWSKendraDataSourceConfluenceSpaceToIndexFieldMapping[];
}
export interface AWSKendraDataSourceConfluenceSpaceToIndexFieldMapping {
    DataSourceFieldName: string;
    DateFieldFormat?: string;
    IndexFieldName: string;
}
export interface AWSKendraDataSourceDataSourceVpcConfiguration {
    SecurityGroupIds: string[];
    SubnetIds: string[];
}
export interface AWSKendraDataSourceDatabaseConfiguration {
    AclConfiguration?: AWSKendraDataSourceAclConfiguration;
    ColumnConfiguration: AWSKendraDataSourceColumnConfiguration;
    ConnectionConfiguration: AWSKendraDataSourceConnectionConfiguration;
    DatabaseEngineType: string;
    SqlConfiguration?: AWSKendraDataSourceSqlConfiguration;
    VpcConfiguration?: AWSKendraDataSourceDataSourceVpcConfiguration;
}
export interface AWSKendraDataSourceAclConfiguration {
    AllowedGroupsColumnName: string;
}
export interface AWSKendraDataSourceColumnConfiguration {
    ChangeDetectingColumns: string[];
    DocumentDataColumnName: string;
    DocumentIdColumnName: string;
    DocumentTitleColumnName?: string;
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
}
export interface AWSKendraDataSourceDataSourceToIndexFieldMapping {
    DataSourceFieldName: string;
    DateFieldFormat?: string;
    IndexFieldName: string;
}
export interface AWSKendraDataSourceConnectionConfiguration {
    DatabaseHost: string;
    DatabaseName: string;
    DatabasePort: number;
    SecretArn: string;
    TableName: string;
}
export interface AWSKendraDataSourceSqlConfiguration {
    QueryIdentifiersEnclosingOption?: string;
}
export interface AWSKendraDataSourceGoogleDriveConfiguration {
    ExcludeMimeTypes?: string[];
    ExcludeSharedDrives?: string[];
    ExcludeUserAccounts?: string[];
    ExclusionPatterns?: string[];
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    InclusionPatterns?: string[];
    SecretArn: string;
}
export interface AWSKendraDataSourceOneDriveConfiguration {
    DisableLocalGroups?: boolean;
    ExclusionPatterns?: string[];
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    InclusionPatterns?: string[];
    OneDriveUsers: AWSKendraDataSourceOneDriveUsers;
    SecretArn: string;
    TenantDomain: string;
}
export interface AWSKendraDataSourceOneDriveUsers {
    OneDriveUserList?: string[];
    OneDriveUserS3Path?: AWSKendraDataSourceS3Path;
}
export interface AWSKendraDataSourceS3Path {
    Bucket: string;
    Key: string;
}
export interface AWSKendraDataSourceS3DataSourceConfiguration {
    AccessControlListConfiguration?: AWSKendraDataSourceAccessControlListConfiguration;
    BucketName: string;
    DocumentsMetadataConfiguration?: AWSKendraDataSourceDocumentsMetadataConfiguration;
    ExclusionPatterns?: string[];
    InclusionPatterns?: string[];
    InclusionPrefixes?: string[];
}
export interface AWSKendraDataSourceAccessControlListConfiguration {
    KeyPath?: string;
}
export interface AWSKendraDataSourceDocumentsMetadataConfiguration {
    S3Prefix?: string;
}
export interface AWSKendraDataSourceSalesforceConfiguration {
    ChatterFeedConfiguration?: AWSKendraDataSourceSalesforceChatterFeedConfiguration;
    CrawlAttachments?: boolean;
    ExcludeAttachmentFilePatterns?: string[];
    IncludeAttachmentFilePatterns?: string[];
    KnowledgeArticleConfiguration?: AWSKendraDataSourceSalesforceKnowledgeArticleConfiguration;
    SecretArn: string;
    ServerUrl: string;
    StandardObjectAttachmentConfiguration?: AWSKendraDataSourceSalesforceStandardObjectAttachmentConfiguration;
    StandardObjectConfigurations?: AWSKendraDataSourceSalesforceStandardObjectConfiguration[];
}
export interface AWSKendraDataSourceSalesforceChatterFeedConfiguration {
    DocumentDataFieldName: string;
    DocumentTitleFieldName?: string;
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    IncludeFilterTypes?: string[];
}
export interface AWSKendraDataSourceSalesforceKnowledgeArticleConfiguration {
    CustomKnowledgeArticleTypeConfigurations?: AWSKendraDataSourceSalesforceCustomKnowledgeArticleTypeConfiguration[];
    IncludedStates: string[];
    StandardKnowledgeArticleTypeConfiguration?: AWSKendraDataSourceSalesforceStandardKnowledgeArticleTypeConfiguration;
}
export interface AWSKendraDataSourceSalesforceCustomKnowledgeArticleTypeConfiguration {
    DocumentDataFieldName: string;
    DocumentTitleFieldName?: string;
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    Name: string;
}
export interface AWSKendraDataSourceSalesforceStandardKnowledgeArticleTypeConfiguration {
    DocumentDataFieldName: string;
    DocumentTitleFieldName?: string;
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
}
export interface AWSKendraDataSourceSalesforceStandardObjectAttachmentConfiguration {
    DocumentTitleFieldName?: string;
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
}
export interface AWSKendraDataSourceSalesforceStandardObjectConfiguration {
    DocumentDataFieldName: string;
    DocumentTitleFieldName?: string;
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    Name: string;
}
export interface AWSKendraDataSourceServiceNowConfiguration {
    AuthenticationType?: string;
    HostUrl: string;
    KnowledgeArticleConfiguration?: AWSKendraDataSourceServiceNowKnowledgeArticleConfiguration;
    SecretArn: string;
    ServiceCatalogConfiguration?: AWSKendraDataSourceServiceNowServiceCatalogConfiguration;
    ServiceNowBuildVersion: string;
}
export interface AWSKendraDataSourceServiceNowKnowledgeArticleConfiguration {
    CrawlAttachments?: boolean;
    DocumentDataFieldName: string;
    DocumentTitleFieldName?: string;
    ExcludeAttachmentFilePatterns?: string[];
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    FilterQuery?: string;
    IncludeAttachmentFilePatterns?: string[];
}
export interface AWSKendraDataSourceServiceNowServiceCatalogConfiguration {
    CrawlAttachments?: boolean;
    DocumentDataFieldName: string;
    DocumentTitleFieldName?: string;
    ExcludeAttachmentFilePatterns?: string[];
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    IncludeAttachmentFilePatterns?: string[];
}
export interface AWSKendraDataSourceSharePointConfiguration {
    CrawlAttachments?: boolean;
    DisableLocalGroups?: boolean;
    DocumentTitleFieldName?: string;
    ExclusionPatterns?: string[];
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    InclusionPatterns?: string[];
    SecretArn: string;
    SharePointVersion: string;
    SslCertificateS3Path?: AWSKendraDataSourceS3Path;
    Urls: string[];
    UseChangeLog?: boolean;
    VpcConfiguration?: AWSKendraDataSourceDataSourceVpcConfiguration;
}
export interface AWSKendraDataSourceWebCrawlerConfiguration {
    AuthenticationConfiguration?: AWSKendraDataSourceWebCrawlerAuthenticationConfiguration;
    CrawlDepth?: number;
    MaxContentSizePerPageInMegaBytes?: number;
    MaxLinksPerPage?: number;
    MaxUrlsPerMinuteCrawlRate?: number;
    ProxyConfiguration?: AWSKendraDataSourceProxyConfiguration;
    UrlExclusionPatterns?: string[];
    UrlInclusionPatterns?: string[];
    Urls: AWSKendraDataSourceWebCrawlerUrls;
}
export interface AWSKendraDataSourceWebCrawlerAuthenticationConfiguration {
    BasicAuthentication?: AWSKendraDataSourceWebCrawlerBasicAuthentication[];
}
export interface AWSKendraDataSourceWebCrawlerBasicAuthentication {
    Credentials: string;
    Host: string;
    Port: number;
}
export interface AWSKendraDataSourceProxyConfiguration {
    Credentials?: string;
    Host: string;
    Port: number;
}
export interface AWSKendraDataSourceWebCrawlerUrls {
    SeedUrlConfiguration?: AWSKendraDataSourceWebCrawlerSeedUrlConfiguration;
    SiteMapsConfiguration?: AWSKendraDataSourceWebCrawlerSiteMapsConfiguration;
}
export interface AWSKendraDataSourceWebCrawlerSeedUrlConfiguration {
    SeedUrls: string[];
    WebCrawlerMode?: string;
}
export interface AWSKendraDataSourceWebCrawlerSiteMapsConfiguration {
    SiteMaps: string[];
}
export interface AWSKendraDataSourceWorkDocsConfiguration {
    CrawlComments?: boolean;
    ExclusionPatterns?: string[];
    FieldMappings?: AWSKendraDataSourceDataSourceToIndexFieldMapping[];
    InclusionPatterns?: string[];
    OrganizationId: string;
    UseChangeLog?: boolean;
}
export interface AWSKendraFaq {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        FileFormat?: string;
        IndexId: string;
        Name: string;
        RoleArn: string;
        S3Path: AWSKendraFaqS3Path;
        Tags?: Tag[];
    };
    Type: "AWS::Kendra::Faq";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKendraFaqS3Path {
    Bucket: string;
    Key: string;
}
export interface AWSKendraIndex {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CapacityUnits?: AWSKendraIndexCapacityUnitsConfiguration;
        Description?: string;
        DocumentMetadataConfigurations?: AWSKendraIndexDocumentMetadataConfiguration[];
        Edition: string;
        Name: string;
        RoleArn: string;
        ServerSideEncryptionConfiguration?: AWSKendraIndexServerSideEncryptionConfiguration;
        Tags?: Tag[];
        UserContextPolicy?: string;
        UserTokenConfigurations?: AWSKendraIndexUserTokenConfiguration[];
    };
    Type: "AWS::Kendra::Index";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKendraIndexCapacityUnitsConfiguration {
    QueryCapacityUnits: number;
    StorageCapacityUnits: number;
}
export interface AWSKendraIndexDocumentMetadataConfiguration {
    Name: string;
    Relevance?: AWSKendraIndexRelevance;
    Search?: AWSKendraIndexSearch;
    Type: string;
}
export interface AWSKendraIndexRelevance {
    Duration?: string;
    Freshness?: boolean;
    Importance?: number;
    RankOrder?: string;
    ValueImportanceItems?: AWSKendraIndexValueImportanceItem[];
}
export interface AWSKendraIndexValueImportanceItem {
    Key?: string;
    Value?: number;
}
export interface AWSKendraIndexSearch {
    Displayable?: boolean;
    Facetable?: boolean;
    Searchable?: boolean;
    Sortable?: boolean;
}
export interface AWSKendraIndexServerSideEncryptionConfiguration {
    KmsKeyId?: string;
}
export interface AWSKendraIndexUserTokenConfiguration {
    JsonTokenTypeConfiguration?: AWSKendraIndexJsonTokenTypeConfiguration;
    JwtTokenTypeConfiguration?: AWSKendraIndexJwtTokenTypeConfiguration;
}
export interface AWSKendraIndexJsonTokenTypeConfiguration {
    GroupAttributeField: string;
    UserNameAttributeField: string;
}
export interface AWSKendraIndexJwtTokenTypeConfiguration {
    ClaimRegex?: string;
    GroupAttributeField?: string;
    Issuer?: string;
    KeyLocation: string;
    SecretManagerArn?: string;
    URL?: string;
    UserNameAttributeField?: string;
}
export interface AWSKinesisStream {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        RetentionPeriodHours?: number;
        ShardCount: number;
        StreamEncryption?: AWSKinesisStreamStreamEncryption;
        Tags?: Tag[];
    };
    Type: "AWS::Kinesis::Stream";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisStreamStreamEncryption {
    EncryptionType: string;
    KeyId: string;
}
export interface AWSKinesisStreamConsumer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConsumerName: string;
        StreamARN: string;
    };
    Type: "AWS::Kinesis::StreamConsumer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationCode?: string;
        ApplicationDescription?: string;
        ApplicationName?: string;
        Inputs: AWSKinesisAnalyticsApplicationInput[];
    };
    Type: "AWS::KinesisAnalytics::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsApplicationInput {
    InputParallelism?: AWSKinesisAnalyticsApplicationInputParallelism;
    InputProcessingConfiguration?: AWSKinesisAnalyticsApplicationInputProcessingConfiguration;
    InputSchema: AWSKinesisAnalyticsApplicationInputSchema;
    KinesisFirehoseInput?: AWSKinesisAnalyticsApplicationKinesisFirehoseInput;
    KinesisStreamsInput?: AWSKinesisAnalyticsApplicationKinesisStreamsInput;
    NamePrefix: string;
}
export interface AWSKinesisAnalyticsApplicationInputParallelism {
    Count?: number;
}
export interface AWSKinesisAnalyticsApplicationInputProcessingConfiguration {
    InputLambdaProcessor?: AWSKinesisAnalyticsApplicationInputLambdaProcessor;
}
export interface AWSKinesisAnalyticsApplicationInputLambdaProcessor {
    ResourceARN: string;
    RoleARN: string;
}
export interface AWSKinesisAnalyticsApplicationInputSchema {
    RecordColumns: AWSKinesisAnalyticsApplicationRecordColumn[];
    RecordEncoding?: string;
    RecordFormat: AWSKinesisAnalyticsApplicationRecordFormat;
}
export interface AWSKinesisAnalyticsApplicationRecordColumn {
    Mapping?: string;
    Name: string;
    SqlType: string;
}
export interface AWSKinesisAnalyticsApplicationRecordFormat {
    MappingParameters?: AWSKinesisAnalyticsApplicationMappingParameters;
    RecordFormatType: string;
}
export interface AWSKinesisAnalyticsApplicationMappingParameters {
    CSVMappingParameters?: AWSKinesisAnalyticsApplicationCSVMappingParameters;
    JSONMappingParameters?: AWSKinesisAnalyticsApplicationJSONMappingParameters;
}
export interface AWSKinesisAnalyticsApplicationCSVMappingParameters {
    RecordColumnDelimiter: string;
    RecordRowDelimiter: string;
}
export interface AWSKinesisAnalyticsApplicationJSONMappingParameters {
    RecordRowPath: string;
}
export interface AWSKinesisAnalyticsApplicationKinesisFirehoseInput {
    ResourceARN: string;
    RoleARN: string;
}
export interface AWSKinesisAnalyticsApplicationKinesisStreamsInput {
    ResourceARN: string;
    RoleARN: string;
}
export interface AWSKinesisAnalyticsApplicationOutput {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        Output: AWSKinesisAnalyticsApplicationOutputOutput;
    };
    Type: "AWS::KinesisAnalytics::ApplicationOutput";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsApplicationOutputOutput {
    DestinationSchema: AWSKinesisAnalyticsApplicationOutputDestinationSchema;
    KinesisFirehoseOutput?: AWSKinesisAnalyticsApplicationOutputKinesisFirehoseOutput;
    KinesisStreamsOutput?: AWSKinesisAnalyticsApplicationOutputKinesisStreamsOutput;
    LambdaOutput?: AWSKinesisAnalyticsApplicationOutputLambdaOutput;
    Name?: string;
}
export interface AWSKinesisAnalyticsApplicationOutputDestinationSchema {
    RecordFormatType?: string;
}
export interface AWSKinesisAnalyticsApplicationOutputKinesisFirehoseOutput {
    ResourceARN: string;
    RoleARN: string;
}
export interface AWSKinesisAnalyticsApplicationOutputKinesisStreamsOutput {
    ResourceARN: string;
    RoleARN: string;
}
export interface AWSKinesisAnalyticsApplicationOutputLambdaOutput {
    ResourceARN: string;
    RoleARN: string;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        ReferenceDataSource: AWSKinesisAnalyticsApplicationReferenceDataSourceReferenceDataSource;
    };
    Type: "AWS::KinesisAnalytics::ApplicationReferenceDataSource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceReferenceDataSource {
    ReferenceSchema: AWSKinesisAnalyticsApplicationReferenceDataSourceReferenceSchema;
    S3ReferenceDataSource?: AWSKinesisAnalyticsApplicationReferenceDataSourceS3ReferenceDataSource;
    TableName?: string;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceReferenceSchema {
    RecordColumns: AWSKinesisAnalyticsApplicationReferenceDataSourceRecordColumn[];
    RecordEncoding?: string;
    RecordFormat: AWSKinesisAnalyticsApplicationReferenceDataSourceRecordFormat;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceRecordColumn {
    Mapping?: string;
    Name: string;
    SqlType: string;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceRecordFormat {
    MappingParameters?: AWSKinesisAnalyticsApplicationReferenceDataSourceMappingParameters;
    RecordFormatType: string;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceMappingParameters {
    CSVMappingParameters?: AWSKinesisAnalyticsApplicationReferenceDataSourceCSVMappingParameters;
    JSONMappingParameters?: AWSKinesisAnalyticsApplicationReferenceDataSourceJSONMappingParameters;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceCSVMappingParameters {
    RecordColumnDelimiter: string;
    RecordRowDelimiter: string;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceJSONMappingParameters {
    RecordRowPath: string;
}
export interface AWSKinesisAnalyticsApplicationReferenceDataSourceS3ReferenceDataSource {
    BucketARN: string;
    FileKey: string;
    ReferenceRoleARN: string;
}
export interface AWSKinesisAnalyticsV2Application {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationConfiguration?: AWSKinesisAnalyticsV2ApplicationApplicationConfiguration;
        ApplicationDescription?: string;
        ApplicationMode?: string;
        ApplicationName?: string;
        RuntimeEnvironment: string;
        ServiceExecutionRole: string;
        Tags?: Tag[];
    };
    Type: "AWS::KinesisAnalyticsV2::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsV2ApplicationApplicationConfiguration {
    ApplicationCodeConfiguration?: AWSKinesisAnalyticsV2ApplicationApplicationCodeConfiguration;
    ApplicationSnapshotConfiguration?: AWSKinesisAnalyticsV2ApplicationApplicationSnapshotConfiguration;
    EnvironmentProperties?: AWSKinesisAnalyticsV2ApplicationEnvironmentProperties;
    FlinkApplicationConfiguration?: AWSKinesisAnalyticsV2ApplicationFlinkApplicationConfiguration;
    SqlApplicationConfiguration?: AWSKinesisAnalyticsV2ApplicationSqlApplicationConfiguration;
    ZeppelinApplicationConfiguration?: AWSKinesisAnalyticsV2ApplicationZeppelinApplicationConfiguration;
}
export interface AWSKinesisAnalyticsV2ApplicationApplicationCodeConfiguration {
    CodeContent: AWSKinesisAnalyticsV2ApplicationCodeContent;
    CodeContentType: string;
}
export interface AWSKinesisAnalyticsV2ApplicationCodeContent {
    S3ContentLocation?: AWSKinesisAnalyticsV2ApplicationS3ContentLocation;
    TextContent?: string;
    ZipFileContent?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationS3ContentLocation {
    BucketARN?: string;
    FileKey?: string;
    ObjectVersion?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationApplicationSnapshotConfiguration {
    SnapshotsEnabled: boolean;
}
export interface AWSKinesisAnalyticsV2ApplicationEnvironmentProperties {
    PropertyGroups?: AWSKinesisAnalyticsV2ApplicationPropertyGroup[];
}
export interface AWSKinesisAnalyticsV2ApplicationPropertyGroup {
    PropertyGroupId?: string;
    PropertyMap?: {
        [k: string]: unknown;
    };
}
export interface AWSKinesisAnalyticsV2ApplicationFlinkApplicationConfiguration {
    CheckpointConfiguration?: AWSKinesisAnalyticsV2ApplicationCheckpointConfiguration;
    MonitoringConfiguration?: AWSKinesisAnalyticsV2ApplicationMonitoringConfiguration;
    ParallelismConfiguration?: AWSKinesisAnalyticsV2ApplicationParallelismConfiguration;
}
export interface AWSKinesisAnalyticsV2ApplicationCheckpointConfiguration {
    CheckpointInterval?: number;
    CheckpointingEnabled?: boolean;
    ConfigurationType: string;
    MinPauseBetweenCheckpoints?: number;
}
export interface AWSKinesisAnalyticsV2ApplicationMonitoringConfiguration {
    ConfigurationType: string;
    LogLevel?: string;
    MetricsLevel?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationParallelismConfiguration {
    AutoScalingEnabled?: boolean;
    ConfigurationType: string;
    Parallelism?: number;
    ParallelismPerKPU?: number;
}
export interface AWSKinesisAnalyticsV2ApplicationSqlApplicationConfiguration {
    Inputs?: AWSKinesisAnalyticsV2ApplicationInput[];
}
export interface AWSKinesisAnalyticsV2ApplicationInput {
    InputParallelism?: AWSKinesisAnalyticsV2ApplicationInputParallelism;
    InputProcessingConfiguration?: AWSKinesisAnalyticsV2ApplicationInputProcessingConfiguration;
    InputSchema: AWSKinesisAnalyticsV2ApplicationInputSchema;
    KinesisFirehoseInput?: AWSKinesisAnalyticsV2ApplicationKinesisFirehoseInput;
    KinesisStreamsInput?: AWSKinesisAnalyticsV2ApplicationKinesisStreamsInput;
    NamePrefix: string;
}
export interface AWSKinesisAnalyticsV2ApplicationInputParallelism {
    Count?: number;
}
export interface AWSKinesisAnalyticsV2ApplicationInputProcessingConfiguration {
    InputLambdaProcessor?: AWSKinesisAnalyticsV2ApplicationInputLambdaProcessor;
}
export interface AWSKinesisAnalyticsV2ApplicationInputLambdaProcessor {
    ResourceARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationInputSchema {
    RecordColumns: AWSKinesisAnalyticsV2ApplicationRecordColumn[];
    RecordEncoding?: string;
    RecordFormat: AWSKinesisAnalyticsV2ApplicationRecordFormat;
}
export interface AWSKinesisAnalyticsV2ApplicationRecordColumn {
    Mapping?: string;
    Name: string;
    SqlType: string;
}
export interface AWSKinesisAnalyticsV2ApplicationRecordFormat {
    MappingParameters?: AWSKinesisAnalyticsV2ApplicationMappingParameters;
    RecordFormatType: string;
}
export interface AWSKinesisAnalyticsV2ApplicationMappingParameters {
    CSVMappingParameters?: AWSKinesisAnalyticsV2ApplicationCSVMappingParameters;
    JSONMappingParameters?: AWSKinesisAnalyticsV2ApplicationJSONMappingParameters;
}
export interface AWSKinesisAnalyticsV2ApplicationCSVMappingParameters {
    RecordColumnDelimiter: string;
    RecordRowDelimiter: string;
}
export interface AWSKinesisAnalyticsV2ApplicationJSONMappingParameters {
    RecordRowPath: string;
}
export interface AWSKinesisAnalyticsV2ApplicationKinesisFirehoseInput {
    ResourceARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationKinesisStreamsInput {
    ResourceARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationZeppelinApplicationConfiguration {
    CatalogConfiguration?: AWSKinesisAnalyticsV2ApplicationCatalogConfiguration;
    CustomArtifactsConfiguration?: AWSKinesisAnalyticsV2ApplicationCustomArtifactsConfiguration;
    DeployAsApplicationConfiguration?: AWSKinesisAnalyticsV2ApplicationDeployAsApplicationConfiguration;
    MonitoringConfiguration?: AWSKinesisAnalyticsV2ApplicationZeppelinMonitoringConfiguration;
}
export interface AWSKinesisAnalyticsV2ApplicationCatalogConfiguration {
    GlueDataCatalogConfiguration?: AWSKinesisAnalyticsV2ApplicationGlueDataCatalogConfiguration;
}
export interface AWSKinesisAnalyticsV2ApplicationGlueDataCatalogConfiguration {
    DatabaseARN?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationCustomArtifactsConfiguration {}
export interface AWSKinesisAnalyticsV2ApplicationDeployAsApplicationConfiguration {
    S3ContentLocation: AWSKinesisAnalyticsV2ApplicationS3ContentBaseLocation;
}
export interface AWSKinesisAnalyticsV2ApplicationS3ContentBaseLocation {
    BasePath: string;
    BucketARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationZeppelinMonitoringConfiguration {
    LogLevel?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationCloudWatchLoggingOption {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        CloudWatchLoggingOption: AWSKinesisAnalyticsV2ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption;
    };
    Type: "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsV2ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption {
    LogStreamARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationOutput {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        Output: AWSKinesisAnalyticsV2ApplicationOutputOutput;
    };
    Type: "AWS::KinesisAnalyticsV2::ApplicationOutput";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsV2ApplicationOutputOutput {
    DestinationSchema: AWSKinesisAnalyticsV2ApplicationOutputDestinationSchema;
    KinesisFirehoseOutput?: AWSKinesisAnalyticsV2ApplicationOutputKinesisFirehoseOutput;
    KinesisStreamsOutput?: AWSKinesisAnalyticsV2ApplicationOutputKinesisStreamsOutput;
    LambdaOutput?: AWSKinesisAnalyticsV2ApplicationOutputLambdaOutput;
    Name?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationOutputDestinationSchema {
    RecordFormatType?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationOutputKinesisFirehoseOutput {
    ResourceARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationOutputKinesisStreamsOutput {
    ResourceARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationOutputLambdaOutput {
    ResourceARN: string;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationName: string;
        ReferenceDataSource: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceReferenceDataSource;
    };
    Type: "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceReferenceDataSource {
    ReferenceSchema: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceReferenceSchema;
    S3ReferenceDataSource?: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceS3ReferenceDataSource;
    TableName?: string;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceReferenceSchema {
    RecordColumns: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceRecordColumn[];
    RecordEncoding?: string;
    RecordFormat: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceRecordFormat;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceRecordColumn {
    Mapping?: string;
    Name: string;
    SqlType: string;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceRecordFormat {
    MappingParameters?: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceMappingParameters;
    RecordFormatType: string;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceMappingParameters {
    CSVMappingParameters?: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceCSVMappingParameters;
    JSONMappingParameters?: AWSKinesisAnalyticsV2ApplicationReferenceDataSourceJSONMappingParameters;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceCSVMappingParameters {
    RecordColumnDelimiter: string;
    RecordRowDelimiter: string;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceJSONMappingParameters {
    RecordRowPath: string;
}
export interface AWSKinesisAnalyticsV2ApplicationReferenceDataSourceS3ReferenceDataSource {
    BucketARN: string;
    FileKey: string;
}
export interface AWSKinesisFirehoseDeliveryStream {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AmazonopensearchserviceDestinationConfiguration?: AWSKinesisFirehoseDeliveryStreamAmazonopensearchserviceDestinationConfiguration;
        DeliveryStreamEncryptionConfigurationInput?: AWSKinesisFirehoseDeliveryStreamDeliveryStreamEncryptionConfigurationInput;
        DeliveryStreamName?: string;
        DeliveryStreamType?: string;
        ElasticsearchDestinationConfiguration?: AWSKinesisFirehoseDeliveryStreamElasticsearchDestinationConfiguration;
        ExtendedS3DestinationConfiguration?: AWSKinesisFirehoseDeliveryStreamExtendedS3DestinationConfiguration;
        HttpEndpointDestinationConfiguration?: AWSKinesisFirehoseDeliveryStreamHttpEndpointDestinationConfiguration;
        KinesisStreamSourceConfiguration?: AWSKinesisFirehoseDeliveryStreamKinesisStreamSourceConfiguration;
        RedshiftDestinationConfiguration?: AWSKinesisFirehoseDeliveryStreamRedshiftDestinationConfiguration;
        S3DestinationConfiguration?: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
        SplunkDestinationConfiguration?: AWSKinesisFirehoseDeliveryStreamSplunkDestinationConfiguration;
        Tags?: Tag[];
    };
    Type: "AWS::KinesisFirehose::DeliveryStream";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSKinesisFirehoseDeliveryStreamAmazonopensearchserviceDestinationConfiguration {
    BufferingHints?: AWSKinesisFirehoseDeliveryStreamAmazonopensearchserviceBufferingHints;
    CloudWatchLoggingOptions?: AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions;
    ClusterEndpoint?: string;
    DomainARN?: string;
    IndexName: string;
    IndexRotationPeriod?: string;
    ProcessingConfiguration?: AWSKinesisFirehoseDeliveryStreamProcessingConfiguration;
    RetryOptions?: AWSKinesisFirehoseDeliveryStreamAmazonopensearchserviceRetryOptions;
    RoleARN: string;
    S3BackupMode?: string;
    S3Configuration: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
    TypeName?: string;
    VpcConfiguration?: AWSKinesisFirehoseDeliveryStreamVpcConfiguration;
}
export interface AWSKinesisFirehoseDeliveryStreamAmazonopensearchserviceBufferingHints {
    IntervalInSeconds?: number;
    SizeInMBs?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions {
    Enabled?: boolean;
    LogGroupName?: string;
    LogStreamName?: string;
}
export interface AWSKinesisFirehoseDeliveryStreamProcessingConfiguration {
    Enabled?: boolean;
    Processors?: AWSKinesisFirehoseDeliveryStreamProcessor[];
}
export interface AWSKinesisFirehoseDeliveryStreamProcessor {
    Parameters?: AWSKinesisFirehoseDeliveryStreamProcessorParameter[];
    Type: string;
}
export interface AWSKinesisFirehoseDeliveryStreamProcessorParameter {
    ParameterName: string;
    ParameterValue: string;
}
export interface AWSKinesisFirehoseDeliveryStreamAmazonopensearchserviceRetryOptions {
    DurationInSeconds?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration {
    BucketARN: string;
    BufferingHints?: AWSKinesisFirehoseDeliveryStreamBufferingHints;
    CloudWatchLoggingOptions?: AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions;
    CompressionFormat?: string;
    EncryptionConfiguration?: AWSKinesisFirehoseDeliveryStreamEncryptionConfiguration;
    ErrorOutputPrefix?: string;
    Prefix?: string;
    RoleARN: string;
}
export interface AWSKinesisFirehoseDeliveryStreamBufferingHints {
    IntervalInSeconds?: number;
    SizeInMBs?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamEncryptionConfiguration {
    KMSEncryptionConfig?: AWSKinesisFirehoseDeliveryStreamKMSEncryptionConfig;
    NoEncryptionConfig?: string;
}
export interface AWSKinesisFirehoseDeliveryStreamKMSEncryptionConfig {
    AWSKMSKeyARN: string;
}
export interface AWSKinesisFirehoseDeliveryStreamVpcConfiguration {
    RoleARN: string;
    SecurityGroupIds: string[];
    SubnetIds: string[];
}
export interface AWSKinesisFirehoseDeliveryStreamDeliveryStreamEncryptionConfigurationInput {
    KeyARN?: string;
    KeyType: string;
}
export interface AWSKinesisFirehoseDeliveryStreamElasticsearchDestinationConfiguration {
    BufferingHints?: AWSKinesisFirehoseDeliveryStreamElasticsearchBufferingHints;
    CloudWatchLoggingOptions?: AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions;
    ClusterEndpoint?: string;
    DomainARN?: string;
    IndexName: string;
    IndexRotationPeriod?: string;
    ProcessingConfiguration?: AWSKinesisFirehoseDeliveryStreamProcessingConfiguration;
    RetryOptions?: AWSKinesisFirehoseDeliveryStreamElasticsearchRetryOptions;
    RoleARN: string;
    S3BackupMode?: string;
    S3Configuration: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
    TypeName?: string;
    VpcConfiguration?: AWSKinesisFirehoseDeliveryStreamVpcConfiguration;
}
export interface AWSKinesisFirehoseDeliveryStreamElasticsearchBufferingHints {
    IntervalInSeconds?: number;
    SizeInMBs?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamElasticsearchRetryOptions {
    DurationInSeconds?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamExtendedS3DestinationConfiguration {
    BucketARN: string;
    BufferingHints?: AWSKinesisFirehoseDeliveryStreamBufferingHints;
    CloudWatchLoggingOptions?: AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions;
    CompressionFormat?: string;
    DataFormatConversionConfiguration?: AWSKinesisFirehoseDeliveryStreamDataFormatConversionConfiguration;
    DynamicPartitioningConfiguration?: AWSKinesisFirehoseDeliveryStreamDynamicPartitioningConfiguration;
    EncryptionConfiguration?: AWSKinesisFirehoseDeliveryStreamEncryptionConfiguration;
    ErrorOutputPrefix?: string;
    Prefix?: string;
    ProcessingConfiguration?: AWSKinesisFirehoseDeliveryStreamProcessingConfiguration;
    RoleARN: string;
    S3BackupConfiguration?: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
    S3BackupMode?: string;
}
export interface AWSKinesisFirehoseDeliveryStreamDataFormatConversionConfiguration {
    Enabled?: boolean;
    InputFormatConfiguration?: AWSKinesisFirehoseDeliveryStreamInputFormatConfiguration;
    OutputFormatConfiguration?: AWSKinesisFirehoseDeliveryStreamOutputFormatConfiguration;
    SchemaConfiguration?: AWSKinesisFirehoseDeliveryStreamSchemaConfiguration;
}
export interface AWSKinesisFirehoseDeliveryStreamInputFormatConfiguration {
    Deserializer?: AWSKinesisFirehoseDeliveryStreamDeserializer;
}
export interface AWSKinesisFirehoseDeliveryStreamDeserializer {
    HiveJsonSerDe?: AWSKinesisFirehoseDeliveryStreamHiveJsonSerDe;
    OpenXJsonSerDe?: AWSKinesisFirehoseDeliveryStreamOpenXJsonSerDe;
}
export interface AWSKinesisFirehoseDeliveryStreamHiveJsonSerDe {
    TimestampFormats?: string[];
}
export interface AWSKinesisFirehoseDeliveryStreamOpenXJsonSerDe {
    CaseInsensitive?: boolean;
    ColumnToJsonKeyMappings?: {
        [k: string]: unknown;
    };
    ConvertDotsInJsonKeysToUnderscores?: boolean;
}
export interface AWSKinesisFirehoseDeliveryStreamOutputFormatConfiguration {
    Serializer?: AWSKinesisFirehoseDeliveryStreamSerializer;
}
export interface AWSKinesisFirehoseDeliveryStreamSerializer {
    OrcSerDe?: AWSKinesisFirehoseDeliveryStreamOrcSerDe;
    ParquetSerDe?: AWSKinesisFirehoseDeliveryStreamParquetSerDe;
}
export interface AWSKinesisFirehoseDeliveryStreamOrcSerDe {
    BlockSizeBytes?: number;
    BloomFilterColumns?: string[];
    BloomFilterFalsePositiveProbability?: number;
    Compression?: string;
    DictionaryKeyThreshold?: number;
    EnablePadding?: boolean;
    FormatVersion?: string;
    PaddingTolerance?: number;
    RowIndexStride?: number;
    StripeSizeBytes?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamParquetSerDe {
    BlockSizeBytes?: number;
    Compression?: string;
    EnableDictionaryCompression?: boolean;
    MaxPaddingBytes?: number;
    PageSizeBytes?: number;
    WriterVersion?: string;
}
export interface AWSKinesisFirehoseDeliveryStreamSchemaConfiguration {
    CatalogId?: string;
    DatabaseName?: string;
    Region?: string;
    RoleARN?: string;
    TableName?: string;
    VersionId?: string;
}
export interface AWSKinesisFirehoseDeliveryStreamDynamicPartitioningConfiguration {
    Enabled?: boolean;
    RetryOptions?: AWSKinesisFirehoseDeliveryStreamRetryOptions;
}
export interface AWSKinesisFirehoseDeliveryStreamRetryOptions {
    DurationInSeconds?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamHttpEndpointDestinationConfiguration {
    BufferingHints?: AWSKinesisFirehoseDeliveryStreamBufferingHints;
    CloudWatchLoggingOptions?: AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions;
    EndpointConfiguration: AWSKinesisFirehoseDeliveryStreamHttpEndpointConfiguration;
    ProcessingConfiguration?: AWSKinesisFirehoseDeliveryStreamProcessingConfiguration;
    RequestConfiguration?: AWSKinesisFirehoseDeliveryStreamHttpEndpointRequestConfiguration;
    RetryOptions?: AWSKinesisFirehoseDeliveryStreamRetryOptions;
    RoleARN?: string;
    S3BackupMode?: string;
    S3Configuration: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
}
export interface AWSKinesisFirehoseDeliveryStreamHttpEndpointConfiguration {
    AccessKey?: string;
    Name?: string;
    Url: string;
}
export interface AWSKinesisFirehoseDeliveryStreamHttpEndpointRequestConfiguration {
    CommonAttributes?: AWSKinesisFirehoseDeliveryStreamHttpEndpointCommonAttribute[];
    ContentEncoding?: string;
}
export interface AWSKinesisFirehoseDeliveryStreamHttpEndpointCommonAttribute {
    AttributeName: string;
    AttributeValue: string;
}
export interface AWSKinesisFirehoseDeliveryStreamKinesisStreamSourceConfiguration {
    KinesisStreamARN: string;
    RoleARN: string;
}
export interface AWSKinesisFirehoseDeliveryStreamRedshiftDestinationConfiguration {
    CloudWatchLoggingOptions?: AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions;
    ClusterJDBCURL: string;
    CopyCommand: AWSKinesisFirehoseDeliveryStreamCopyCommand;
    Password: string;
    ProcessingConfiguration?: AWSKinesisFirehoseDeliveryStreamProcessingConfiguration;
    RetryOptions?: AWSKinesisFirehoseDeliveryStreamRedshiftRetryOptions;
    RoleARN: string;
    S3BackupConfiguration?: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
    S3BackupMode?: string;
    S3Configuration: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
    Username: string;
}
export interface AWSKinesisFirehoseDeliveryStreamCopyCommand {
    CopyOptions?: string;
    DataTableColumns?: string;
    DataTableName: string;
}
export interface AWSKinesisFirehoseDeliveryStreamRedshiftRetryOptions {
    DurationInSeconds?: number;
}
export interface AWSKinesisFirehoseDeliveryStreamSplunkDestinationConfiguration {
    CloudWatchLoggingOptions?: AWSKinesisFirehoseDeliveryStreamCloudWatchLoggingOptions;
    HECAcknowledgmentTimeoutInSeconds?: number;
    HECEndpoint: string;
    HECEndpointType: string;
    HECToken: string;
    ProcessingConfiguration?: AWSKinesisFirehoseDeliveryStreamProcessingConfiguration;
    RetryOptions?: AWSKinesisFirehoseDeliveryStreamSplunkRetryOptions;
    S3BackupMode?: string;
    S3Configuration: AWSKinesisFirehoseDeliveryStreamS3DestinationConfiguration;
}
export interface AWSKinesisFirehoseDeliveryStreamSplunkRetryOptions {
    DurationInSeconds?: number;
}
export interface AWSLakeFormationDataLakeSettings {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Admins?: AWSLakeFormationDataLakeSettingsAdmins;
        TrustedResourceOwners?: string[];
    };
    Type: "AWS::LakeFormation::DataLakeSettings";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLakeFormationDataLakeSettingsAdmins {}
export interface AWSLakeFormationPermissions {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataLakePrincipal: AWSLakeFormationPermissionsDataLakePrincipal;
        Permissions?: string[];
        PermissionsWithGrantOption?: string[];
        Resource: AWSLakeFormationPermissionsResource;
    };
    Type: "AWS::LakeFormation::Permissions";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLakeFormationPermissionsDataLakePrincipal {
    DataLakePrincipalIdentifier?: string;
}
export interface AWSLakeFormationPermissionsResource {
    DataLocationResource?: AWSLakeFormationPermissionsDataLocationResource;
    DatabaseResource?: AWSLakeFormationPermissionsDatabaseResource;
    TableResource?: AWSLakeFormationPermissionsTableResource;
    TableWithColumnsResource?: AWSLakeFormationPermissionsTableWithColumnsResource;
}
export interface AWSLakeFormationPermissionsDataLocationResource {
    CatalogId?: string;
    S3Resource?: string;
}
export interface AWSLakeFormationPermissionsDatabaseResource {
    CatalogId?: string;
    Name?: string;
}
export interface AWSLakeFormationPermissionsTableResource {
    CatalogId?: string;
    DatabaseName?: string;
    Name?: string;
    TableWildcard?: AWSLakeFormationPermissionsTableWildcard;
}
export interface AWSLakeFormationPermissionsTableWildcard {}
export interface AWSLakeFormationPermissionsTableWithColumnsResource {
    CatalogId?: string;
    ColumnNames?: string[];
    ColumnWildcard?: AWSLakeFormationPermissionsColumnWildcard;
    DatabaseName?: string;
    Name?: string;
}
export interface AWSLakeFormationPermissionsColumnWildcard {
    ExcludedColumnNames?: string[];
}
export interface AWSLakeFormationResource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceArn: string;
        RoleArn?: string;
        UseServiceLinkedRole: boolean;
    };
    Type: "AWS::LakeFormation::Resource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaAlias {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        FunctionName: string;
        FunctionVersion: string;
        Name: string;
        ProvisionedConcurrencyConfig?: AWSLambdaAliasProvisionedConcurrencyConfiguration;
        RoutingConfig?: AWSLambdaAliasAliasRoutingConfiguration;
    };
    Type: "AWS::Lambda::Alias";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaAliasProvisionedConcurrencyConfiguration {
    ProvisionedConcurrentExecutions: number;
}
export interface AWSLambdaAliasAliasRoutingConfiguration {
    AdditionalVersionWeights: AWSLambdaAliasVersionWeight[];
}
export interface AWSLambdaAliasVersionWeight {
    FunctionVersion: string;
    FunctionWeight: number;
}
export interface AWSLambdaCodeSigningConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowedPublishers: AWSLambdaCodeSigningConfigAllowedPublishers;
        CodeSigningPolicies?: AWSLambdaCodeSigningConfigCodeSigningPolicies;
        Description?: string;
    };
    Type: "AWS::Lambda::CodeSigningConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaCodeSigningConfigAllowedPublishers {
    SigningProfileVersionArns: string[];
}
export interface AWSLambdaCodeSigningConfigCodeSigningPolicies {
    UntrustedArtifactOnDeployment: string;
}
export interface AWSLambdaEventInvokeConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DestinationConfig?: AWSLambdaEventInvokeConfigDestinationConfig;
        FunctionName: string;
        MaximumEventAgeInSeconds?: number;
        MaximumRetryAttempts?: number;
        Qualifier: string;
    };
    Type: "AWS::Lambda::EventInvokeConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaEventInvokeConfigDestinationConfig {
    OnFailure?: AWSLambdaEventInvokeConfigOnFailure;
    OnSuccess?: AWSLambdaEventInvokeConfigOnSuccess;
}
export interface AWSLambdaEventInvokeConfigOnFailure {
    Destination: string;
}
export interface AWSLambdaEventInvokeConfigOnSuccess {
    Destination: string;
}
export interface AWSLambdaEventSourceMapping {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BatchSize?: number;
        BisectBatchOnFunctionError?: boolean;
        DestinationConfig?: AWSLambdaEventSourceMappingDestinationConfig;
        Enabled?: boolean;
        EventSourceArn?: string;
        FunctionName: string;
        FunctionResponseTypes?: string[];
        MaximumBatchingWindowInSeconds?: number;
        MaximumRecordAgeInSeconds?: number;
        MaximumRetryAttempts?: number;
        ParallelizationFactor?: number;
        Queues?: string[];
        SelfManagedEventSource?: AWSLambdaEventSourceMappingSelfManagedEventSource;
        SourceAccessConfigurations?: AWSLambdaEventSourceMappingSourceAccessConfiguration[];
        StartingPosition?: string;
        StartingPositionTimestamp?: number;
        Topics?: string[];
        TumblingWindowInSeconds?: number;
    };
    Type: "AWS::Lambda::EventSourceMapping";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaEventSourceMappingDestinationConfig {
    OnFailure?: AWSLambdaEventSourceMappingOnFailure;
}
export interface AWSLambdaEventSourceMappingOnFailure {
    Destination?: string;
}
export interface AWSLambdaEventSourceMappingSelfManagedEventSource {
    Endpoints?: AWSLambdaEventSourceMappingEndpoints;
}
export interface AWSLambdaEventSourceMappingEndpoints {
    KafkaBootstrapServers?: string[];
}
export interface AWSLambdaEventSourceMappingSourceAccessConfiguration {
    Type?: string;
    URI?: string;
}
export interface AWSLambdaFunction {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Architectures?: string[];
        Code: AWSLambdaFunctionCode;
        CodeSigningConfigArn?: string;
        DeadLetterConfig?: AWSLambdaFunctionDeadLetterConfig;
        Description?: string;
        Environment?: AWSLambdaFunctionEnvironment;
        FileSystemConfigs?: AWSLambdaFunctionFileSystemConfig[];
        FunctionName?: string;
        Handler?: string;
        ImageConfig?: AWSLambdaFunctionImageConfig;
        KmsKeyArn?: string;
        Layers?: string[];
        MemorySize?: number;
        PackageType?: string;
        ReservedConcurrentExecutions?: number;
        Role: string;
        Runtime?: string;
        Tags?: Tag[];
        Timeout?: number;
        TracingConfig?: AWSLambdaFunctionTracingConfig;
        VpcConfig?: AWSLambdaFunctionVpcConfig;
    };
    Type: "AWS::Lambda::Function";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaFunctionCode {
    ImageUri?: string;
    S3Bucket?: string;
    S3Key?: string;
    S3ObjectVersion?: string;
    ZipFile?: string;
}
export interface AWSLambdaFunctionDeadLetterConfig {
    TargetArn?: string;
}
export interface AWSLambdaFunctionEnvironment {
    Variables?: {
        [k: string]: unknown;
    };
}
export interface AWSLambdaFunctionFileSystemConfig {
    Arn: string;
    LocalMountPath: string;
}
export interface AWSLambdaFunctionImageConfig {
    Command?: string[];
    EntryPoint?: string[];
    WorkingDirectory?: string;
}
export interface AWSLambdaFunctionTracingConfig {
    Mode?: string;
}
export interface AWSLambdaFunctionVpcConfig {
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSLambdaLayerVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CompatibleArchitectures?: string[];
        CompatibleRuntimes?: string[];
        Content: AWSLambdaLayerVersionContent;
        Description?: string;
        LayerName?: string;
        LicenseInfo?: string;
    };
    Type: "AWS::Lambda::LayerVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaLayerVersionContent {
    S3Bucket: string;
    S3Key: string;
    S3ObjectVersion?: string;
}
export interface AWSLambdaLayerVersionPermission {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Action: string;
        LayerVersionArn: string;
        OrganizationId?: string;
        Principal: string;
    };
    Type: "AWS::Lambda::LayerVersionPermission";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaPermission {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Action: string;
        EventSourceToken?: string;
        FunctionName: string;
        Principal: string;
        SourceAccount?: string;
        SourceArn?: string;
    };
    Type: "AWS::Lambda::Permission";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CodeSha256?: string;
        Description?: string;
        FunctionName: string;
        ProvisionedConcurrencyConfig?: AWSLambdaVersionProvisionedConcurrencyConfiguration;
    };
    Type: "AWS::Lambda::Version";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLambdaVersionProvisionedConcurrencyConfiguration {
    ProvisionedConcurrentExecutions: number;
}
export interface AWSLicenseManagerGrant {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AllowedOperations?: string[];
        GrantName?: string;
        HomeRegion?: string;
        LicenseArn?: string;
        Principals?: string[];
        Status?: string;
    };
    Type: "AWS::LicenseManager::Grant";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLicenseManagerLicense {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Beneficiary?: string;
        ConsumptionConfiguration: AWSLicenseManagerLicenseConsumptionConfiguration;
        Entitlements: AWSLicenseManagerLicenseEntitlement[];
        HomeRegion: string;
        Issuer: AWSLicenseManagerLicenseIssuerData;
        LicenseMetadata?: AWSLicenseManagerLicenseMetadata[];
        LicenseName: string;
        ProductName: string;
        ProductSKU?: string;
        Status?: string;
        Validity: AWSLicenseManagerLicenseValidityDateFormat;
    };
    Type: "AWS::LicenseManager::License";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLicenseManagerLicenseConsumptionConfiguration {
    BorrowConfiguration?: AWSLicenseManagerLicenseBorrowConfiguration;
    ProvisionalConfiguration?: AWSLicenseManagerLicenseProvisionalConfiguration;
    RenewType?: string;
}
export interface AWSLicenseManagerLicenseBorrowConfiguration {
    AllowEarlyCheckIn: boolean;
    MaxTimeToLiveInMinutes: number;
}
export interface AWSLicenseManagerLicenseProvisionalConfiguration {
    MaxTimeToLiveInMinutes: number;
}
export interface AWSLicenseManagerLicenseEntitlement {
    AllowCheckIn?: boolean;
    MaxCount?: number;
    Name: string;
    Overage?: boolean;
    Unit: string;
    Value?: string;
}
export interface AWSLicenseManagerLicenseIssuerData {
    Name: string;
    SignKey?: string;
}
export interface AWSLicenseManagerLicenseMetadata {
    Name: string;
    Value: string;
}
export interface AWSLicenseManagerLicenseValidityDateFormat {
    Begin: string;
    End: string;
}
export interface AWSLightsailDisk {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AddOns?: AWSLightsailDiskAddOn[];
        AvailabilityZone?: string;
        DiskName: string;
        SizeInGb: number;
        Tags?: Tag[];
    };
    Type: "AWS::Lightsail::Disk";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLightsailDiskAddOn {
    AddOnType: string;
    AutoSnapshotAddOnRequest?: AWSLightsailDiskAutoSnapshotAddOn;
    Status?: string;
}
export interface AWSLightsailDiskAutoSnapshotAddOn {
    SnapshotTimeOfDay?: string;
}
export interface AWSLightsailInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AddOns?: AWSLightsailInstanceAddOn[];
        AvailabilityZone?: string;
        BlueprintId: string;
        BundleId: string;
        Hardware?: AWSLightsailInstanceHardware;
        InstanceName: string;
        Location?: AWSLightsailInstanceLocation;
        Networking?: AWSLightsailInstanceNetworking;
        State?: AWSLightsailInstanceState;
        Tags?: Tag[];
    };
    Type: "AWS::Lightsail::Instance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLightsailInstanceAddOn {
    AddOnType: string;
    AutoSnapshotAddOnRequest?: AWSLightsailInstanceAutoSnapshotAddOn;
    Status?: string;
}
export interface AWSLightsailInstanceAutoSnapshotAddOn {
    SnapshotTimeOfDay?: string;
}
export interface AWSLightsailInstanceHardware {
    CpuCount?: number;
    Disks?: AWSLightsailInstanceDisk[];
    RamSizeInGb?: number;
}
export interface AWSLightsailInstanceDisk {
    AttachedTo?: string;
    AttachmentState?: string;
    DiskName: string;
    IOPS?: number;
    IsSystemDisk?: boolean;
    Path: string;
    SizeInGb?: string;
}
export interface AWSLightsailInstanceLocation {
    AvailabilityZone?: string;
    RegionName?: string;
}
export interface AWSLightsailInstanceNetworking {
    MonthlyTransfer?: {
        [k: string]: unknown;
    };
    Ports: AWSLightsailInstancePort[];
}
export interface AWSLightsailInstancePort {
    AccessDirection?: string;
    AccessFrom?: string;
    AccessType?: string;
    CidrListAliases?: string[];
    Cidrs?: string[];
    CommonName?: string;
    FromPort?: number;
    Ipv6Cidrs?: string[];
    Protocol?: string;
    ToPort?: number;
}
export interface AWSLightsailInstanceState {
    Code?: number;
    Name?: string;
}
export interface AWSLocationGeofenceCollection {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CollectionName: string;
        Description?: string;
        KmsKeyId?: string;
        PricingPlan: string;
        PricingPlanDataSource?: string;
    };
    Type: "AWS::Location::GeofenceCollection";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLocationMap {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Configuration: AWSLocationMapMapConfiguration;
        Description?: string;
        MapName: string;
        PricingPlan: string;
    };
    Type: "AWS::Location::Map";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLocationMapMapConfiguration {
    Style: string;
}
export interface AWSLocationPlaceIndex {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataSource: string;
        DataSourceConfiguration?: AWSLocationPlaceIndexDataSourceConfiguration;
        Description?: string;
        IndexName: string;
        PricingPlan: string;
    };
    Type: "AWS::Location::PlaceIndex";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLocationPlaceIndexDataSourceConfiguration {
    IntendedUse?: string;
}
export interface AWSLocationRouteCalculator {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CalculatorName: string;
        DataSource: string;
        Description?: string;
        PricingPlan: string;
    };
    Type: "AWS::Location::RouteCalculator";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLocationTracker {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        KmsKeyId?: string;
        PricingPlan: string;
        PricingPlanDataSource?: string;
        TrackerName: string;
    };
    Type: "AWS::Location::Tracker";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLocationTrackerConsumer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConsumerArn: string;
        TrackerName: string;
    };
    Type: "AWS::Location::TrackerConsumer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLogsDestination {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DestinationName: string;
        DestinationPolicy: string;
        RoleArn: string;
        TargetArn: string;
    };
    Type: "AWS::Logs::Destination";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLogsLogGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        KmsKeyId?: string;
        LogGroupName?: string;
        RetentionInDays?: number;
    };
    Type: "AWS::Logs::LogGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLogsLogStream {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        LogGroupName: string;
        LogStreamName?: string;
    };
    Type: "AWS::Logs::LogStream";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLogsMetricFilter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FilterPattern: string;
        LogGroupName: string;
        MetricTransformations: AWSLogsMetricFilterMetricTransformation[];
    };
    Type: "AWS::Logs::MetricFilter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLogsMetricFilterMetricTransformation {
    DefaultValue?: number;
    MetricName: string;
    MetricNamespace: string;
    MetricValue: string;
}
export interface AWSLogsQueryDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        LogGroupNames?: string[];
        Name: string;
        QueryString: string;
    };
    Type: "AWS::Logs::QueryDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLogsResourcePolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyDocument: string;
        PolicyName: string;
    };
    Type: "AWS::Logs::ResourcePolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLogsSubscriptionFilter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DestinationArn: string;
        FilterPattern: string;
        LogGroupName: string;
        RoleArn?: string;
    };
    Type: "AWS::Logs::SubscriptionFilter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLookoutEquipmentInferenceScheduler {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataDelayOffsetInMinutes?: number;
        DataInputConfiguration: {
            [k: string]: unknown;
        };
        DataOutputConfiguration: {
            [k: string]: unknown;
        };
        DataUploadFrequency: string;
        InferenceSchedulerName?: string;
        ModelName: string;
        RoleArn: string;
        ServerSideKmsKeyId?: string;
        Tags?: Tag[];
    };
    Type: "AWS::LookoutEquipment::InferenceScheduler";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLookoutMetricsAlert {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Action: AWSLookoutMetricsAlertAction;
        AlertDescription?: string;
        AlertName?: string;
        AlertSensitivityThreshold: number;
        AnomalyDetectorArn: string;
    };
    Type: "AWS::LookoutMetrics::Alert";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLookoutMetricsAlertAction {
    LambdaConfiguration?: AWSLookoutMetricsAlertLambdaConfiguration;
    SNSConfiguration?: AWSLookoutMetricsAlertSNSConfiguration;
}
export interface AWSLookoutMetricsAlertLambdaConfiguration {
    LambdaArn: string;
    RoleArn: string;
}
export interface AWSLookoutMetricsAlertSNSConfiguration {
    RoleArn: string;
    SnsTopicArn: string;
}
export interface AWSLookoutMetricsAnomalyDetector {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AnomalyDetectorConfig: AWSLookoutMetricsAnomalyDetectorAnomalyDetectorConfig;
        AnomalyDetectorDescription?: string;
        AnomalyDetectorName?: string;
        KmsKeyArn?: string;
        MetricSetList: AWSLookoutMetricsAnomalyDetectorMetricSet[];
    };
    Type: "AWS::LookoutMetrics::AnomalyDetector";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSLookoutMetricsAnomalyDetectorAnomalyDetectorConfig {
    AnomalyDetectorFrequency: string;
}
export interface AWSLookoutMetricsAnomalyDetectorMetricSet {
    DimensionList?: string[];
    MetricList: AWSLookoutMetricsAnomalyDetectorMetric[];
    MetricSetDescription?: string;
    MetricSetFrequency?: string;
    MetricSetName: string;
    MetricSource: AWSLookoutMetricsAnomalyDetectorMetricSource;
    Offset?: number;
    TimestampColumn?: AWSLookoutMetricsAnomalyDetectorTimestampColumn;
    Timezone?: string;
}
export interface AWSLookoutMetricsAnomalyDetectorMetric {
    AggregationFunction: string;
    MetricName: string;
    Namespace?: string;
}
export interface AWSLookoutMetricsAnomalyDetectorMetricSource {
    AppFlowConfig?: AWSLookoutMetricsAnomalyDetectorAppFlowConfig;
    CloudwatchConfig?: AWSLookoutMetricsAnomalyDetectorCloudwatchConfig;
    RDSSourceConfig?: AWSLookoutMetricsAnomalyDetectorRDSSourceConfig;
    RedshiftSourceConfig?: AWSLookoutMetricsAnomalyDetectorRedshiftSourceConfig;
    S3SourceConfig?: AWSLookoutMetricsAnomalyDetectorS3SourceConfig;
}
export interface AWSLookoutMetricsAnomalyDetectorAppFlowConfig {
    FlowName: string;
    RoleArn: string;
}
export interface AWSLookoutMetricsAnomalyDetectorCloudwatchConfig {
    RoleArn: string;
}
export interface AWSLookoutMetricsAnomalyDetectorRDSSourceConfig {
    DBInstanceIdentifier: string;
    DatabaseHost: string;
    DatabaseName: string;
    DatabasePort: number;
    RoleArn: string;
    SecretManagerArn: string;
    TableName: string;
    VpcConfiguration: AWSLookoutMetricsAnomalyDetectorVpcConfiguration;
}
export interface AWSLookoutMetricsAnomalyDetectorVpcConfiguration {
    SecurityGroupIdList: string[];
    SubnetIdList: string[];
}
export interface AWSLookoutMetricsAnomalyDetectorRedshiftSourceConfig {
    ClusterIdentifier: string;
    DatabaseHost: string;
    DatabaseName: string;
    DatabasePort: number;
    RoleArn: string;
    SecretManagerArn: string;
    TableName: string;
    VpcConfiguration: AWSLookoutMetricsAnomalyDetectorVpcConfiguration;
}
export interface AWSLookoutMetricsAnomalyDetectorS3SourceConfig {
    FileFormatDescriptor: AWSLookoutMetricsAnomalyDetectorFileFormatDescriptor;
    HistoricalDataPathList?: string[];
    RoleArn: string;
    TemplatedPathList?: string[];
}
export interface AWSLookoutMetricsAnomalyDetectorFileFormatDescriptor {
    CsvFormatDescriptor?: AWSLookoutMetricsAnomalyDetectorCsvFormatDescriptor;
    JsonFormatDescriptor?: AWSLookoutMetricsAnomalyDetectorJsonFormatDescriptor;
}
export interface AWSLookoutMetricsAnomalyDetectorCsvFormatDescriptor {
    Charset?: string;
    ContainsHeader?: boolean;
    Delimiter?: string;
    FileCompression?: string;
    HeaderList?: string[];
    QuoteSymbol?: string;
}
export interface AWSLookoutMetricsAnomalyDetectorJsonFormatDescriptor {
    Charset?: string;
    FileCompression?: string;
}
export interface AWSLookoutMetricsAnomalyDetectorTimestampColumn {
    ColumnFormat?: string;
    ColumnName?: string;
}
export interface AWSLookoutVisionProject {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ProjectName: string;
    };
    Type: "AWS::LookoutVision::Project";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMSKCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BrokerNodeGroupInfo: AWSMSKClusterBrokerNodeGroupInfo;
        ClientAuthentication?: AWSMSKClusterClientAuthentication;
        ClusterName: string;
        ConfigurationInfo?: AWSMSKClusterConfigurationInfo;
        EncryptionInfo?: AWSMSKClusterEncryptionInfo;
        EnhancedMonitoring?: string;
        KafkaVersion: string;
        LoggingInfo?: AWSMSKClusterLoggingInfo;
        NumberOfBrokerNodes: number;
        OpenMonitoring?: AWSMSKClusterOpenMonitoring;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::MSK::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMSKClusterBrokerNodeGroupInfo {
    BrokerAZDistribution?: string;
    ClientSubnets: string[];
    InstanceType: string;
    SecurityGroups?: string[];
    StorageInfo?: AWSMSKClusterStorageInfo;
}
export interface AWSMSKClusterStorageInfo {
    EBSStorageInfo?: AWSMSKClusterEBSStorageInfo;
}
export interface AWSMSKClusterEBSStorageInfo {
    VolumeSize?: number;
}
export interface AWSMSKClusterClientAuthentication {
    Sasl?: AWSMSKClusterSasl;
    Tls?: AWSMSKClusterTls;
    Unauthenticated?: AWSMSKClusterUnauthenticated;
}
export interface AWSMSKClusterSasl {
    Iam?: AWSMSKClusterIam;
    Scram?: AWSMSKClusterScram;
}
export interface AWSMSKClusterIam {
    Enabled: boolean;
}
export interface AWSMSKClusterScram {
    Enabled: boolean;
}
export interface AWSMSKClusterTls {
    CertificateAuthorityArnList?: string[];
    Enabled?: boolean;
}
export interface AWSMSKClusterUnauthenticated {
    Enabled: boolean;
}
export interface AWSMSKClusterConfigurationInfo {
    Arn: string;
    Revision: number;
}
export interface AWSMSKClusterEncryptionInfo {
    EncryptionAtRest?: AWSMSKClusterEncryptionAtRest;
    EncryptionInTransit?: AWSMSKClusterEncryptionInTransit;
}
export interface AWSMSKClusterEncryptionAtRest {
    DataVolumeKMSKeyId: string;
}
export interface AWSMSKClusterEncryptionInTransit {
    ClientBroker?: string;
    InCluster?: boolean;
}
export interface AWSMSKClusterLoggingInfo {
    BrokerLogs: AWSMSKClusterBrokerLogs;
}
export interface AWSMSKClusterBrokerLogs {
    CloudWatchLogs?: AWSMSKClusterCloudWatchLogs;
    Firehose?: AWSMSKClusterFirehose;
    S3?: AWSMSKClusterS3;
}
export interface AWSMSKClusterCloudWatchLogs {
    Enabled: boolean;
    LogGroup?: string;
}
export interface AWSMSKClusterFirehose {
    DeliveryStream?: string;
    Enabled: boolean;
}
export interface AWSMSKClusterS3 {
    Bucket?: string;
    Enabled: boolean;
    Prefix?: string;
}
export interface AWSMSKClusterOpenMonitoring {
    Prometheus: AWSMSKClusterPrometheus;
}
export interface AWSMSKClusterPrometheus {
    JmxExporter?: AWSMSKClusterJmxExporter;
    NodeExporter?: AWSMSKClusterNodeExporter;
}
export interface AWSMSKClusterJmxExporter {
    EnabledInBroker: boolean;
}
export interface AWSMSKClusterNodeExporter {
    EnabledInBroker: boolean;
}
export interface AWSMWAAEnvironment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AirflowConfigurationOptions?: {
            [k: string]: unknown;
        };
        AirflowVersion?: string;
        DagS3Path?: string;
        EnvironmentClass?: string;
        ExecutionRoleArn?: string;
        KmsKey?: string;
        LoggingConfiguration?: AWSMWAAEnvironmentLoggingConfiguration;
        MaxWorkers?: number;
        MinWorkers?: number;
        Name: string;
        NetworkConfiguration?: AWSMWAAEnvironmentNetworkConfiguration;
        PluginsS3ObjectVersion?: string;
        PluginsS3Path?: string;
        RequirementsS3ObjectVersion?: string;
        RequirementsS3Path?: string;
        Schedulers?: number;
        SourceBucketArn?: string;
        Tags?: AWSMWAAEnvironmentTagMap;
        WebserverAccessMode?: string;
        WeeklyMaintenanceWindowStart?: string;
    };
    Type: "AWS::MWAA::Environment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMWAAEnvironmentLoggingConfiguration {
    DagProcessingLogs?: AWSMWAAEnvironmentModuleLoggingConfiguration;
    SchedulerLogs?: AWSMWAAEnvironmentModuleLoggingConfiguration;
    TaskLogs?: AWSMWAAEnvironmentModuleLoggingConfiguration;
    WebserverLogs?: AWSMWAAEnvironmentModuleLoggingConfiguration;
    WorkerLogs?: AWSMWAAEnvironmentModuleLoggingConfiguration;
}
export interface AWSMWAAEnvironmentModuleLoggingConfiguration {
    CloudWatchLogGroupArn?: string;
    Enabled?: boolean;
    LogLevel?: string;
}
export interface AWSMWAAEnvironmentNetworkConfiguration {
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSMWAAEnvironmentTagMap {}
export interface AWSMacieCustomDataIdentifier {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        IgnoreWords?: string[];
        Keywords?: string[];
        MaximumMatchDistance?: number;
        Name: string;
        Regex: string;
    };
    Type: "AWS::Macie::CustomDataIdentifier";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMacieFindingsFilter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Action?: string;
        Description?: string;
        FindingCriteria: AWSMacieFindingsFilterFindingCriteria;
        Name: string;
        Position?: number;
    };
    Type: "AWS::Macie::FindingsFilter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMacieFindingsFilterFindingCriteria {
    Criterion?: AWSMacieFindingsFilterCriterion;
}
export interface AWSMacieFindingsFilterCriterion {}
export interface AWSMacieSession {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        FindingPublishingFrequency?: string;
        Status?: string;
    };
    Type: "AWS::Macie::Session";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSManagedBlockchainMember {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InvitationId?: string;
        MemberConfiguration: AWSManagedBlockchainMemberMemberConfiguration;
        NetworkConfiguration?: AWSManagedBlockchainMemberNetworkConfiguration;
        NetworkId?: string;
    };
    Type: "AWS::ManagedBlockchain::Member";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSManagedBlockchainMemberMemberConfiguration {
    Description?: string;
    MemberFrameworkConfiguration?: AWSManagedBlockchainMemberMemberFrameworkConfiguration;
    Name: string;
}
export interface AWSManagedBlockchainMemberMemberFrameworkConfiguration {
    MemberFabricConfiguration?: AWSManagedBlockchainMemberMemberFabricConfiguration;
}
export interface AWSManagedBlockchainMemberMemberFabricConfiguration {
    AdminPassword: string;
    AdminUsername: string;
}
export interface AWSManagedBlockchainMemberNetworkConfiguration {
    Description?: string;
    Framework: string;
    FrameworkVersion: string;
    Name: string;
    NetworkFrameworkConfiguration?: AWSManagedBlockchainMemberNetworkFrameworkConfiguration;
    VotingPolicy: AWSManagedBlockchainMemberVotingPolicy;
}
export interface AWSManagedBlockchainMemberNetworkFrameworkConfiguration {
    NetworkFabricConfiguration?: AWSManagedBlockchainMemberNetworkFabricConfiguration;
}
export interface AWSManagedBlockchainMemberNetworkFabricConfiguration {
    Edition: string;
}
export interface AWSManagedBlockchainMemberVotingPolicy {
    ApprovalThresholdPolicy?: AWSManagedBlockchainMemberApprovalThresholdPolicy;
}
export interface AWSManagedBlockchainMemberApprovalThresholdPolicy {
    ProposalDurationInHours?: number;
    ThresholdComparator?: string;
    ThresholdPercentage?: number;
}
export interface AWSManagedBlockchainNode {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MemberId?: string;
        NetworkId: string;
        NodeConfiguration: AWSManagedBlockchainNodeNodeConfiguration;
    };
    Type: "AWS::ManagedBlockchain::Node";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSManagedBlockchainNodeNodeConfiguration {
    AvailabilityZone: string;
    InstanceType: string;
}
export interface AWSMediaConnectFlow {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AvailabilityZone?: string;
        Name: string;
        Source: AWSMediaConnectFlowSource;
        SourceFailoverConfig?: AWSMediaConnectFlowFailoverConfig;
    };
    Type: "AWS::MediaConnect::Flow";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaConnectFlowSource {
    Decryption?: AWSMediaConnectFlowEncryption;
    Description?: string;
    EntitlementArn?: string;
    IngestIp?: string;
    IngestPort?: number;
    MaxBitrate?: number;
    MaxLatency?: number;
    MinLatency?: number;
    Name?: string;
    Protocol?: string;
    SourceArn?: string;
    SourceIngestPort?: string;
    StreamId?: string;
    VpcInterfaceName?: string;
    WhitelistCidr?: string;
}
export interface AWSMediaConnectFlowEncryption {
    Algorithm?: string;
    ConstantInitializationVector?: string;
    DeviceId?: string;
    KeyType?: string;
    Region?: string;
    ResourceId?: string;
    RoleArn: string;
    SecretArn?: string;
    Url?: string;
}
export interface AWSMediaConnectFlowFailoverConfig {
    RecoveryWindow?: number;
    State?: string;
}
export interface AWSMediaConnectFlowEntitlement {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataTransferSubscriberFeePercent?: number;
        Description: string;
        Encryption?: AWSMediaConnectFlowEntitlementEncryption;
        EntitlementStatus?: string;
        FlowArn: string;
        Name: string;
        Subscribers: string[];
    };
    Type: "AWS::MediaConnect::FlowEntitlement";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaConnectFlowEntitlementEncryption {
    Algorithm: string;
    ConstantInitializationVector?: string;
    DeviceId?: string;
    KeyType?: string;
    Region?: string;
    ResourceId?: string;
    RoleArn: string;
    SecretArn?: string;
    Url?: string;
}
export interface AWSMediaConnectFlowOutput {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CidrAllowList?: string[];
        Description?: string;
        Destination?: string;
        Encryption?: AWSMediaConnectFlowOutputEncryption;
        FlowArn: string;
        MaxLatency?: number;
        MinLatency?: number;
        Name?: string;
        Port?: number;
        Protocol: string;
        RemoteId?: string;
        SmoothingLatency?: number;
        StreamId?: string;
        VpcInterfaceAttachment?: AWSMediaConnectFlowOutputVpcInterfaceAttachment;
    };
    Type: "AWS::MediaConnect::FlowOutput";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaConnectFlowOutputEncryption {
    Algorithm?: string;
    KeyType?: string;
    RoleArn: string;
    SecretArn: string;
}
export interface AWSMediaConnectFlowOutputVpcInterfaceAttachment {
    VpcInterfaceName?: string;
}
export interface AWSMediaConnectFlowSource1 {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Decryption?: AWSMediaConnectFlowSourceEncryption;
        Description: string;
        EntitlementArn?: string;
        FlowArn?: string;
        IngestPort?: number;
        MaxBitrate?: number;
        MaxLatency?: number;
        Name: string;
        Protocol?: string;
        StreamId?: string;
        VpcInterfaceName?: string;
        WhitelistCidr?: string;
    };
    Type: "AWS::MediaConnect::FlowSource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaConnectFlowSourceEncryption {
    Algorithm: string;
    ConstantInitializationVector?: string;
    DeviceId?: string;
    KeyType?: string;
    Region?: string;
    ResourceId?: string;
    RoleArn: string;
    SecretArn?: string;
    Url?: string;
}
export interface AWSMediaConnectFlowVpcInterface {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FlowArn: string;
        Name: string;
        RoleArn: string;
        SecurityGroupIds: string[];
        SubnetId: string;
    };
    Type: "AWS::MediaConnect::FlowVpcInterface";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaConvertJobTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccelerationSettings?: AWSMediaConvertJobTemplateAccelerationSettings;
        Category?: string;
        Description?: string;
        HopDestinations?: AWSMediaConvertJobTemplateHopDestination[];
        Name?: string;
        Priority?: number;
        Queue?: string;
        SettingsJson: {
            [k: string]: unknown;
        };
        StatusUpdateInterval?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::MediaConvert::JobTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaConvertJobTemplateAccelerationSettings {
    Mode: string;
}
export interface AWSMediaConvertJobTemplateHopDestination {
    Priority?: number;
    Queue?: string;
    WaitMinutes?: number;
}
export interface AWSMediaConvertPreset {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Category?: string;
        Description?: string;
        Name?: string;
        SettingsJson: {
            [k: string]: unknown;
        };
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::MediaConvert::Preset";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaConvertQueue {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        Name?: string;
        PricingPlan?: string;
        Status?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::MediaConvert::Queue";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaLiveChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        CdiInputSpecification?: AWSMediaLiveChannelCdiInputSpecification;
        ChannelClass?: string;
        Destinations?: AWSMediaLiveChannelOutputDestination[];
        EncoderSettings?: AWSMediaLiveChannelEncoderSettings;
        InputAttachments?: AWSMediaLiveChannelInputAttachment[];
        InputSpecification?: AWSMediaLiveChannelInputSpecification;
        LogLevel?: string;
        Name?: string;
        RoleArn?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Vpc?: AWSMediaLiveChannelVpcOutputSettings;
    };
    Type: "AWS::MediaLive::Channel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaLiveChannelCdiInputSpecification {
    Resolution?: string;
}
export interface AWSMediaLiveChannelOutputDestination {
    Id?: string;
    MediaPackageSettings?: AWSMediaLiveChannelMediaPackageOutputDestinationSettings[];
    MultiplexSettings?: AWSMediaLiveChannelMultiplexProgramChannelDestinationSettings;
    Settings?: AWSMediaLiveChannelOutputDestinationSettings[];
}
export interface AWSMediaLiveChannelMediaPackageOutputDestinationSettings {
    ChannelId?: string;
}
export interface AWSMediaLiveChannelMultiplexProgramChannelDestinationSettings {
    MultiplexId?: string;
    ProgramName?: string;
}
export interface AWSMediaLiveChannelOutputDestinationSettings {
    PasswordParam?: string;
    StreamName?: string;
    Url?: string;
    Username?: string;
}
export interface AWSMediaLiveChannelEncoderSettings {
    AudioDescriptions?: AWSMediaLiveChannelAudioDescription[];
    AvailBlanking?: AWSMediaLiveChannelAvailBlanking;
    AvailConfiguration?: AWSMediaLiveChannelAvailConfiguration;
    BlackoutSlate?: AWSMediaLiveChannelBlackoutSlate;
    CaptionDescriptions?: AWSMediaLiveChannelCaptionDescription[];
    FeatureActivations?: AWSMediaLiveChannelFeatureActivations;
    GlobalConfiguration?: AWSMediaLiveChannelGlobalConfiguration;
    MotionGraphicsConfiguration?: AWSMediaLiveChannelMotionGraphicsConfiguration;
    NielsenConfiguration?: AWSMediaLiveChannelNielsenConfiguration;
    OutputGroups?: AWSMediaLiveChannelOutputGroup[];
    TimecodeConfig?: AWSMediaLiveChannelTimecodeConfig;
    VideoDescriptions?: AWSMediaLiveChannelVideoDescription[];
}
export interface AWSMediaLiveChannelAudioDescription {
    AudioNormalizationSettings?: AWSMediaLiveChannelAudioNormalizationSettings;
    AudioSelectorName?: string;
    AudioType?: string;
    AudioTypeControl?: string;
    CodecSettings?: AWSMediaLiveChannelAudioCodecSettings;
    LanguageCode?: string;
    LanguageCodeControl?: string;
    Name?: string;
    RemixSettings?: AWSMediaLiveChannelRemixSettings;
    StreamName?: string;
}
export interface AWSMediaLiveChannelAudioNormalizationSettings {
    Algorithm?: string;
    AlgorithmControl?: string;
    TargetLkfs?: number;
}
export interface AWSMediaLiveChannelAudioCodecSettings {
    AacSettings?: AWSMediaLiveChannelAacSettings;
    Ac3Settings?: AWSMediaLiveChannelAc3Settings;
    Eac3Settings?: AWSMediaLiveChannelEac3Settings;
    Mp2Settings?: AWSMediaLiveChannelMp2Settings;
    PassThroughSettings?: AWSMediaLiveChannelPassThroughSettings;
    WavSettings?: AWSMediaLiveChannelWavSettings;
}
export interface AWSMediaLiveChannelAacSettings {
    Bitrate?: number;
    CodingMode?: string;
    InputType?: string;
    Profile?: string;
    RateControlMode?: string;
    RawFormat?: string;
    SampleRate?: number;
    Spec?: string;
    VbrQuality?: string;
}
export interface AWSMediaLiveChannelAc3Settings {
    Bitrate?: number;
    BitstreamMode?: string;
    CodingMode?: string;
    Dialnorm?: number;
    DrcProfile?: string;
    LfeFilter?: string;
    MetadataControl?: string;
}
export interface AWSMediaLiveChannelEac3Settings {
    AttenuationControl?: string;
    Bitrate?: number;
    BitstreamMode?: string;
    CodingMode?: string;
    DcFilter?: string;
    Dialnorm?: number;
    DrcLine?: string;
    DrcRf?: string;
    LfeControl?: string;
    LfeFilter?: string;
    LoRoCenterMixLevel?: number;
    LoRoSurroundMixLevel?: number;
    LtRtCenterMixLevel?: number;
    LtRtSurroundMixLevel?: number;
    MetadataControl?: string;
    PassthroughControl?: string;
    PhaseControl?: string;
    StereoDownmix?: string;
    SurroundExMode?: string;
    SurroundMode?: string;
}
export interface AWSMediaLiveChannelMp2Settings {
    Bitrate?: number;
    CodingMode?: string;
    SampleRate?: number;
}
export interface AWSMediaLiveChannelPassThroughSettings {}
export interface AWSMediaLiveChannelWavSettings {
    BitDepth?: number;
    CodingMode?: string;
    SampleRate?: number;
}
export interface AWSMediaLiveChannelRemixSettings {
    ChannelMappings?: AWSMediaLiveChannelAudioChannelMapping[];
    ChannelsIn?: number;
    ChannelsOut?: number;
}
export interface AWSMediaLiveChannelAudioChannelMapping {
    InputChannelLevels?: AWSMediaLiveChannelInputChannelLevel[];
    OutputChannel?: number;
}
export interface AWSMediaLiveChannelInputChannelLevel {
    Gain?: number;
    InputChannel?: number;
}
export interface AWSMediaLiveChannelAvailBlanking {
    AvailBlankingImage?: AWSMediaLiveChannelInputLocation;
    State?: string;
}
export interface AWSMediaLiveChannelInputLocation {
    PasswordParam?: string;
    Uri?: string;
    Username?: string;
}
export interface AWSMediaLiveChannelAvailConfiguration {
    AvailSettings?: AWSMediaLiveChannelAvailSettings;
}
export interface AWSMediaLiveChannelAvailSettings {
    Scte35SpliceInsert?: AWSMediaLiveChannelScte35SpliceInsert;
    Scte35TimeSignalApos?: AWSMediaLiveChannelScte35TimeSignalApos;
}
export interface AWSMediaLiveChannelScte35SpliceInsert {
    AdAvailOffset?: number;
    NoRegionalBlackoutFlag?: string;
    WebDeliveryAllowedFlag?: string;
}
export interface AWSMediaLiveChannelScte35TimeSignalApos {
    AdAvailOffset?: number;
    NoRegionalBlackoutFlag?: string;
    WebDeliveryAllowedFlag?: string;
}
export interface AWSMediaLiveChannelBlackoutSlate {
    BlackoutSlateImage?: AWSMediaLiveChannelInputLocation;
    NetworkEndBlackout?: string;
    NetworkEndBlackoutImage?: AWSMediaLiveChannelInputLocation;
    NetworkId?: string;
    State?: string;
}
export interface AWSMediaLiveChannelCaptionDescription {
    CaptionSelectorName?: string;
    DestinationSettings?: AWSMediaLiveChannelCaptionDestinationSettings;
    LanguageCode?: string;
    LanguageDescription?: string;
    Name?: string;
}
export interface AWSMediaLiveChannelCaptionDestinationSettings {
    AribDestinationSettings?: AWSMediaLiveChannelAribDestinationSettings;
    BurnInDestinationSettings?: AWSMediaLiveChannelBurnInDestinationSettings;
    DvbSubDestinationSettings?: AWSMediaLiveChannelDvbSubDestinationSettings;
    EbuTtDDestinationSettings?: AWSMediaLiveChannelEbuTtDDestinationSettings;
    EmbeddedDestinationSettings?: AWSMediaLiveChannelEmbeddedDestinationSettings;
    EmbeddedPlusScte20DestinationSettings?: AWSMediaLiveChannelEmbeddedPlusScte20DestinationSettings;
    RtmpCaptionInfoDestinationSettings?: AWSMediaLiveChannelRtmpCaptionInfoDestinationSettings;
    Scte20PlusEmbeddedDestinationSettings?: AWSMediaLiveChannelScte20PlusEmbeddedDestinationSettings;
    Scte27DestinationSettings?: AWSMediaLiveChannelScte27DestinationSettings;
    SmpteTtDestinationSettings?: AWSMediaLiveChannelSmpteTtDestinationSettings;
    TeletextDestinationSettings?: AWSMediaLiveChannelTeletextDestinationSettings;
    TtmlDestinationSettings?: AWSMediaLiveChannelTtmlDestinationSettings;
    WebvttDestinationSettings?: AWSMediaLiveChannelWebvttDestinationSettings;
}
export interface AWSMediaLiveChannelAribDestinationSettings {}
export interface AWSMediaLiveChannelBurnInDestinationSettings {
    Alignment?: string;
    BackgroundColor?: string;
    BackgroundOpacity?: number;
    Font?: AWSMediaLiveChannelInputLocation;
    FontColor?: string;
    FontOpacity?: number;
    FontResolution?: number;
    FontSize?: string;
    OutlineColor?: string;
    OutlineSize?: number;
    ShadowColor?: string;
    ShadowOpacity?: number;
    ShadowXOffset?: number;
    ShadowYOffset?: number;
    TeletextGridControl?: string;
    XPosition?: number;
    YPosition?: number;
}
export interface AWSMediaLiveChannelDvbSubDestinationSettings {
    Alignment?: string;
    BackgroundColor?: string;
    BackgroundOpacity?: number;
    Font?: AWSMediaLiveChannelInputLocation;
    FontColor?: string;
    FontOpacity?: number;
    FontResolution?: number;
    FontSize?: string;
    OutlineColor?: string;
    OutlineSize?: number;
    ShadowColor?: string;
    ShadowOpacity?: number;
    ShadowXOffset?: number;
    ShadowYOffset?: number;
    TeletextGridControl?: string;
    XPosition?: number;
    YPosition?: number;
}
export interface AWSMediaLiveChannelEbuTtDDestinationSettings {
    CopyrightHolder?: string;
    FillLineGap?: string;
    FontFamily?: string;
    StyleControl?: string;
}
export interface AWSMediaLiveChannelEmbeddedDestinationSettings {}
export interface AWSMediaLiveChannelEmbeddedPlusScte20DestinationSettings {}
export interface AWSMediaLiveChannelRtmpCaptionInfoDestinationSettings {}
export interface AWSMediaLiveChannelScte20PlusEmbeddedDestinationSettings {}
export interface AWSMediaLiveChannelScte27DestinationSettings {}
export interface AWSMediaLiveChannelSmpteTtDestinationSettings {}
export interface AWSMediaLiveChannelTeletextDestinationSettings {}
export interface AWSMediaLiveChannelTtmlDestinationSettings {
    StyleControl?: string;
}
export interface AWSMediaLiveChannelWebvttDestinationSettings {}
export interface AWSMediaLiveChannelFeatureActivations {
    InputPrepareScheduleActions?: string;
}
export interface AWSMediaLiveChannelGlobalConfiguration {
    InitialAudioGain?: number;
    InputEndAction?: string;
    InputLossBehavior?: AWSMediaLiveChannelInputLossBehavior;
    OutputLockingMode?: string;
    OutputTimingSource?: string;
    SupportLowFramerateInputs?: string;
}
export interface AWSMediaLiveChannelInputLossBehavior {
    BlackFrameMsec?: number;
    InputLossImageColor?: string;
    InputLossImageSlate?: AWSMediaLiveChannelInputLocation;
    InputLossImageType?: string;
    RepeatFrameMsec?: number;
}
export interface AWSMediaLiveChannelMotionGraphicsConfiguration {
    MotionGraphicsInsertion?: string;
    MotionGraphicsSettings?: AWSMediaLiveChannelMotionGraphicsSettings;
}
export interface AWSMediaLiveChannelMotionGraphicsSettings {
    HtmlMotionGraphicsSettings?: AWSMediaLiveChannelHtmlMotionGraphicsSettings;
}
export interface AWSMediaLiveChannelHtmlMotionGraphicsSettings {}
export interface AWSMediaLiveChannelNielsenConfiguration {
    DistributorId?: string;
    NielsenPcmToId3Tagging?: string;
}
export interface AWSMediaLiveChannelOutputGroup {
    Name?: string;
    OutputGroupSettings?: AWSMediaLiveChannelOutputGroupSettings;
    Outputs?: AWSMediaLiveChannelOutput[];
}
export interface AWSMediaLiveChannelOutputGroupSettings {
    ArchiveGroupSettings?: AWSMediaLiveChannelArchiveGroupSettings;
    FrameCaptureGroupSettings?: AWSMediaLiveChannelFrameCaptureGroupSettings;
    HlsGroupSettings?: AWSMediaLiveChannelHlsGroupSettings;
    MediaPackageGroupSettings?: AWSMediaLiveChannelMediaPackageGroupSettings;
    MsSmoothGroupSettings?: AWSMediaLiveChannelMsSmoothGroupSettings;
    MultiplexGroupSettings?: AWSMediaLiveChannelMultiplexGroupSettings;
    RtmpGroupSettings?: AWSMediaLiveChannelRtmpGroupSettings;
    UdpGroupSettings?: AWSMediaLiveChannelUdpGroupSettings;
}
export interface AWSMediaLiveChannelArchiveGroupSettings {
    ArchiveCdnSettings?: AWSMediaLiveChannelArchiveCdnSettings;
    Destination?: AWSMediaLiveChannelOutputLocationRef;
    RolloverInterval?: number;
}
export interface AWSMediaLiveChannelArchiveCdnSettings {
    ArchiveS3Settings?: AWSMediaLiveChannelArchiveS3Settings;
}
export interface AWSMediaLiveChannelArchiveS3Settings {
    CannedAcl?: string;
}
export interface AWSMediaLiveChannelOutputLocationRef {
    DestinationRefId?: string;
}
export interface AWSMediaLiveChannelFrameCaptureGroupSettings {
    Destination?: AWSMediaLiveChannelOutputLocationRef;
    FrameCaptureCdnSettings?: AWSMediaLiveChannelFrameCaptureCdnSettings;
}
export interface AWSMediaLiveChannelFrameCaptureCdnSettings {
    FrameCaptureS3Settings?: AWSMediaLiveChannelFrameCaptureS3Settings;
}
export interface AWSMediaLiveChannelFrameCaptureS3Settings {
    CannedAcl?: string;
}
export interface AWSMediaLiveChannelHlsGroupSettings {
    AdMarkers?: string[];
    BaseUrlContent?: string;
    BaseUrlContent1?: string;
    BaseUrlManifest?: string;
    BaseUrlManifest1?: string;
    CaptionLanguageMappings?: AWSMediaLiveChannelCaptionLanguageMapping[];
    CaptionLanguageSetting?: string;
    ClientCache?: string;
    CodecSpecification?: string;
    ConstantIv?: string;
    Destination?: AWSMediaLiveChannelOutputLocationRef;
    DirectoryStructure?: string;
    DiscontinuityTags?: string;
    EncryptionType?: string;
    HlsCdnSettings?: AWSMediaLiveChannelHlsCdnSettings;
    HlsId3SegmentTagging?: string;
    IFrameOnlyPlaylists?: string;
    IncompleteSegmentBehavior?: string;
    IndexNSegments?: number;
    InputLossAction?: string;
    IvInManifest?: string;
    IvSource?: string;
    KeepSegments?: number;
    KeyFormat?: string;
    KeyFormatVersions?: string;
    KeyProviderSettings?: AWSMediaLiveChannelKeyProviderSettings;
    ManifestCompression?: string;
    ManifestDurationFormat?: string;
    MinSegmentLength?: number;
    Mode?: string;
    OutputSelection?: string;
    ProgramDateTime?: string;
    ProgramDateTimePeriod?: number;
    RedundantManifest?: string;
    SegmentLength?: number;
    SegmentationMode?: string;
    SegmentsPerSubdirectory?: number;
    StreamInfResolution?: string;
    TimedMetadataId3Frame?: string;
    TimedMetadataId3Period?: number;
    TimestampDeltaMilliseconds?: number;
    TsFileMode?: string;
}
export interface AWSMediaLiveChannelCaptionLanguageMapping {
    CaptionChannel?: number;
    LanguageCode?: string;
    LanguageDescription?: string;
}
export interface AWSMediaLiveChannelHlsCdnSettings {
    HlsAkamaiSettings?: AWSMediaLiveChannelHlsAkamaiSettings;
    HlsBasicPutSettings?: AWSMediaLiveChannelHlsBasicPutSettings;
    HlsMediaStoreSettings?: AWSMediaLiveChannelHlsMediaStoreSettings;
    HlsS3Settings?: AWSMediaLiveChannelHlsS3Settings;
    HlsWebdavSettings?: AWSMediaLiveChannelHlsWebdavSettings;
}
export interface AWSMediaLiveChannelHlsAkamaiSettings {
    ConnectionRetryInterval?: number;
    FilecacheDuration?: number;
    HttpTransferMode?: string;
    NumRetries?: number;
    RestartDelay?: number;
    Salt?: string;
    Token?: string;
}
export interface AWSMediaLiveChannelHlsBasicPutSettings {
    ConnectionRetryInterval?: number;
    FilecacheDuration?: number;
    NumRetries?: number;
    RestartDelay?: number;
}
export interface AWSMediaLiveChannelHlsMediaStoreSettings {
    ConnectionRetryInterval?: number;
    FilecacheDuration?: number;
    MediaStoreStorageClass?: string;
    NumRetries?: number;
    RestartDelay?: number;
}
export interface AWSMediaLiveChannelHlsS3Settings {
    CannedAcl?: string;
}
export interface AWSMediaLiveChannelHlsWebdavSettings {
    ConnectionRetryInterval?: number;
    FilecacheDuration?: number;
    HttpTransferMode?: string;
    NumRetries?: number;
    RestartDelay?: number;
}
export interface AWSMediaLiveChannelKeyProviderSettings {
    StaticKeySettings?: AWSMediaLiveChannelStaticKeySettings;
}
export interface AWSMediaLiveChannelStaticKeySettings {
    KeyProviderServer?: AWSMediaLiveChannelInputLocation;
    StaticKeyValue?: string;
}
export interface AWSMediaLiveChannelMediaPackageGroupSettings {
    Destination?: AWSMediaLiveChannelOutputLocationRef;
}
export interface AWSMediaLiveChannelMsSmoothGroupSettings {
    AcquisitionPointId?: string;
    AudioOnlyTimecodeControl?: string;
    CertificateMode?: string;
    ConnectionRetryInterval?: number;
    Destination?: AWSMediaLiveChannelOutputLocationRef;
    EventId?: string;
    EventIdMode?: string;
    EventStopBehavior?: string;
    FilecacheDuration?: number;
    FragmentLength?: number;
    InputLossAction?: string;
    NumRetries?: number;
    RestartDelay?: number;
    SegmentationMode?: string;
    SendDelayMs?: number;
    SparseTrackType?: string;
    StreamManifestBehavior?: string;
    TimestampOffset?: string;
    TimestampOffsetMode?: string;
}
export interface AWSMediaLiveChannelMultiplexGroupSettings {}
export interface AWSMediaLiveChannelRtmpGroupSettings {
    AdMarkers?: string[];
    AuthenticationScheme?: string;
    CacheFullBehavior?: string;
    CacheLength?: number;
    CaptionData?: string;
    InputLossAction?: string;
    RestartDelay?: number;
}
export interface AWSMediaLiveChannelUdpGroupSettings {
    InputLossAction?: string;
    TimedMetadataId3Frame?: string;
    TimedMetadataId3Period?: number;
}
export interface AWSMediaLiveChannelOutput {
    AudioDescriptionNames?: string[];
    CaptionDescriptionNames?: string[];
    OutputName?: string;
    OutputSettings?: AWSMediaLiveChannelOutputSettings;
    VideoDescriptionName?: string;
}
export interface AWSMediaLiveChannelOutputSettings {
    ArchiveOutputSettings?: AWSMediaLiveChannelArchiveOutputSettings;
    FrameCaptureOutputSettings?: AWSMediaLiveChannelFrameCaptureOutputSettings;
    HlsOutputSettings?: AWSMediaLiveChannelHlsOutputSettings;
    MediaPackageOutputSettings?: AWSMediaLiveChannelMediaPackageOutputSettings;
    MsSmoothOutputSettings?: AWSMediaLiveChannelMsSmoothOutputSettings;
    MultiplexOutputSettings?: AWSMediaLiveChannelMultiplexOutputSettings;
    RtmpOutputSettings?: AWSMediaLiveChannelRtmpOutputSettings;
    UdpOutputSettings?: AWSMediaLiveChannelUdpOutputSettings;
}
export interface AWSMediaLiveChannelArchiveOutputSettings {
    ContainerSettings?: AWSMediaLiveChannelArchiveContainerSettings;
    Extension?: string;
    NameModifier?: string;
}
export interface AWSMediaLiveChannelArchiveContainerSettings {
    M2tsSettings?: AWSMediaLiveChannelM2TsSettings;
    RawSettings?: AWSMediaLiveChannelRawSettings;
}
export interface AWSMediaLiveChannelM2TsSettings {
    AbsentInputAudioBehavior?: string;
    Arib?: string;
    AribCaptionsPid?: string;
    AribCaptionsPidControl?: string;
    AudioBufferModel?: string;
    AudioFramesPerPes?: number;
    AudioPids?: string;
    AudioStreamType?: string;
    Bitrate?: number;
    BufferModel?: string;
    CcDescriptor?: string;
    DvbNitSettings?: AWSMediaLiveChannelDvbNitSettings;
    DvbSdtSettings?: AWSMediaLiveChannelDvbSdtSettings;
    DvbSubPids?: string;
    DvbTdtSettings?: AWSMediaLiveChannelDvbTdtSettings;
    DvbTeletextPid?: string;
    Ebif?: string;
    EbpAudioInterval?: string;
    EbpLookaheadMs?: number;
    EbpPlacement?: string;
    EcmPid?: string;
    EsRateInPes?: string;
    EtvPlatformPid?: string;
    EtvSignalPid?: string;
    FragmentTime?: number;
    Klv?: string;
    KlvDataPids?: string;
    NielsenId3Behavior?: string;
    NullPacketBitrate?: number;
    PatInterval?: number;
    PcrControl?: string;
    PcrPeriod?: number;
    PcrPid?: string;
    PmtInterval?: number;
    PmtPid?: string;
    ProgramNum?: number;
    RateMode?: string;
    Scte27Pids?: string;
    Scte35Control?: string;
    Scte35Pid?: string;
    SegmentationMarkers?: string;
    SegmentationStyle?: string;
    SegmentationTime?: number;
    TimedMetadataBehavior?: string;
    TimedMetadataPid?: string;
    TransportStreamId?: number;
    VideoPid?: string;
}
export interface AWSMediaLiveChannelDvbNitSettings {
    NetworkId?: number;
    NetworkName?: string;
    RepInterval?: number;
}
export interface AWSMediaLiveChannelDvbSdtSettings {
    OutputSdt?: string;
    RepInterval?: number;
    ServiceName?: string;
    ServiceProviderName?: string;
}
export interface AWSMediaLiveChannelDvbTdtSettings {
    RepInterval?: number;
}
export interface AWSMediaLiveChannelRawSettings {}
export interface AWSMediaLiveChannelFrameCaptureOutputSettings {
    NameModifier?: string;
}
export interface AWSMediaLiveChannelHlsOutputSettings {
    H265PackagingType?: string;
    HlsSettings?: AWSMediaLiveChannelHlsSettings;
    NameModifier?: string;
    SegmentModifier?: string;
}
export interface AWSMediaLiveChannelHlsSettings {
    AudioOnlyHlsSettings?: AWSMediaLiveChannelAudioOnlyHlsSettings;
    Fmp4HlsSettings?: AWSMediaLiveChannelFmp4HlsSettings;
    FrameCaptureHlsSettings?: AWSMediaLiveChannelFrameCaptureHlsSettings;
    StandardHlsSettings?: AWSMediaLiveChannelStandardHlsSettings;
}
export interface AWSMediaLiveChannelAudioOnlyHlsSettings {
    AudioGroupId?: string;
    AudioOnlyImage?: AWSMediaLiveChannelInputLocation;
    AudioTrackType?: string;
    SegmentType?: string;
}
export interface AWSMediaLiveChannelFmp4HlsSettings {
    AudioRenditionSets?: string;
    NielsenId3Behavior?: string;
    TimedMetadataBehavior?: string;
}
export interface AWSMediaLiveChannelFrameCaptureHlsSettings {}
export interface AWSMediaLiveChannelStandardHlsSettings {
    AudioRenditionSets?: string;
    M3u8Settings?: AWSMediaLiveChannelM3U8Settings;
}
export interface AWSMediaLiveChannelM3U8Settings {
    AudioFramesPerPes?: number;
    AudioPids?: string;
    EcmPid?: string;
    NielsenId3Behavior?: string;
    PatInterval?: number;
    PcrControl?: string;
    PcrPeriod?: number;
    PcrPid?: string;
    PmtInterval?: number;
    PmtPid?: string;
    ProgramNum?: number;
    Scte35Behavior?: string;
    Scte35Pid?: string;
    TimedMetadataBehavior?: string;
    TimedMetadataPid?: string;
    TransportStreamId?: number;
    VideoPid?: string;
}
export interface AWSMediaLiveChannelMediaPackageOutputSettings {}
export interface AWSMediaLiveChannelMsSmoothOutputSettings {
    H265PackagingType?: string;
    NameModifier?: string;
}
export interface AWSMediaLiveChannelMultiplexOutputSettings {
    Destination?: AWSMediaLiveChannelOutputLocationRef;
}
export interface AWSMediaLiveChannelRtmpOutputSettings {
    CertificateMode?: string;
    ConnectionRetryInterval?: number;
    Destination?: AWSMediaLiveChannelOutputLocationRef;
    NumRetries?: number;
}
export interface AWSMediaLiveChannelUdpOutputSettings {
    BufferMsec?: number;
    ContainerSettings?: AWSMediaLiveChannelUdpContainerSettings;
    Destination?: AWSMediaLiveChannelOutputLocationRef;
    FecOutputSettings?: AWSMediaLiveChannelFecOutputSettings;
}
export interface AWSMediaLiveChannelUdpContainerSettings {
    M2tsSettings?: AWSMediaLiveChannelM2TsSettings;
}
export interface AWSMediaLiveChannelFecOutputSettings {
    ColumnDepth?: number;
    IncludeFec?: string;
    RowLength?: number;
}
export interface AWSMediaLiveChannelTimecodeConfig {
    Source?: string;
    SyncThreshold?: number;
}
export interface AWSMediaLiveChannelVideoDescription {
    CodecSettings?: AWSMediaLiveChannelVideoCodecSettings;
    Height?: number;
    Name?: string;
    RespondToAfd?: string;
    ScalingBehavior?: string;
    Sharpness?: number;
    Width?: number;
}
export interface AWSMediaLiveChannelVideoCodecSettings {
    FrameCaptureSettings?: AWSMediaLiveChannelFrameCaptureSettings;
    H264Settings?: AWSMediaLiveChannelH264Settings;
    H265Settings?: AWSMediaLiveChannelH265Settings;
    Mpeg2Settings?: AWSMediaLiveChannelMpeg2Settings;
}
export interface AWSMediaLiveChannelFrameCaptureSettings {
    CaptureInterval?: number;
    CaptureIntervalUnits?: string;
}
export interface AWSMediaLiveChannelH264Settings {
    AdaptiveQuantization?: string;
    AfdSignaling?: string;
    Bitrate?: number;
    BufFillPct?: number;
    BufSize?: number;
    ColorMetadata?: string;
    ColorSpaceSettings?: AWSMediaLiveChannelH264ColorSpaceSettings;
    EntropyEncoding?: string;
    FilterSettings?: AWSMediaLiveChannelH264FilterSettings;
    FixedAfd?: string;
    FlickerAq?: string;
    ForceFieldPictures?: string;
    FramerateControl?: string;
    FramerateDenominator?: number;
    FramerateNumerator?: number;
    GopBReference?: string;
    GopClosedCadence?: number;
    GopNumBFrames?: number;
    GopSize?: number;
    GopSizeUnits?: string;
    Level?: string;
    LookAheadRateControl?: string;
    MaxBitrate?: number;
    MinIInterval?: number;
    NumRefFrames?: number;
    ParControl?: string;
    ParDenominator?: number;
    ParNumerator?: number;
    Profile?: string;
    QualityLevel?: string;
    QvbrQualityLevel?: number;
    RateControlMode?: string;
    ScanType?: string;
    SceneChangeDetect?: string;
    Slices?: number;
    Softness?: number;
    SpatialAq?: string;
    SubgopLength?: string;
    Syntax?: string;
    TemporalAq?: string;
    TimecodeInsertion?: string;
}
export interface AWSMediaLiveChannelH264ColorSpaceSettings {
    ColorSpacePassthroughSettings?: AWSMediaLiveChannelColorSpacePassthroughSettings;
    Rec601Settings?: AWSMediaLiveChannelRec601Settings;
    Rec709Settings?: AWSMediaLiveChannelRec709Settings;
}
export interface AWSMediaLiveChannelColorSpacePassthroughSettings {}
export interface AWSMediaLiveChannelRec601Settings {}
export interface AWSMediaLiveChannelRec709Settings {}
export interface AWSMediaLiveChannelH264FilterSettings {
    TemporalFilterSettings?: AWSMediaLiveChannelTemporalFilterSettings;
}
export interface AWSMediaLiveChannelTemporalFilterSettings {
    PostFilterSharpening?: string;
    Strength?: string;
}
export interface AWSMediaLiveChannelH265Settings {
    AdaptiveQuantization?: string;
    AfdSignaling?: string;
    AlternativeTransferFunction?: string;
    Bitrate?: number;
    BufSize?: number;
    ColorMetadata?: string;
    ColorSpaceSettings?: AWSMediaLiveChannelH265ColorSpaceSettings;
    FilterSettings?: AWSMediaLiveChannelH265FilterSettings;
    FixedAfd?: string;
    FlickerAq?: string;
    FramerateDenominator?: number;
    FramerateNumerator?: number;
    GopClosedCadence?: number;
    GopSize?: number;
    GopSizeUnits?: string;
    Level?: string;
    LookAheadRateControl?: string;
    MaxBitrate?: number;
    MinIInterval?: number;
    ParDenominator?: number;
    ParNumerator?: number;
    Profile?: string;
    QvbrQualityLevel?: number;
    RateControlMode?: string;
    ScanType?: string;
    SceneChangeDetect?: string;
    Slices?: number;
    Tier?: string;
    TimecodeInsertion?: string;
}
export interface AWSMediaLiveChannelH265ColorSpaceSettings {
    ColorSpacePassthroughSettings?: AWSMediaLiveChannelColorSpacePassthroughSettings;
    Hdr10Settings?: AWSMediaLiveChannelHdr10Settings;
    Rec601Settings?: AWSMediaLiveChannelRec601Settings;
    Rec709Settings?: AWSMediaLiveChannelRec709Settings;
}
export interface AWSMediaLiveChannelHdr10Settings {
    MaxCll?: number;
    MaxFall?: number;
}
export interface AWSMediaLiveChannelH265FilterSettings {
    TemporalFilterSettings?: AWSMediaLiveChannelTemporalFilterSettings;
}
export interface AWSMediaLiveChannelMpeg2Settings {
    AdaptiveQuantization?: string;
    AfdSignaling?: string;
    ColorMetadata?: string;
    ColorSpace?: string;
    DisplayAspectRatio?: string;
    FilterSettings?: AWSMediaLiveChannelMpeg2FilterSettings;
    FixedAfd?: string;
    FramerateDenominator?: number;
    FramerateNumerator?: number;
    GopClosedCadence?: number;
    GopNumBFrames?: number;
    GopSize?: number;
    GopSizeUnits?: string;
    ScanType?: string;
    SubgopLength?: string;
    TimecodeInsertion?: string;
}
export interface AWSMediaLiveChannelMpeg2FilterSettings {
    TemporalFilterSettings?: AWSMediaLiveChannelTemporalFilterSettings;
}
export interface AWSMediaLiveChannelInputAttachment {
    AutomaticInputFailoverSettings?: AWSMediaLiveChannelAutomaticInputFailoverSettings;
    InputAttachmentName?: string;
    InputId?: string;
    InputSettings?: AWSMediaLiveChannelInputSettings;
}
export interface AWSMediaLiveChannelAutomaticInputFailoverSettings {
    ErrorClearTimeMsec?: number;
    FailoverConditions?: AWSMediaLiveChannelFailoverCondition[];
    InputPreference?: string;
    SecondaryInputId?: string;
}
export interface AWSMediaLiveChannelFailoverCondition {
    FailoverConditionSettings?: AWSMediaLiveChannelFailoverConditionSettings;
}
export interface AWSMediaLiveChannelFailoverConditionSettings {
    AudioSilenceSettings?: AWSMediaLiveChannelAudioSilenceFailoverSettings;
    InputLossSettings?: AWSMediaLiveChannelInputLossFailoverSettings;
    VideoBlackSettings?: AWSMediaLiveChannelVideoBlackFailoverSettings;
}
export interface AWSMediaLiveChannelAudioSilenceFailoverSettings {
    AudioSelectorName?: string;
    AudioSilenceThresholdMsec?: number;
}
export interface AWSMediaLiveChannelInputLossFailoverSettings {
    InputLossThresholdMsec?: number;
}
export interface AWSMediaLiveChannelVideoBlackFailoverSettings {
    BlackDetectThreshold?: number;
    VideoBlackThresholdMsec?: number;
}
export interface AWSMediaLiveChannelInputSettings {
    AudioSelectors?: AWSMediaLiveChannelAudioSelector[];
    CaptionSelectors?: AWSMediaLiveChannelCaptionSelector[];
    DeblockFilter?: string;
    DenoiseFilter?: string;
    FilterStrength?: number;
    InputFilter?: string;
    NetworkInputSettings?: AWSMediaLiveChannelNetworkInputSettings;
    Smpte2038DataPreference?: string;
    SourceEndBehavior?: string;
    VideoSelector?: AWSMediaLiveChannelVideoSelector;
}
export interface AWSMediaLiveChannelAudioSelector {
    Name?: string;
    SelectorSettings?: AWSMediaLiveChannelAudioSelectorSettings;
}
export interface AWSMediaLiveChannelAudioSelectorSettings {
    AudioLanguageSelection?: AWSMediaLiveChannelAudioLanguageSelection;
    AudioPidSelection?: AWSMediaLiveChannelAudioPidSelection;
    AudioTrackSelection?: AWSMediaLiveChannelAudioTrackSelection;
}
export interface AWSMediaLiveChannelAudioLanguageSelection {
    LanguageCode?: string;
    LanguageSelectionPolicy?: string;
}
export interface AWSMediaLiveChannelAudioPidSelection {
    Pid?: number;
}
export interface AWSMediaLiveChannelAudioTrackSelection {
    Tracks?: AWSMediaLiveChannelAudioTrack[];
}
export interface AWSMediaLiveChannelAudioTrack {
    Track?: number;
}
export interface AWSMediaLiveChannelCaptionSelector {
    LanguageCode?: string;
    Name?: string;
    SelectorSettings?: AWSMediaLiveChannelCaptionSelectorSettings;
}
export interface AWSMediaLiveChannelCaptionSelectorSettings {
    AncillarySourceSettings?: AWSMediaLiveChannelAncillarySourceSettings;
    AribSourceSettings?: AWSMediaLiveChannelAribSourceSettings;
    DvbSubSourceSettings?: AWSMediaLiveChannelDvbSubSourceSettings;
    EmbeddedSourceSettings?: AWSMediaLiveChannelEmbeddedSourceSettings;
    Scte20SourceSettings?: AWSMediaLiveChannelScte20SourceSettings;
    Scte27SourceSettings?: AWSMediaLiveChannelScte27SourceSettings;
    TeletextSourceSettings?: AWSMediaLiveChannelTeletextSourceSettings;
}
export interface AWSMediaLiveChannelAncillarySourceSettings {
    SourceAncillaryChannelNumber?: number;
}
export interface AWSMediaLiveChannelAribSourceSettings {}
export interface AWSMediaLiveChannelDvbSubSourceSettings {
    Pid?: number;
}
export interface AWSMediaLiveChannelEmbeddedSourceSettings {
    Convert608To708?: string;
    Scte20Detection?: string;
    Source608ChannelNumber?: number;
    Source608TrackNumber?: number;
}
export interface AWSMediaLiveChannelScte20SourceSettings {
    Convert608To708?: string;
    Source608ChannelNumber?: number;
}
export interface AWSMediaLiveChannelScte27SourceSettings {
    Pid?: number;
}
export interface AWSMediaLiveChannelTeletextSourceSettings {
    OutputRectangle?: AWSMediaLiveChannelCaptionRectangle;
    PageNumber?: string;
}
export interface AWSMediaLiveChannelCaptionRectangle {
    Height?: number;
    LeftOffset?: number;
    TopOffset?: number;
    Width?: number;
}
export interface AWSMediaLiveChannelNetworkInputSettings {
    HlsInputSettings?: AWSMediaLiveChannelHlsInputSettings;
    ServerValidation?: string;
}
export interface AWSMediaLiveChannelHlsInputSettings {
    Bandwidth?: number;
    BufferSegments?: number;
    Retries?: number;
    RetryInterval?: number;
}
export interface AWSMediaLiveChannelVideoSelector {
    ColorSpace?: string;
    ColorSpaceSettings?: AWSMediaLiveChannelVideoSelectorColorSpaceSettings;
    ColorSpaceUsage?: string;
    SelectorSettings?: AWSMediaLiveChannelVideoSelectorSettings;
}
export interface AWSMediaLiveChannelVideoSelectorColorSpaceSettings {
    Hdr10Settings?: AWSMediaLiveChannelHdr10Settings;
}
export interface AWSMediaLiveChannelVideoSelectorSettings {
    VideoSelectorPid?: AWSMediaLiveChannelVideoSelectorPid;
    VideoSelectorProgramId?: AWSMediaLiveChannelVideoSelectorProgramId;
}
export interface AWSMediaLiveChannelVideoSelectorPid {
    Pid?: number;
}
export interface AWSMediaLiveChannelVideoSelectorProgramId {
    ProgramId?: number;
}
export interface AWSMediaLiveChannelInputSpecification {
    Codec?: string;
    MaximumBitrate?: string;
    Resolution?: string;
}
export interface AWSMediaLiveChannelVpcOutputSettings {
    PublicAddressAllocationIds?: string[];
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSMediaLiveInput {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Destinations?: AWSMediaLiveInputInputDestinationRequest[];
        InputDevices?: AWSMediaLiveInputInputDeviceSettings[];
        InputSecurityGroups?: string[];
        MediaConnectFlows?: AWSMediaLiveInputMediaConnectFlowRequest[];
        Name?: string;
        RoleArn?: string;
        Sources?: AWSMediaLiveInputInputSourceRequest[];
        Tags?: {
            [k: string]: unknown;
        };
        Type?: string;
        Vpc?: AWSMediaLiveInputInputVpcRequest;
    };
    Type: "AWS::MediaLive::Input";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaLiveInputInputDestinationRequest {
    StreamName?: string;
}
export interface AWSMediaLiveInputInputDeviceSettings {
    Id?: string;
}
export interface AWSMediaLiveInputMediaConnectFlowRequest {
    FlowArn?: string;
}
export interface AWSMediaLiveInputInputSourceRequest {
    PasswordParam?: string;
    Url?: string;
    Username?: string;
}
export interface AWSMediaLiveInputInputVpcRequest {
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSMediaLiveInputSecurityGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Tags?: {
            [k: string]: unknown;
        };
        WhitelistRules?: AWSMediaLiveInputSecurityGroupInputWhitelistRuleCidr[];
    };
    Type: "AWS::MediaLive::InputSecurityGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaLiveInputSecurityGroupInputWhitelistRuleCidr {
    Cidr?: string;
}
export interface AWSMediaPackageAsset {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Id: string;
        PackagingGroupId: string;
        ResourceId?: string;
        SourceArn: string;
        SourceRoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::MediaPackage::Asset";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaPackageChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        EgressAccessLogs?: AWSMediaPackageChannelLogConfiguration;
        Id: string;
        IngressAccessLogs?: AWSMediaPackageChannelLogConfiguration;
        Tags?: Tag[];
    };
    Type: "AWS::MediaPackage::Channel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaPackageChannelLogConfiguration {
    LogGroupName?: string;
}
export interface AWSMediaPackageOriginEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Authorization?: AWSMediaPackageOriginEndpointAuthorization;
        ChannelId: string;
        CmafPackage?: AWSMediaPackageOriginEndpointCmafPackage;
        DashPackage?: AWSMediaPackageOriginEndpointDashPackage;
        Description?: string;
        HlsPackage?: AWSMediaPackageOriginEndpointHlsPackage;
        Id: string;
        ManifestName?: string;
        MssPackage?: AWSMediaPackageOriginEndpointMssPackage;
        Origination?: string;
        StartoverWindowSeconds?: number;
        Tags?: Tag[];
        TimeDelaySeconds?: number;
        Whitelist?: string[];
    };
    Type: "AWS::MediaPackage::OriginEndpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaPackageOriginEndpointAuthorization {
    CdnIdentifierSecret: string;
    SecretsRoleArn: string;
}
export interface AWSMediaPackageOriginEndpointCmafPackage {
    Encryption?: AWSMediaPackageOriginEndpointCmafEncryption;
    HlsManifests?: AWSMediaPackageOriginEndpointHlsManifest[];
    SegmentDurationSeconds?: number;
    SegmentPrefix?: string;
    StreamSelection?: AWSMediaPackageOriginEndpointStreamSelection;
}
export interface AWSMediaPackageOriginEndpointCmafEncryption {
    ConstantInitializationVector?: string;
    KeyRotationIntervalSeconds?: number;
    SpekeKeyProvider: AWSMediaPackageOriginEndpointSpekeKeyProvider;
}
export interface AWSMediaPackageOriginEndpointSpekeKeyProvider {
    CertificateArn?: string;
    ResourceId: string;
    RoleArn: string;
    SystemIds: string[];
    Url: string;
}
export interface AWSMediaPackageOriginEndpointHlsManifest {
    AdMarkers?: string;
    AdTriggers?: string[];
    AdsOnDeliveryRestrictions?: string;
    Id: string;
    IncludeIframeOnlyStream?: boolean;
    ManifestName?: string;
    PlaylistType?: string;
    PlaylistWindowSeconds?: number;
    ProgramDateTimeIntervalSeconds?: number;
    Url?: string;
}
export interface AWSMediaPackageOriginEndpointStreamSelection {
    MaxVideoBitsPerSecond?: number;
    MinVideoBitsPerSecond?: number;
    StreamOrder?: string;
}
export interface AWSMediaPackageOriginEndpointDashPackage {
    AdTriggers?: string[];
    AdsOnDeliveryRestrictions?: string;
    Encryption?: AWSMediaPackageOriginEndpointDashEncryption;
    ManifestLayout?: string;
    ManifestWindowSeconds?: number;
    MinBufferTimeSeconds?: number;
    MinUpdatePeriodSeconds?: number;
    PeriodTriggers?: string[];
    Profile?: string;
    SegmentDurationSeconds?: number;
    SegmentTemplateFormat?: string;
    StreamSelection?: AWSMediaPackageOriginEndpointStreamSelection;
    SuggestedPresentationDelaySeconds?: number;
    UtcTiming?: string;
    UtcTimingUri?: string;
}
export interface AWSMediaPackageOriginEndpointDashEncryption {
    KeyRotationIntervalSeconds?: number;
    SpekeKeyProvider: AWSMediaPackageOriginEndpointSpekeKeyProvider;
}
export interface AWSMediaPackageOriginEndpointHlsPackage {
    AdMarkers?: string;
    AdTriggers?: string[];
    AdsOnDeliveryRestrictions?: string;
    Encryption?: AWSMediaPackageOriginEndpointHlsEncryption;
    IncludeIframeOnlyStream?: boolean;
    PlaylistType?: string;
    PlaylistWindowSeconds?: number;
    ProgramDateTimeIntervalSeconds?: number;
    SegmentDurationSeconds?: number;
    StreamSelection?: AWSMediaPackageOriginEndpointStreamSelection;
    UseAudioRenditionGroup?: boolean;
}
export interface AWSMediaPackageOriginEndpointHlsEncryption {
    ConstantInitializationVector?: string;
    EncryptionMethod?: string;
    KeyRotationIntervalSeconds?: number;
    RepeatExtXKey?: boolean;
    SpekeKeyProvider: AWSMediaPackageOriginEndpointSpekeKeyProvider;
}
export interface AWSMediaPackageOriginEndpointMssPackage {
    Encryption?: AWSMediaPackageOriginEndpointMssEncryption;
    ManifestWindowSeconds?: number;
    SegmentDurationSeconds?: number;
    StreamSelection?: AWSMediaPackageOriginEndpointStreamSelection;
}
export interface AWSMediaPackageOriginEndpointMssEncryption {
    SpekeKeyProvider: AWSMediaPackageOriginEndpointSpekeKeyProvider;
}
export interface AWSMediaPackagePackagingConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CmafPackage?: AWSMediaPackagePackagingConfigurationCmafPackage;
        DashPackage?: AWSMediaPackagePackagingConfigurationDashPackage;
        HlsPackage?: AWSMediaPackagePackagingConfigurationHlsPackage;
        Id: string;
        MssPackage?: AWSMediaPackagePackagingConfigurationMssPackage;
        PackagingGroupId: string;
        Tags?: Tag[];
    };
    Type: "AWS::MediaPackage::PackagingConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaPackagePackagingConfigurationCmafPackage {
    Encryption?: AWSMediaPackagePackagingConfigurationCmafEncryption;
    HlsManifests: AWSMediaPackagePackagingConfigurationHlsManifest[];
    IncludeEncoderConfigurationInSegments?: boolean;
    SegmentDurationSeconds?: number;
}
export interface AWSMediaPackagePackagingConfigurationCmafEncryption {
    SpekeKeyProvider: AWSMediaPackagePackagingConfigurationSpekeKeyProvider;
}
export interface AWSMediaPackagePackagingConfigurationSpekeKeyProvider {
    RoleArn: string;
    SystemIds: string[];
    Url: string;
}
export interface AWSMediaPackagePackagingConfigurationHlsManifest {
    AdMarkers?: string;
    IncludeIframeOnlyStream?: boolean;
    ManifestName?: string;
    ProgramDateTimeIntervalSeconds?: number;
    RepeatExtXKey?: boolean;
    StreamSelection?: AWSMediaPackagePackagingConfigurationStreamSelection;
}
export interface AWSMediaPackagePackagingConfigurationStreamSelection {
    MaxVideoBitsPerSecond?: number;
    MinVideoBitsPerSecond?: number;
    StreamOrder?: string;
}
export interface AWSMediaPackagePackagingConfigurationDashPackage {
    DashManifests: AWSMediaPackagePackagingConfigurationDashManifest[];
    Encryption?: AWSMediaPackagePackagingConfigurationDashEncryption;
    IncludeEncoderConfigurationInSegments?: boolean;
    PeriodTriggers?: string[];
    SegmentDurationSeconds?: number;
    SegmentTemplateFormat?: string;
}
export interface AWSMediaPackagePackagingConfigurationDashManifest {
    ManifestLayout?: string;
    ManifestName?: string;
    MinBufferTimeSeconds?: number;
    Profile?: string;
    StreamSelection?: AWSMediaPackagePackagingConfigurationStreamSelection;
}
export interface AWSMediaPackagePackagingConfigurationDashEncryption {
    SpekeKeyProvider: AWSMediaPackagePackagingConfigurationSpekeKeyProvider;
}
export interface AWSMediaPackagePackagingConfigurationHlsPackage {
    Encryption?: AWSMediaPackagePackagingConfigurationHlsEncryption;
    HlsManifests: AWSMediaPackagePackagingConfigurationHlsManifest[];
    SegmentDurationSeconds?: number;
    UseAudioRenditionGroup?: boolean;
}
export interface AWSMediaPackagePackagingConfigurationHlsEncryption {
    ConstantInitializationVector?: string;
    EncryptionMethod?: string;
    SpekeKeyProvider: AWSMediaPackagePackagingConfigurationSpekeKeyProvider;
}
export interface AWSMediaPackagePackagingConfigurationMssPackage {
    Encryption?: AWSMediaPackagePackagingConfigurationMssEncryption;
    MssManifests: AWSMediaPackagePackagingConfigurationMssManifest[];
    SegmentDurationSeconds?: number;
}
export interface AWSMediaPackagePackagingConfigurationMssEncryption {
    SpekeKeyProvider: AWSMediaPackagePackagingConfigurationSpekeKeyProvider;
}
export interface AWSMediaPackagePackagingConfigurationMssManifest {
    ManifestName?: string;
    StreamSelection?: AWSMediaPackagePackagingConfigurationStreamSelection;
}
export interface AWSMediaPackagePackagingGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Authorization?: AWSMediaPackagePackagingGroupAuthorization;
        EgressAccessLogs?: AWSMediaPackagePackagingGroupLogConfiguration;
        Id: string;
        Tags?: Tag[];
    };
    Type: "AWS::MediaPackage::PackagingGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaPackagePackagingGroupAuthorization {
    CdnIdentifierSecret: string;
    SecretsRoleArn: string;
}
export interface AWSMediaPackagePackagingGroupLogConfiguration {
    LogGroupName?: string;
}
export interface AWSMediaStoreContainer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessLoggingEnabled?: boolean;
        ContainerName: string;
        CorsPolicy?: AWSMediaStoreContainerCorsRule[];
        LifecyclePolicy?: string;
        MetricPolicy?: AWSMediaStoreContainerMetricPolicy;
        Policy?: string;
        Tags?: Tag[];
    };
    Type: "AWS::MediaStore::Container";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMediaStoreContainerCorsRule {
    AllowedHeaders?: string[];
    AllowedMethods?: string[];
    AllowedOrigins?: string[];
    ExposeHeaders?: string[];
    MaxAgeSeconds?: number;
}
export interface AWSMediaStoreContainerMetricPolicy {
    ContainerLevelMetrics: string;
    MetricPolicyRules?: AWSMediaStoreContainerMetricPolicyRule[];
}
export interface AWSMediaStoreContainerMetricPolicyRule {
    ObjectGroup: string;
    ObjectGroupName: string;
}
export interface AWSMemoryDBACL {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ACLName: string;
        Tags?: Tag[];
        UserNames?: string[];
    };
    Type: "AWS::MemoryDB::ACL";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMemoryDBCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ACLName?: string;
        AutoMinorVersionUpgrade?: boolean;
        ClusterEndpoint?: AWSMemoryDBClusterEndpoint;
        ClusterName: string;
        Description?: string;
        EngineVersion?: string;
        FinalSnapshotName?: string;
        KmsKeyId?: string;
        MaintenanceWindow?: string;
        NodeType?: string;
        NumReplicasPerShard?: number;
        NumShards?: number;
        ParameterGroupName?: string;
        Port?: number;
        SecurityGroupIds?: string[];
        SnapshotArns?: string[];
        SnapshotName?: string;
        SnapshotRetentionLimit?: number;
        SnapshotWindow?: string;
        SnsTopicArn?: string;
        SnsTopicStatus?: string;
        SubnetGroupName?: string;
        TLSEnabled?: boolean;
        Tags?: Tag[];
    };
    Type: "AWS::MemoryDB::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMemoryDBClusterEndpoint {
    Address?: string;
    Port?: number;
}
export interface AWSMemoryDBParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Family?: string;
        ParameterGroupName: string;
        Parameters?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::MemoryDB::ParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMemoryDBSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        SubnetGroupName: string;
        SubnetIds?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::MemoryDB::SubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSMemoryDBUser {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessString: string;
        AuthenticationMode: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
        UserName: string;
    };
    Type: "AWS::MemoryDB::User";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNeptuneDBCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AssociatedRoles?: AWSNeptuneDBClusterDBClusterRole[];
        AvailabilityZones?: string[];
        BackupRetentionPeriod?: number;
        DBClusterIdentifier?: string;
        DBClusterParameterGroupName?: string;
        DBSubnetGroupName?: string;
        DeletionProtection?: boolean;
        EnableCloudwatchLogsExports?: string[];
        EngineVersion?: string;
        IamAuthEnabled?: boolean;
        KmsKeyId?: string;
        Port?: number;
        PreferredBackupWindow?: string;
        PreferredMaintenanceWindow?: string;
        RestoreToTime?: string;
        RestoreType?: string;
        SnapshotIdentifier?: string;
        SourceDBClusterIdentifier?: string;
        StorageEncrypted?: boolean;
        Tags?: Tag[];
        UseLatestRestorableTime?: boolean;
        VpcSecurityGroupIds?: string[];
    };
    Type: "AWS::Neptune::DBCluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNeptuneDBClusterDBClusterRole {
    FeatureName?: string;
    RoleArn: string;
}
export interface AWSNeptuneDBClusterParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        Family: string;
        Name?: string;
        Parameters: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::Neptune::DBClusterParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNeptuneDBInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowMajorVersionUpgrade?: boolean;
        AutoMinorVersionUpgrade?: boolean;
        AvailabilityZone?: string;
        DBClusterIdentifier?: string;
        DBInstanceClass: string;
        DBInstanceIdentifier?: string;
        DBParameterGroupName?: string;
        DBSnapshotIdentifier?: string;
        DBSubnetGroupName?: string;
        PreferredMaintenanceWindow?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Neptune::DBInstance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNeptuneDBParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        Family: string;
        Name?: string;
        Parameters: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::Neptune::DBParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNeptuneDBSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DBSubnetGroupDescription: string;
        DBSubnetGroupName?: string;
        SubnetIds: string[];
        Tags?: Tag[];
    };
    Type: "AWS::Neptune::DBSubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkFirewallFirewall {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeleteProtection?: boolean;
        Description?: string;
        FirewallName: string;
        FirewallPolicyArn: string;
        FirewallPolicyChangeProtection?: boolean;
        SubnetChangeProtection?: boolean;
        SubnetMappings: AWSNetworkFirewallFirewallSubnetMapping[];
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::NetworkFirewall::Firewall";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkFirewallFirewallSubnetMapping {
    SubnetId: string;
}
export interface AWSNetworkFirewallFirewallPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        FirewallPolicy: AWSNetworkFirewallFirewallPolicyFirewallPolicy;
        FirewallPolicyName: string;
        Tags?: Tag[];
    };
    Type: "AWS::NetworkFirewall::FirewallPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkFirewallFirewallPolicyFirewallPolicy {
    StatefulRuleGroupReferences?: AWSNetworkFirewallFirewallPolicyStatefulRuleGroupReference[];
    StatelessCustomActions?: AWSNetworkFirewallFirewallPolicyCustomAction[];
    StatelessDefaultActions: string[];
    StatelessFragmentDefaultActions: string[];
    StatelessRuleGroupReferences?: AWSNetworkFirewallFirewallPolicyStatelessRuleGroupReference[];
}
export interface AWSNetworkFirewallFirewallPolicyStatefulRuleGroupReference {
    ResourceArn: string;
}
export interface AWSNetworkFirewallFirewallPolicyCustomAction {
    ActionDefinition: AWSNetworkFirewallFirewallPolicyActionDefinition;
    ActionName: string;
}
export interface AWSNetworkFirewallFirewallPolicyActionDefinition {
    PublishMetricAction?: AWSNetworkFirewallFirewallPolicyPublishMetricAction;
}
export interface AWSNetworkFirewallFirewallPolicyPublishMetricAction {
    Dimensions: AWSNetworkFirewallFirewallPolicyDimension[];
}
export interface AWSNetworkFirewallFirewallPolicyDimension {
    Value: string;
}
export interface AWSNetworkFirewallFirewallPolicyStatelessRuleGroupReference {
    Priority: number;
    ResourceArn: string;
}
export interface AWSNetworkFirewallLoggingConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FirewallArn: string;
        FirewallName?: string;
        LoggingConfiguration: AWSNetworkFirewallLoggingConfigurationLoggingConfiguration;
    };
    Type: "AWS::NetworkFirewall::LoggingConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkFirewallLoggingConfigurationLoggingConfiguration {
    LogDestinationConfigs: AWSNetworkFirewallLoggingConfigurationLogDestinationConfig[];
}
export interface AWSNetworkFirewallLoggingConfigurationLogDestinationConfig {
    LogDestination: {
        [k: string]: unknown;
    };
    LogDestinationType: string;
    LogType: string;
}
export interface AWSNetworkFirewallRuleGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Capacity: number;
        Description?: string;
        RuleGroup?: AWSNetworkFirewallRuleGroupRuleGroup;
        RuleGroupName: string;
        Tags?: Tag[];
        Type: string;
    };
    Type: "AWS::NetworkFirewall::RuleGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkFirewallRuleGroupRuleGroup {
    RuleVariables?: AWSNetworkFirewallRuleGroupRuleVariables;
    RulesSource: AWSNetworkFirewallRuleGroupRulesSource;
}
export interface AWSNetworkFirewallRuleGroupRuleVariables {
    IPSets?: {
        [k: string]: AWSNetworkFirewallRuleGroupIPSet;
    };
    PortSets?: {
        [k: string]: AWSNetworkFirewallRuleGroupPortSet;
    };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSNetworkFirewallRuleGroupIPSet {
    Definition?: string[];
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSNetworkFirewallRuleGroupPortSet {
    Definition?: string[];
}
export interface AWSNetworkFirewallRuleGroupRulesSource {
    RulesSourceList?: AWSNetworkFirewallRuleGroupRulesSourceList;
    RulesString?: string;
    StatefulRules?: AWSNetworkFirewallRuleGroupStatefulRule[];
    StatelessRulesAndCustomActions?: AWSNetworkFirewallRuleGroupStatelessRulesAndCustomActions;
}
export interface AWSNetworkFirewallRuleGroupRulesSourceList {
    GeneratedRulesType: string;
    TargetTypes: string[];
    Targets: string[];
}
export interface AWSNetworkFirewallRuleGroupStatefulRule {
    Action: string;
    Header: AWSNetworkFirewallRuleGroupHeader;
    RuleOptions: AWSNetworkFirewallRuleGroupRuleOption[];
}
export interface AWSNetworkFirewallRuleGroupHeader {
    Destination: string;
    DestinationPort: string;
    Direction: string;
    Protocol: string;
    Source: string;
    SourcePort: string;
}
export interface AWSNetworkFirewallRuleGroupRuleOption {
    Keyword: string;
    Settings?: string[];
}
export interface AWSNetworkFirewallRuleGroupStatelessRulesAndCustomActions {
    CustomActions?: AWSNetworkFirewallRuleGroupCustomAction[];
    StatelessRules: AWSNetworkFirewallRuleGroupStatelessRule[];
}
export interface AWSNetworkFirewallRuleGroupCustomAction {
    ActionDefinition: AWSNetworkFirewallRuleGroupActionDefinition;
    ActionName: string;
}
export interface AWSNetworkFirewallRuleGroupActionDefinition {
    PublishMetricAction?: AWSNetworkFirewallRuleGroupPublishMetricAction;
}
export interface AWSNetworkFirewallRuleGroupPublishMetricAction {
    Dimensions: AWSNetworkFirewallRuleGroupDimension[];
}
export interface AWSNetworkFirewallRuleGroupDimension {
    Value: string;
}
export interface AWSNetworkFirewallRuleGroupStatelessRule {
    Priority: number;
    RuleDefinition: AWSNetworkFirewallRuleGroupRuleDefinition;
}
export interface AWSNetworkFirewallRuleGroupRuleDefinition {
    Actions: string[];
    MatchAttributes: AWSNetworkFirewallRuleGroupMatchAttributes;
}
export interface AWSNetworkFirewallRuleGroupMatchAttributes {
    DestinationPorts?: AWSNetworkFirewallRuleGroupPortRange[];
    Destinations?: AWSNetworkFirewallRuleGroupAddress[];
    Protocols?: number[];
    SourcePorts?: AWSNetworkFirewallRuleGroupPortRange[];
    Sources?: AWSNetworkFirewallRuleGroupAddress[];
    TCPFlags?: AWSNetworkFirewallRuleGroupTCPFlagField[];
}
export interface AWSNetworkFirewallRuleGroupPortRange {
    FromPort: number;
    ToPort: number;
}
export interface AWSNetworkFirewallRuleGroupAddress {
    AddressDefinition: string;
}
export interface AWSNetworkFirewallRuleGroupTCPFlagField {
    Flags: string[];
    Masks?: string[];
}
export interface AWSNetworkManagerCustomerGatewayAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CustomerGatewayArn: string;
        DeviceId: string;
        GlobalNetworkId: string;
        LinkId?: string;
    };
    Type: "AWS::NetworkManager::CustomerGatewayAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkManagerDevice {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        GlobalNetworkId: string;
        Location?: AWSNetworkManagerDeviceLocation;
        Model?: string;
        SerialNumber?: string;
        SiteId?: string;
        Tags?: Tag[];
        Type?: string;
        Vendor?: string;
    };
    Type: "AWS::NetworkManager::Device";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkManagerDeviceLocation {
    Address?: string;
    Latitude?: string;
    Longitude?: string;
}
export interface AWSNetworkManagerGlobalNetwork {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        Tags?: Tag[];
    };
    Type: "AWS::NetworkManager::GlobalNetwork";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkManagerLink {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Bandwidth: AWSNetworkManagerLinkBandwidth;
        Description?: string;
        GlobalNetworkId: string;
        Provider?: string;
        SiteId: string;
        Tags?: Tag[];
        Type?: string;
    };
    Type: "AWS::NetworkManager::Link";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkManagerLinkBandwidth {
    DownloadSpeed?: number;
    UploadSpeed?: number;
}
export interface AWSNetworkManagerLinkAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeviceId: string;
        GlobalNetworkId: string;
        LinkId: string;
    };
    Type: "AWS::NetworkManager::LinkAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkManagerSite {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        GlobalNetworkId: string;
        Location?: AWSNetworkManagerSiteLocation;
        Tags?: Tag[];
    };
    Type: "AWS::NetworkManager::Site";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNetworkManagerSiteLocation {
    Address?: string;
    Latitude?: string;
    Longitude?: string;
}
export interface AWSNetworkManagerTransitGatewayRegistration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GlobalNetworkId: string;
        TransitGatewayArn: string;
    };
    Type: "AWS::NetworkManager::TransitGatewayRegistration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNimbleStudioLaunchProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Ec2SubnetIds: string[];
        LaunchProfileProtocolVersions: string[];
        Name: string;
        StreamConfiguration: AWSNimbleStudioLaunchProfileStreamConfiguration;
        StudioComponentIds: string[];
        StudioId: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::NimbleStudio::LaunchProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNimbleStudioLaunchProfileStreamConfiguration {
    ClipboardMode: string;
    Ec2InstanceTypes: string[];
    MaxSessionLengthInMinutes?: number;
    StreamingImageIds: string[];
}
export interface AWSNimbleStudioStreamingImage {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Ec2ImageId: string;
        Name: string;
        StudioId: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::NimbleStudio::StreamingImage";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNimbleStudioStudio {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdminRoleArn: string;
        DisplayName: string;
        StudioEncryptionConfiguration?: AWSNimbleStudioStudioStudioEncryptionConfiguration;
        StudioName: string;
        Tags?: {
            [k: string]: unknown;
        };
        UserRoleArn: string;
    };
    Type: "AWS::NimbleStudio::Studio";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNimbleStudioStudioStudioEncryptionConfiguration {
    KeyArn?: string;
    KeyType: string;
}
export interface AWSNimbleStudioStudioComponent {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Configuration?: AWSNimbleStudioStudioComponentStudioComponentConfiguration;
        Description?: string;
        Ec2SecurityGroupIds?: string[];
        InitializationScripts?: AWSNimbleStudioStudioComponentStudioComponentInitializationScript[];
        Name: string;
        ScriptParameters?: AWSNimbleStudioStudioComponentScriptParameterKeyValue[];
        StudioId: string;
        Subtype?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Type: string;
    };
    Type: "AWS::NimbleStudio::StudioComponent";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSNimbleStudioStudioComponentStudioComponentConfiguration {
    ActiveDirectoryConfiguration?: AWSNimbleStudioStudioComponentActiveDirectoryConfiguration;
    ComputeFarmConfiguration?: AWSNimbleStudioStudioComponentComputeFarmConfiguration;
    LicenseServiceConfiguration?: AWSNimbleStudioStudioComponentLicenseServiceConfiguration;
    SharedFileSystemConfiguration?: AWSNimbleStudioStudioComponentSharedFileSystemConfiguration;
}
export interface AWSNimbleStudioStudioComponentActiveDirectoryConfiguration {
    ComputerAttributes?: AWSNimbleStudioStudioComponentActiveDirectoryComputerAttribute[];
    DirectoryId?: string;
    OrganizationalUnitDistinguishedName?: string;
}
export interface AWSNimbleStudioStudioComponentActiveDirectoryComputerAttribute {
    Name?: string;
    Value?: string;
}
export interface AWSNimbleStudioStudioComponentComputeFarmConfiguration {
    ActiveDirectoryUser?: string;
    Endpoint?: string;
}
export interface AWSNimbleStudioStudioComponentLicenseServiceConfiguration {
    Endpoint?: string;
}
export interface AWSNimbleStudioStudioComponentSharedFileSystemConfiguration {
    Endpoint?: string;
    FileSystemId?: string;
    LinuxMountPoint?: string;
    ShareName?: string;
    WindowsMountDrive?: string;
}
export interface AWSNimbleStudioStudioComponentStudioComponentInitializationScript {
    LaunchProfileProtocolVersion?: string;
    Platform?: string;
    RunContext?: string;
    Script?: string;
}
export interface AWSNimbleStudioStudioComponentScriptParameterKeyValue {
    Key?: string;
    Value?: string;
}
export interface AWSOpenSearchServiceDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AccessPolicies?: {
            [k: string]: unknown;
        };
        AdvancedOptions?: {
            [k: string]: unknown;
        };
        AdvancedSecurityOptions?: AWSOpenSearchServiceDomainAdvancedSecurityOptionsInput;
        ClusterConfig?: AWSOpenSearchServiceDomainClusterConfig;
        CognitoOptions?: AWSOpenSearchServiceDomainCognitoOptions;
        DomainEndpointOptions?: AWSOpenSearchServiceDomainDomainEndpointOptions;
        DomainName?: string;
        EBSOptions?: AWSOpenSearchServiceDomainEBSOptions;
        EncryptionAtRestOptions?: AWSOpenSearchServiceDomainEncryptionAtRestOptions;
        EngineVersion?: string;
        LogPublishingOptions?: {
            [k: string]: AWSOpenSearchServiceDomainLogPublishingOption;
        };
        NodeToNodeEncryptionOptions?: AWSOpenSearchServiceDomainNodeToNodeEncryptionOptions;
        SnapshotOptions?: AWSOpenSearchServiceDomainSnapshotOptions;
        Tags?: Tag[];
        VPCOptions?: AWSOpenSearchServiceDomainVPCOptions;
    };
    Type: "AWS::OpenSearchService::Domain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpenSearchServiceDomainAdvancedSecurityOptionsInput {
    Enabled?: boolean;
    InternalUserDatabaseEnabled?: boolean;
    MasterUserOptions?: AWSOpenSearchServiceDomainMasterUserOptions;
}
export interface AWSOpenSearchServiceDomainMasterUserOptions {
    MasterUserARN?: string;
    MasterUserName?: string;
    MasterUserPassword?: string;
}
export interface AWSOpenSearchServiceDomainClusterConfig {
    DedicatedMasterCount?: number;
    DedicatedMasterEnabled?: boolean;
    DedicatedMasterType?: string;
    InstanceCount?: number;
    InstanceType?: string;
    WarmCount?: number;
    WarmEnabled?: boolean;
    WarmType?: string;
    ZoneAwarenessConfig?: AWSOpenSearchServiceDomainZoneAwarenessConfig;
    ZoneAwarenessEnabled?: boolean;
}
export interface AWSOpenSearchServiceDomainZoneAwarenessConfig {
    AvailabilityZoneCount?: number;
}
export interface AWSOpenSearchServiceDomainCognitoOptions {
    Enabled?: boolean;
    IdentityPoolId?: string;
    RoleArn?: string;
    UserPoolId?: string;
}
export interface AWSOpenSearchServiceDomainDomainEndpointOptions {
    CustomEndpoint?: string;
    CustomEndpointCertificateArn?: string;
    CustomEndpointEnabled?: boolean;
    EnforceHTTPS?: boolean;
    TLSSecurityPolicy?: string;
}
export interface AWSOpenSearchServiceDomainEBSOptions {
    EBSEnabled?: boolean;
    Iops?: number;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSOpenSearchServiceDomainEncryptionAtRestOptions {
    Enabled?: boolean;
    KmsKeyId?: string;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSOpenSearchServiceDomainLogPublishingOption {
    CloudWatchLogsLogGroupArn?: string;
    Enabled?: boolean;
}
export interface AWSOpenSearchServiceDomainNodeToNodeEncryptionOptions {
    Enabled?: boolean;
}
export interface AWSOpenSearchServiceDomainSnapshotOptions {
    AutomatedSnapshotStartHour?: number;
}
export interface AWSOpenSearchServiceDomainVPCOptions {
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
}
export interface AWSOpsWorksApp {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AppSource?: AWSOpsWorksAppSource;
        Attributes?: {
            [k: string]: unknown;
        };
        DataSources?: AWSOpsWorksAppDataSource[];
        Description?: string;
        Domains?: string[];
        EnableSsl?: boolean;
        Environment?: AWSOpsWorksAppEnvironmentVariable[];
        Name: string;
        Shortname?: string;
        SslConfiguration?: AWSOpsWorksAppSslConfiguration;
        StackId: string;
        Type: string;
    };
    Type: "AWS::OpsWorks::App";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksAppSource {
    Password?: string;
    Revision?: string;
    SshKey?: string;
    Type?: string;
    Url?: string;
    Username?: string;
}
export interface AWSOpsWorksAppDataSource {
    Arn?: string;
    DatabaseName?: string;
    Type?: string;
}
export interface AWSOpsWorksAppEnvironmentVariable {
    Key: string;
    Secure?: boolean;
    Value: string;
}
export interface AWSOpsWorksAppSslConfiguration {
    Certificate?: string;
    Chain?: string;
    PrivateKey?: string;
}
export interface AWSOpsWorksElasticLoadBalancerAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ElasticLoadBalancerName: string;
        LayerId: string;
    };
    Type: "AWS::OpsWorks::ElasticLoadBalancerAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AgentVersion?: string;
        AmiId?: string;
        Architecture?: string;
        AutoScalingType?: string;
        AvailabilityZone?: string;
        BlockDeviceMappings?: AWSOpsWorksInstanceBlockDeviceMapping[];
        EbsOptimized?: boolean;
        ElasticIps?: string[];
        Hostname?: string;
        InstallUpdatesOnBoot?: boolean;
        InstanceType: string;
        LayerIds: string[];
        Os?: string;
        RootDeviceType?: string;
        SshKeyName?: string;
        StackId: string;
        SubnetId?: string;
        Tenancy?: string;
        TimeBasedAutoScaling?: AWSOpsWorksInstanceTimeBasedAutoScaling;
        VirtualizationType?: string;
        Volumes?: string[];
    };
    Type: "AWS::OpsWorks::Instance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksInstanceBlockDeviceMapping {
    DeviceName?: string;
    Ebs?: AWSOpsWorksInstanceEbsBlockDevice;
    NoDevice?: string;
    VirtualName?: string;
}
export interface AWSOpsWorksInstanceEbsBlockDevice {
    DeleteOnTermination?: boolean;
    Iops?: number;
    SnapshotId?: string;
    VolumeSize?: number;
    VolumeType?: string;
}
export interface AWSOpsWorksInstanceTimeBasedAutoScaling {
    Friday?: {
        [k: string]: unknown;
    };
    Monday?: {
        [k: string]: unknown;
    };
    Saturday?: {
        [k: string]: unknown;
    };
    Sunday?: {
        [k: string]: unknown;
    };
    Thursday?: {
        [k: string]: unknown;
    };
    Tuesday?: {
        [k: string]: unknown;
    };
    Wednesday?: {
        [k: string]: unknown;
    };
}
export interface AWSOpsWorksLayer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Attributes?: {
            [k: string]: unknown;
        };
        AutoAssignElasticIps: boolean;
        AutoAssignPublicIps: boolean;
        CustomInstanceProfileArn?: string;
        CustomJson?: {
            [k: string]: unknown;
        };
        CustomRecipes?: AWSOpsWorksLayerRecipes;
        CustomSecurityGroupIds?: string[];
        EnableAutoHealing: boolean;
        InstallUpdatesOnBoot?: boolean;
        LifecycleEventConfiguration?: AWSOpsWorksLayerLifecycleEventConfiguration;
        LoadBasedAutoScaling?: AWSOpsWorksLayerLoadBasedAutoScaling;
        Name: string;
        Packages?: string[];
        Shortname: string;
        StackId: string;
        Tags?: Tag[];
        Type: string;
        UseEbsOptimizedInstances?: boolean;
        VolumeConfigurations?: AWSOpsWorksLayerVolumeConfiguration[];
    };
    Type: "AWS::OpsWorks::Layer";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksLayerRecipes {
    Configure?: string[];
    Deploy?: string[];
    Setup?: string[];
    Shutdown?: string[];
    Undeploy?: string[];
}
export interface AWSOpsWorksLayerLifecycleEventConfiguration {
    ShutdownEventConfiguration?: AWSOpsWorksLayerShutdownEventConfiguration;
}
export interface AWSOpsWorksLayerShutdownEventConfiguration {
    DelayUntilElbConnectionsDrained?: boolean;
    ExecutionTimeout?: number;
}
export interface AWSOpsWorksLayerLoadBasedAutoScaling {
    DownScaling?: AWSOpsWorksLayerAutoScalingThresholds;
    Enable?: boolean;
    UpScaling?: AWSOpsWorksLayerAutoScalingThresholds;
}
export interface AWSOpsWorksLayerAutoScalingThresholds {
    CpuThreshold?: number;
    IgnoreMetricsTime?: number;
    InstanceCount?: number;
    LoadThreshold?: number;
    MemoryThreshold?: number;
    ThresholdsWaitTime?: number;
}
export interface AWSOpsWorksLayerVolumeConfiguration {
    Encrypted?: boolean;
    Iops?: number;
    MountPoint?: string;
    NumberOfDisks?: number;
    RaidLevel?: number;
    Size?: number;
    VolumeType?: string;
}
export interface AWSOpsWorksStack {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AgentVersion?: string;
        Attributes?: {
            [k: string]: unknown;
        };
        ChefConfiguration?: AWSOpsWorksStackChefConfiguration;
        CloneAppIds?: string[];
        ClonePermissions?: boolean;
        ConfigurationManager?: AWSOpsWorksStackStackConfigurationManager;
        CustomCookbooksSource?: AWSOpsWorksStackSource;
        CustomJson?: {
            [k: string]: unknown;
        };
        DefaultAvailabilityZone?: string;
        DefaultInstanceProfileArn: string;
        DefaultOs?: string;
        DefaultRootDeviceType?: string;
        DefaultSshKeyName?: string;
        DefaultSubnetId?: string;
        EcsClusterArn?: string;
        ElasticIps?: AWSOpsWorksStackElasticIp[];
        HostnameTheme?: string;
        Name: string;
        RdsDbInstances?: AWSOpsWorksStackRdsDbInstance[];
        ServiceRoleArn: string;
        SourceStackId?: string;
        Tags?: Tag[];
        UseCustomCookbooks?: boolean;
        UseOpsworksSecurityGroups?: boolean;
        VpcId?: string;
    };
    Type: "AWS::OpsWorks::Stack";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksStackChefConfiguration {
    BerkshelfVersion?: string;
    ManageBerkshelf?: boolean;
}
export interface AWSOpsWorksStackStackConfigurationManager {
    Name?: string;
    Version?: string;
}
export interface AWSOpsWorksStackSource {
    Password?: string;
    Revision?: string;
    SshKey?: string;
    Type?: string;
    Url?: string;
    Username?: string;
}
export interface AWSOpsWorksStackElasticIp {
    Ip: string;
    Name?: string;
}
export interface AWSOpsWorksStackRdsDbInstance {
    DbPassword: string;
    DbUser: string;
    RdsDbInstanceArn: string;
}
export interface AWSOpsWorksUserProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowSelfManagement?: boolean;
        IamUserArn: string;
        SshPublicKey?: string;
        SshUsername?: string;
    };
    Type: "AWS::OpsWorks::UserProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksVolume {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Ec2VolumeId: string;
        MountPoint?: string;
        Name?: string;
        StackId: string;
    };
    Type: "AWS::OpsWorks::Volume";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksCMServer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssociatePublicIpAddress?: boolean;
        BackupId?: string;
        BackupRetentionCount?: number;
        CustomCertificate?: string;
        CustomDomain?: string;
        CustomPrivateKey?: string;
        DisableAutomatedBackup?: boolean;
        Engine?: string;
        EngineAttributes?: AWSOpsWorksCMServerEngineAttribute[];
        EngineModel?: string;
        EngineVersion?: string;
        InstanceProfileArn: string;
        InstanceType: string;
        KeyPair?: string;
        PreferredBackupWindow?: string;
        PreferredMaintenanceWindow?: string;
        SecurityGroupIds?: string[];
        ServerName?: string;
        ServiceRoleArn: string;
        SubnetIds?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::OpsWorksCM::Server";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSOpsWorksCMServerEngineAttribute {
    Name?: string;
    Value?: string;
}
export interface AWSPinpointADMChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        ClientId: string;
        ClientSecret: string;
        Enabled?: boolean;
    };
    Type: "AWS::Pinpoint::ADMChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointAPNSChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        BundleId?: string;
        Certificate?: string;
        DefaultAuthenticationMethod?: string;
        Enabled?: boolean;
        PrivateKey?: string;
        TeamId?: string;
        TokenKey?: string;
        TokenKeyId?: string;
    };
    Type: "AWS::Pinpoint::APNSChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointAPNSSandboxChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        BundleId?: string;
        Certificate?: string;
        DefaultAuthenticationMethod?: string;
        Enabled?: boolean;
        PrivateKey?: string;
        TeamId?: string;
        TokenKey?: string;
        TokenKeyId?: string;
    };
    Type: "AWS::Pinpoint::APNSSandboxChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointAPNSVoipChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        BundleId?: string;
        Certificate?: string;
        DefaultAuthenticationMethod?: string;
        Enabled?: boolean;
        PrivateKey?: string;
        TeamId?: string;
        TokenKey?: string;
        TokenKeyId?: string;
    };
    Type: "AWS::Pinpoint::APNSVoipChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointAPNSVoipSandboxChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        BundleId?: string;
        Certificate?: string;
        DefaultAuthenticationMethod?: string;
        Enabled?: boolean;
        PrivateKey?: string;
        TeamId?: string;
        TokenKey?: string;
        TokenKeyId?: string;
    };
    Type: "AWS::Pinpoint::APNSVoipSandboxChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointApp {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Pinpoint::App";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointApplicationSettings {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        CampaignHook?: AWSPinpointApplicationSettingsCampaignHook;
        CloudWatchMetricsEnabled?: boolean;
        Limits?: AWSPinpointApplicationSettingsLimits;
        QuietTime?: AWSPinpointApplicationSettingsQuietTime;
    };
    Type: "AWS::Pinpoint::ApplicationSettings";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointApplicationSettingsCampaignHook {
    LambdaFunctionName?: string;
    Mode?: string;
    WebUrl?: string;
}
export interface AWSPinpointApplicationSettingsLimits {
    Daily?: number;
    MaximumDuration?: number;
    MessagesPerSecond?: number;
    Total?: number;
}
export interface AWSPinpointApplicationSettingsQuietTime {
    End: string;
    Start: string;
}
export interface AWSPinpointBaiduChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiKey: string;
        ApplicationId: string;
        Enabled?: boolean;
        SecretKey: string;
    };
    Type: "AWS::Pinpoint::BaiduChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointCampaign {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AdditionalTreatments?: AWSPinpointCampaignWriteTreatmentResource[];
        ApplicationId: string;
        CampaignHook?: AWSPinpointCampaignCampaignHook;
        Description?: string;
        HoldoutPercent?: number;
        IsPaused?: boolean;
        Limits?: AWSPinpointCampaignLimits;
        MessageConfiguration: AWSPinpointCampaignMessageConfiguration;
        Name: string;
        Schedule: AWSPinpointCampaignSchedule;
        SegmentId: string;
        SegmentVersion?: number;
        Tags?: {
            [k: string]: unknown;
        };
        TreatmentDescription?: string;
        TreatmentName?: string;
    };
    Type: "AWS::Pinpoint::Campaign";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointCampaignWriteTreatmentResource {
    MessageConfiguration?: AWSPinpointCampaignMessageConfiguration;
    Schedule?: AWSPinpointCampaignSchedule;
    SizePercent?: number;
    TreatmentDescription?: string;
    TreatmentName?: string;
}
export interface AWSPinpointCampaignMessageConfiguration {
    ADMMessage?: AWSPinpointCampaignMessage;
    APNSMessage?: AWSPinpointCampaignMessage;
    BaiduMessage?: AWSPinpointCampaignMessage;
    DefaultMessage?: AWSPinpointCampaignMessage;
    EmailMessage?: AWSPinpointCampaignCampaignEmailMessage;
    GCMMessage?: AWSPinpointCampaignMessage;
    SMSMessage?: AWSPinpointCampaignCampaignSmsMessage;
}
export interface AWSPinpointCampaignMessage {
    Action?: string;
    Body?: string;
    ImageIconUrl?: string;
    ImageSmallIconUrl?: string;
    ImageUrl?: string;
    JsonBody?: string;
    MediaUrl?: string;
    RawContent?: string;
    SilentPush?: boolean;
    TimeToLive?: number;
    Title?: string;
    Url?: string;
}
export interface AWSPinpointCampaignCampaignEmailMessage {
    Body?: string;
    FromAddress?: string;
    HtmlBody?: string;
    Title?: string;
}
export interface AWSPinpointCampaignCampaignSmsMessage {
    Body?: string;
    EntityId?: string;
    MessageType?: string;
    OriginationNumber?: string;
    SenderId?: string;
    TemplateId?: string;
}
export interface AWSPinpointCampaignSchedule {
    EndTime?: string;
    EventFilter?: AWSPinpointCampaignCampaignEventFilter;
    Frequency?: string;
    IsLocalTime?: boolean;
    QuietTime?: AWSPinpointCampaignQuietTime;
    StartTime?: string;
    TimeZone?: string;
}
export interface AWSPinpointCampaignCampaignEventFilter {
    Dimensions?: AWSPinpointCampaignEventDimensions;
    FilterType?: string;
}
export interface AWSPinpointCampaignEventDimensions {
    Attributes?: {
        [k: string]: unknown;
    };
    EventType?: AWSPinpointCampaignSetDimension;
    Metrics?: {
        [k: string]: unknown;
    };
}
export interface AWSPinpointCampaignSetDimension {
    DimensionType?: string;
    Values?: string[];
}
export interface AWSPinpointCampaignQuietTime {
    End: string;
    Start: string;
}
export interface AWSPinpointCampaignCampaignHook {
    LambdaFunctionName?: string;
    Mode?: string;
    WebUrl?: string;
}
export interface AWSPinpointCampaignLimits {
    Daily?: number;
    MaximumDuration?: number;
    MessagesPerSecond?: number;
    Total?: number;
}
export interface AWSPinpointEmailChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        ConfigurationSet?: string;
        Enabled?: boolean;
        FromAddress: string;
        Identity: string;
        RoleArn?: string;
    };
    Type: "AWS::Pinpoint::EmailChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointEmailTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DefaultSubstitutions?: string;
        HtmlPart?: string;
        Subject: string;
        Tags?: {
            [k: string]: unknown;
        };
        TemplateDescription?: string;
        TemplateName: string;
        TextPart?: string;
    };
    Type: "AWS::Pinpoint::EmailTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointEventStream {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        DestinationStreamArn: string;
        RoleArn: string;
    };
    Type: "AWS::Pinpoint::EventStream";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointGCMChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApiKey: string;
        ApplicationId: string;
        Enabled?: boolean;
    };
    Type: "AWS::Pinpoint::GCMChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointPushTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ADM?: AWSPinpointPushTemplateAndroidPushNotificationTemplate;
        APNS?: AWSPinpointPushTemplateAPNSPushNotificationTemplate;
        Baidu?: AWSPinpointPushTemplateAndroidPushNotificationTemplate;
        Default?: AWSPinpointPushTemplateDefaultPushNotificationTemplate;
        DefaultSubstitutions?: string;
        GCM?: AWSPinpointPushTemplateAndroidPushNotificationTemplate;
        Tags?: {
            [k: string]: unknown;
        };
        TemplateDescription?: string;
        TemplateName: string;
    };
    Type: "AWS::Pinpoint::PushTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointPushTemplateAndroidPushNotificationTemplate {
    Action?: string;
    Body?: string;
    ImageIconUrl?: string;
    ImageUrl?: string;
    SmallImageIconUrl?: string;
    Sound?: string;
    Title?: string;
    Url?: string;
}
export interface AWSPinpointPushTemplateAPNSPushNotificationTemplate {
    Action?: string;
    Body?: string;
    MediaUrl?: string;
    Sound?: string;
    Title?: string;
    Url?: string;
}
export interface AWSPinpointPushTemplateDefaultPushNotificationTemplate {
    Action?: string;
    Body?: string;
    Sound?: string;
    Title?: string;
    Url?: string;
}
export interface AWSPinpointSMSChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        Enabled?: boolean;
        SenderId?: string;
        ShortCode?: string;
    };
    Type: "AWS::Pinpoint::SMSChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointSegment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        Dimensions?: AWSPinpointSegmentSegmentDimensions;
        Name: string;
        SegmentGroups?: AWSPinpointSegmentSegmentGroups;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::Pinpoint::Segment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointSegmentSegmentDimensions {
    Attributes?: {
        [k: string]: unknown;
    };
    Behavior?: AWSPinpointSegmentBehavior;
    Demographic?: AWSPinpointSegmentDemographic;
    Location?: AWSPinpointSegmentLocation;
    Metrics?: {
        [k: string]: unknown;
    };
    UserAttributes?: {
        [k: string]: unknown;
    };
}
export interface AWSPinpointSegmentBehavior {
    Recency?: AWSPinpointSegmentRecency;
}
export interface AWSPinpointSegmentRecency {
    Duration: string;
    RecencyType: string;
}
export interface AWSPinpointSegmentDemographic {
    AppVersion?: AWSPinpointSegmentSetDimension;
    Channel?: AWSPinpointSegmentSetDimension;
    DeviceType?: AWSPinpointSegmentSetDimension;
    Make?: AWSPinpointSegmentSetDimension;
    Model?: AWSPinpointSegmentSetDimension;
    Platform?: AWSPinpointSegmentSetDimension;
}
export interface AWSPinpointSegmentSetDimension {
    DimensionType?: string;
    Values?: string[];
}
export interface AWSPinpointSegmentLocation {
    Country?: AWSPinpointSegmentSetDimension;
    GPSPoint?: AWSPinpointSegmentGPSPoint;
}
export interface AWSPinpointSegmentGPSPoint {
    Coordinates: AWSPinpointSegmentCoordinates;
    RangeInKilometers: number;
}
export interface AWSPinpointSegmentCoordinates {
    Latitude: number;
    Longitude: number;
}
export interface AWSPinpointSegmentSegmentGroups {
    Groups?: AWSPinpointSegmentGroups[];
    Include?: string;
}
export interface AWSPinpointSegmentGroups {
    Dimensions?: AWSPinpointSegmentSegmentDimensions[];
    SourceSegments?: AWSPinpointSegmentSourceSegments[];
    SourceType?: string;
    Type?: string;
}
export interface AWSPinpointSegmentSourceSegments {
    Id: string;
    Version?: number;
}
export interface AWSPinpointSmsTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Body: string;
        DefaultSubstitutions?: string;
        Tags?: {
            [k: string]: unknown;
        };
        TemplateDescription?: string;
        TemplateName: string;
    };
    Type: "AWS::Pinpoint::SmsTemplate";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointVoiceChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplicationId: string;
        Enabled?: boolean;
    };
    Type: "AWS::Pinpoint::VoiceChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointEmailConfigurationSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeliveryOptions?: AWSPinpointEmailConfigurationSetDeliveryOptions;
        Name: string;
        ReputationOptions?: AWSPinpointEmailConfigurationSetReputationOptions;
        SendingOptions?: AWSPinpointEmailConfigurationSetSendingOptions;
        Tags?: AWSPinpointEmailConfigurationSetTags[];
        TrackingOptions?: AWSPinpointEmailConfigurationSetTrackingOptions;
    };
    Type: "AWS::PinpointEmail::ConfigurationSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointEmailConfigurationSetDeliveryOptions {
    SendingPoolName?: string;
}
export interface AWSPinpointEmailConfigurationSetReputationOptions {
    ReputationMetricsEnabled?: boolean;
}
export interface AWSPinpointEmailConfigurationSetSendingOptions {
    SendingEnabled?: boolean;
}
export interface AWSPinpointEmailConfigurationSetTags {
    Key?: string;
    Value?: string;
}
export interface AWSPinpointEmailConfigurationSetTrackingOptions {
    CustomRedirectDomain?: string;
}
export interface AWSPinpointEmailConfigurationSetEventDestination {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConfigurationSetName: string;
        EventDestination?: AWSPinpointEmailConfigurationSetEventDestinationEventDestination;
        EventDestinationName: string;
    };
    Type: "AWS::PinpointEmail::ConfigurationSetEventDestination";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointEmailConfigurationSetEventDestinationEventDestination {
    CloudWatchDestination?: AWSPinpointEmailConfigurationSetEventDestinationCloudWatchDestination;
    Enabled?: boolean;
    KinesisFirehoseDestination?: AWSPinpointEmailConfigurationSetEventDestinationKinesisFirehoseDestination;
    MatchingEventTypes: string[];
    PinpointDestination?: AWSPinpointEmailConfigurationSetEventDestinationPinpointDestination;
    SnsDestination?: AWSPinpointEmailConfigurationSetEventDestinationSnsDestination;
}
export interface AWSPinpointEmailConfigurationSetEventDestinationCloudWatchDestination {
    DimensionConfigurations?: AWSPinpointEmailConfigurationSetEventDestinationDimensionConfiguration[];
}
export interface AWSPinpointEmailConfigurationSetEventDestinationDimensionConfiguration {
    DefaultDimensionValue: string;
    DimensionName: string;
    DimensionValueSource: string;
}
export interface AWSPinpointEmailConfigurationSetEventDestinationKinesisFirehoseDestination {
    DeliveryStreamArn: string;
    IamRoleArn: string;
}
export interface AWSPinpointEmailConfigurationSetEventDestinationPinpointDestination {
    ApplicationArn?: string;
}
export interface AWSPinpointEmailConfigurationSetEventDestinationSnsDestination {
    TopicArn: string;
}
export interface AWSPinpointEmailDedicatedIpPool {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        PoolName?: string;
        Tags?: AWSPinpointEmailDedicatedIpPoolTags[];
    };
    Type: "AWS::PinpointEmail::DedicatedIpPool";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointEmailDedicatedIpPoolTags {
    Key?: string;
    Value?: string;
}
export interface AWSPinpointEmailIdentity {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DkimSigningEnabled?: boolean;
        FeedbackForwardingEnabled?: boolean;
        MailFromAttributes?: AWSPinpointEmailIdentityMailFromAttributes;
        Name: string;
        Tags?: AWSPinpointEmailIdentityTags[];
    };
    Type: "AWS::PinpointEmail::Identity";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSPinpointEmailIdentityMailFromAttributes {
    BehaviorOnMxFailure?: string;
    MailFromDomain?: string;
}
export interface AWSPinpointEmailIdentityTags {
    Key?: string;
    Value?: string;
}
export interface AWSQLDBLedger {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeletionProtection?: boolean;
        KmsKey?: string;
        Name?: string;
        PermissionsMode: string;
        Tags?: Tag[];
    };
    Type: "AWS::QLDB::Ledger";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQLDBStream {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ExclusiveEndTime?: string;
        InclusiveStartTime: string;
        KinesisConfiguration: AWSQLDBStreamKinesisConfiguration;
        LedgerName: string;
        RoleArn: string;
        StreamName: string;
        Tags?: Tag[];
    };
    Type: "AWS::QLDB::Stream";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQLDBStreamKinesisConfiguration {
    AggregationEnabled?: boolean;
    StreamArn?: string;
}
export interface AWSQuickSightAnalysis {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AnalysisId: string;
        AwsAccountId: string;
        Errors?: AWSQuickSightAnalysisAnalysisError[];
        Name?: string;
        Parameters?: AWSQuickSightAnalysisParameters;
        Permissions?: AWSQuickSightAnalysisResourcePermission[];
        SourceEntity?: AWSQuickSightAnalysisAnalysisSourceEntity;
        Tags?: Tag[];
        ThemeArn?: string;
    };
    Type: "AWS::QuickSight::Analysis";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQuickSightAnalysisAnalysisError {
    Message?: string;
    Type?: string;
}
export interface AWSQuickSightAnalysisParameters {
    DateTimeParameters?: AWSQuickSightAnalysisDateTimeParameter[];
    DecimalParameters?: AWSQuickSightAnalysisDecimalParameter[];
    IntegerParameters?: AWSQuickSightAnalysisIntegerParameter[];
    StringParameters?: AWSQuickSightAnalysisStringParameter[];
}
export interface AWSQuickSightAnalysisDateTimeParameter {
    Name: string;
    Values: string[];
}
export interface AWSQuickSightAnalysisDecimalParameter {
    Name: string;
    Values: number[];
}
export interface AWSQuickSightAnalysisIntegerParameter {
    Name: string;
    Values: number[];
}
export interface AWSQuickSightAnalysisStringParameter {
    Name: string;
    Values: string[];
}
export interface AWSQuickSightAnalysisResourcePermission {
    Actions: string[];
    Principal: string;
}
export interface AWSQuickSightAnalysisAnalysisSourceEntity {
    SourceTemplate?: AWSQuickSightAnalysisAnalysisSourceTemplate;
}
export interface AWSQuickSightAnalysisAnalysisSourceTemplate {
    Arn: string;
    DataSetReferences: AWSQuickSightAnalysisDataSetReference[];
}
export interface AWSQuickSightAnalysisDataSetReference {
    DataSetArn: string;
    DataSetPlaceholder: string;
}
export interface AWSQuickSightDashboard {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AwsAccountId: string;
        DashboardId: string;
        DashboardPublishOptions?: AWSQuickSightDashboardDashboardPublishOptions;
        Name?: string;
        Parameters?: AWSQuickSightDashboardParameters;
        Permissions?: AWSQuickSightDashboardResourcePermission[];
        SourceEntity?: AWSQuickSightDashboardDashboardSourceEntity;
        Tags?: Tag[];
        ThemeArn?: string;
        VersionDescription?: string;
    };
    Type: "AWS::QuickSight::Dashboard";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQuickSightDashboardDashboardPublishOptions {
    AdHocFilteringOption?: AWSQuickSightDashboardAdHocFilteringOption;
    ExportToCSVOption?: AWSQuickSightDashboardExportToCSVOption;
    SheetControlsOption?: AWSQuickSightDashboardSheetControlsOption;
}
export interface AWSQuickSightDashboardAdHocFilteringOption {
    AvailabilityStatus?: string;
}
export interface AWSQuickSightDashboardExportToCSVOption {
    AvailabilityStatus?: string;
}
export interface AWSQuickSightDashboardSheetControlsOption {
    VisibilityState?: string;
}
export interface AWSQuickSightDashboardParameters {
    DateTimeParameters?: AWSQuickSightDashboardDateTimeParameter[];
    DecimalParameters?: AWSQuickSightDashboardDecimalParameter[];
    IntegerParameters?: AWSQuickSightDashboardIntegerParameter[];
    StringParameters?: AWSQuickSightDashboardStringParameter[];
}
export interface AWSQuickSightDashboardDateTimeParameter {
    Name: string;
    Values: string[];
}
export interface AWSQuickSightDashboardDecimalParameter {
    Name: string;
    Values: number[];
}
export interface AWSQuickSightDashboardIntegerParameter {
    Name: string;
    Values: number[];
}
export interface AWSQuickSightDashboardStringParameter {
    Name: string;
    Values: string[];
}
export interface AWSQuickSightDashboardResourcePermission {
    Actions: string[];
    Principal: string;
}
export interface AWSQuickSightDashboardDashboardSourceEntity {
    SourceTemplate?: AWSQuickSightDashboardDashboardSourceTemplate;
}
export interface AWSQuickSightDashboardDashboardSourceTemplate {
    Arn: string;
    DataSetReferences: AWSQuickSightDashboardDataSetReference[];
}
export interface AWSQuickSightDashboardDataSetReference {
    DataSetArn: string;
    DataSetPlaceholder: string;
}
export interface AWSQuickSightDataSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AwsAccountId?: string;
        ColumnGroups?: AWSQuickSightDataSetColumnGroup[];
        ColumnLevelPermissionRules?: AWSQuickSightDataSetColumnLevelPermissionRule[];
        DataSetId?: string;
        FieldFolders?: {
            [k: string]: AWSQuickSightDataSetFieldFolder;
        };
        ImportMode?: string;
        IngestionWaitPolicy?: AWSQuickSightDataSetIngestionWaitPolicy;
        LogicalTableMap?: {
            [k: string]: AWSQuickSightDataSetLogicalTable;
        };
        Name?: string;
        Permissions?: AWSQuickSightDataSetResourcePermission[];
        PhysicalTableMap?: {
            [k: string]: AWSQuickSightDataSetPhysicalTable;
        };
        RowLevelPermissionDataSet?: AWSQuickSightDataSetRowLevelPermissionDataSet;
        Tags?: Tag[];
    };
    Type: "AWS::QuickSight::DataSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQuickSightDataSetColumnGroup {
    GeoSpatialColumnGroup?: AWSQuickSightDataSetGeoSpatialColumnGroup;
}
export interface AWSQuickSightDataSetGeoSpatialColumnGroup {
    Columns: string[];
    CountryCode?: string;
    Name: string;
}
export interface AWSQuickSightDataSetColumnLevelPermissionRule {
    ColumnNames?: string[];
    Principals?: string[];
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSQuickSightDataSetFieldFolder {
    Columns?: string[];
    Description?: string;
}
export interface AWSQuickSightDataSetIngestionWaitPolicy {
    IngestionWaitTimeInHours?: number;
    WaitForSpiceIngestion?: boolean;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSQuickSightDataSetLogicalTable {
    Alias: string;
    DataTransforms?: AWSQuickSightDataSetTransformOperation[];
    Source: AWSQuickSightDataSetLogicalTableSource;
}
export interface AWSQuickSightDataSetTransformOperation {
    CastColumnTypeOperation?: AWSQuickSightDataSetCastColumnTypeOperation;
    CreateColumnsOperation?: AWSQuickSightDataSetCreateColumnsOperation;
    FilterOperation?: AWSQuickSightDataSetFilterOperation;
    ProjectOperation?: AWSQuickSightDataSetProjectOperation;
    RenameColumnOperation?: AWSQuickSightDataSetRenameColumnOperation;
    TagColumnOperation?: AWSQuickSightDataSetTagColumnOperation;
}
export interface AWSQuickSightDataSetCastColumnTypeOperation {
    ColumnName: string;
    Format?: string;
    NewColumnType: string;
}
export interface AWSQuickSightDataSetCreateColumnsOperation {
    Columns: AWSQuickSightDataSetCalculatedColumn[];
}
export interface AWSQuickSightDataSetCalculatedColumn {
    ColumnId: string;
    ColumnName: string;
    Expression: string;
}
export interface AWSQuickSightDataSetFilterOperation {
    ConditionExpression: string;
}
export interface AWSQuickSightDataSetProjectOperation {
    ProjectedColumns: string[];
}
export interface AWSQuickSightDataSetRenameColumnOperation {
    ColumnName: string;
    NewColumnName: string;
}
export interface AWSQuickSightDataSetTagColumnOperation {
    ColumnName: string;
    Tags: AWSQuickSightDataSetColumnTag[];
}
export interface AWSQuickSightDataSetColumnTag {
    ColumnDescription?: AWSQuickSightDataSetColumnDescription;
    ColumnGeographicRole?: string;
}
export interface AWSQuickSightDataSetColumnDescription {
    Text?: string;
}
export interface AWSQuickSightDataSetLogicalTableSource {
    JoinInstruction?: AWSQuickSightDataSetJoinInstruction;
    PhysicalTableId?: string;
}
export interface AWSQuickSightDataSetJoinInstruction {
    LeftJoinKeyProperties?: AWSQuickSightDataSetJoinKeyProperties;
    LeftOperand: string;
    OnClause: string;
    RightJoinKeyProperties?: AWSQuickSightDataSetJoinKeyProperties;
    RightOperand: string;
    Type: string;
}
export interface AWSQuickSightDataSetJoinKeyProperties {
    UniqueKey?: boolean;
}
export interface AWSQuickSightDataSetResourcePermission {
    Actions: string[];
    Principal: string;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSQuickSightDataSetPhysicalTable {
    CustomSql?: AWSQuickSightDataSetCustomSql;
    RelationalTable?: AWSQuickSightDataSetRelationalTable;
    S3Source?: AWSQuickSightDataSetS3Source;
}
export interface AWSQuickSightDataSetCustomSql {
    Columns: AWSQuickSightDataSetInputColumn[];
    DataSourceArn: string;
    Name: string;
    SqlQuery: string;
}
export interface AWSQuickSightDataSetInputColumn {
    Name: string;
    Type: string;
}
export interface AWSQuickSightDataSetRelationalTable {
    Catalog?: string;
    DataSourceArn: string;
    InputColumns: AWSQuickSightDataSetInputColumn[];
    Name: string;
    Schema?: string;
}
export interface AWSQuickSightDataSetS3Source {
    DataSourceArn: string;
    InputColumns: AWSQuickSightDataSetInputColumn[];
    UploadSettings?: AWSQuickSightDataSetUploadSettings;
}
export interface AWSQuickSightDataSetUploadSettings {
    ContainsHeader?: boolean;
    Delimiter?: string;
    Format?: string;
    StartFromRow?: number;
    TextQualifier?: string;
}
export interface AWSQuickSightDataSetRowLevelPermissionDataSet {
    Arn: string;
    FormatVersion?: string;
    Namespace?: string;
    PermissionPolicy: string;
}
export interface AWSQuickSightDataSource {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AlternateDataSourceParameters?: AWSQuickSightDataSourceDataSourceParameters[];
        AwsAccountId?: string;
        Credentials?: AWSQuickSightDataSourceDataSourceCredentials;
        DataSourceId?: string;
        DataSourceParameters?: AWSQuickSightDataSourceDataSourceParameters;
        ErrorInfo?: AWSQuickSightDataSourceDataSourceErrorInfo;
        Name?: string;
        Permissions?: AWSQuickSightDataSourceResourcePermission[];
        SslProperties?: AWSQuickSightDataSourceSslProperties;
        Tags?: Tag[];
        Type?: string;
        VpcConnectionProperties?: AWSQuickSightDataSourceVpcConnectionProperties;
    };
    Type: "AWS::QuickSight::DataSource";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQuickSightDataSourceDataSourceParameters {
    AmazonElasticsearchParameters?: AWSQuickSightDataSourceAmazonElasticsearchParameters;
    AthenaParameters?: AWSQuickSightDataSourceAthenaParameters;
    AuroraParameters?: AWSQuickSightDataSourceAuroraParameters;
    AuroraPostgreSqlParameters?: AWSQuickSightDataSourceAuroraPostgreSqlParameters;
    MariaDbParameters?: AWSQuickSightDataSourceMariaDbParameters;
    MySqlParameters?: AWSQuickSightDataSourceMySqlParameters;
    OracleParameters?: AWSQuickSightDataSourceOracleParameters;
    PostgreSqlParameters?: AWSQuickSightDataSourcePostgreSqlParameters;
    PrestoParameters?: AWSQuickSightDataSourcePrestoParameters;
    RdsParameters?: AWSQuickSightDataSourceRdsParameters;
    RedshiftParameters?: AWSQuickSightDataSourceRedshiftParameters;
    S3Parameters?: AWSQuickSightDataSourceS3Parameters;
    SnowflakeParameters?: AWSQuickSightDataSourceSnowflakeParameters;
    SparkParameters?: AWSQuickSightDataSourceSparkParameters;
    SqlServerParameters?: AWSQuickSightDataSourceSqlServerParameters;
    TeradataParameters?: AWSQuickSightDataSourceTeradataParameters;
}
export interface AWSQuickSightDataSourceAmazonElasticsearchParameters {
    Domain: string;
}
export interface AWSQuickSightDataSourceAthenaParameters {
    WorkGroup?: string;
}
export interface AWSQuickSightDataSourceAuroraParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceAuroraPostgreSqlParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceMariaDbParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceMySqlParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceOracleParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourcePostgreSqlParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourcePrestoParameters {
    Catalog: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceRdsParameters {
    Database: string;
    InstanceId: string;
}
export interface AWSQuickSightDataSourceRedshiftParameters {
    ClusterId?: string;
    Database: string;
    Host?: string;
    Port?: number;
}
export interface AWSQuickSightDataSourceS3Parameters {
    ManifestFileLocation: AWSQuickSightDataSourceManifestFileLocation;
}
export interface AWSQuickSightDataSourceManifestFileLocation {
    Bucket: string;
    Key: string;
}
export interface AWSQuickSightDataSourceSnowflakeParameters {
    Database: string;
    Host: string;
    Warehouse: string;
}
export interface AWSQuickSightDataSourceSparkParameters {
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceSqlServerParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceTeradataParameters {
    Database: string;
    Host: string;
    Port: number;
}
export interface AWSQuickSightDataSourceDataSourceCredentials {
    CopySourceArn?: string;
    CredentialPair?: AWSQuickSightDataSourceCredentialPair;
}
export interface AWSQuickSightDataSourceCredentialPair {
    AlternateDataSourceParameters?: AWSQuickSightDataSourceDataSourceParameters[];
    Password: string;
    Username: string;
}
export interface AWSQuickSightDataSourceDataSourceErrorInfo {
    Message?: string;
    Type?: string;
}
export interface AWSQuickSightDataSourceResourcePermission {
    Actions: string[];
    Principal: string;
}
export interface AWSQuickSightDataSourceSslProperties {
    DisableSsl?: boolean;
}
export interface AWSQuickSightDataSourceVpcConnectionProperties {
    VpcConnectionArn: string;
}
export interface AWSQuickSightTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AwsAccountId: string;
        Name?: string;
        Permissions?: AWSQuickSightTemplateResourcePermission[];
        SourceEntity?: AWSQuickSightTemplateTemplateSourceEntity;
        Tags?: Tag[];
        TemplateId: string;
        VersionDescription?: string;
    };
    Type: "AWS::QuickSight::Template";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQuickSightTemplateResourcePermission {
    Actions: string[];
    Principal: string;
}
export interface AWSQuickSightTemplateTemplateSourceEntity {
    SourceAnalysis?: AWSQuickSightTemplateTemplateSourceAnalysis;
    SourceTemplate?: AWSQuickSightTemplateTemplateSourceTemplate;
}
export interface AWSQuickSightTemplateTemplateSourceAnalysis {
    Arn: string;
    DataSetReferences: AWSQuickSightTemplateDataSetReference[];
}
export interface AWSQuickSightTemplateDataSetReference {
    DataSetArn: string;
    DataSetPlaceholder: string;
}
export interface AWSQuickSightTemplateTemplateSourceTemplate {
    Arn: string;
}
export interface AWSQuickSightTheme {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AwsAccountId: string;
        BaseThemeId?: string;
        Configuration?: AWSQuickSightThemeThemeConfiguration;
        Name?: string;
        Permissions?: AWSQuickSightThemeResourcePermission[];
        Tags?: Tag[];
        ThemeId: string;
        VersionDescription?: string;
    };
    Type: "AWS::QuickSight::Theme";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSQuickSightThemeThemeConfiguration {
    DataColorPalette?: AWSQuickSightThemeDataColorPalette;
    Sheet?: AWSQuickSightThemeSheetStyle;
    Typography?: AWSQuickSightThemeTypography;
    UIColorPalette?: AWSQuickSightThemeUIColorPalette;
}
export interface AWSQuickSightThemeDataColorPalette {
    Colors?: string[];
    EmptyFillColor?: string;
    MinMaxGradient?: string[];
}
export interface AWSQuickSightThemeSheetStyle {
    Tile?: AWSQuickSightThemeTileStyle;
    TileLayout?: AWSQuickSightThemeTileLayoutStyle;
}
export interface AWSQuickSightThemeTileStyle {
    Border?: AWSQuickSightThemeBorderStyle;
}
export interface AWSQuickSightThemeBorderStyle {
    Show?: boolean;
}
export interface AWSQuickSightThemeTileLayoutStyle {
    Gutter?: AWSQuickSightThemeGutterStyle;
    Margin?: AWSQuickSightThemeMarginStyle;
}
export interface AWSQuickSightThemeGutterStyle {
    Show?: boolean;
}
export interface AWSQuickSightThemeMarginStyle {
    Show?: boolean;
}
export interface AWSQuickSightThemeTypography {
    FontFamilies?: AWSQuickSightThemeFont[];
}
export interface AWSQuickSightThemeFont {
    FontFamily?: string;
}
export interface AWSQuickSightThemeUIColorPalette {
    Accent?: string;
    AccentForeground?: string;
    Danger?: string;
    DangerForeground?: string;
    Dimension?: string;
    DimensionForeground?: string;
    Measure?: string;
    MeasureForeground?: string;
    PrimaryBackground?: string;
    PrimaryForeground?: string;
    SecondaryBackground?: string;
    SecondaryForeground?: string;
    Success?: string;
    SuccessForeground?: string;
    Warning?: string;
    WarningForeground?: string;
}
export interface AWSQuickSightThemeResourcePermission {
    Actions: string[];
    Principal: string;
}
export interface AWSRAMResourceShare {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowExternalPrincipals?: boolean;
        Name: string;
        PermissionArns?: string[];
        Principals?: string[];
        ResourceArns?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::RAM::ResourceShare";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssociatedRoles?: AWSRDSDBClusterDBClusterRole[];
        AvailabilityZones?: string[];
        BacktrackWindow?: number;
        BackupRetentionPeriod?: number;
        CopyTagsToSnapshot?: boolean;
        DBClusterIdentifier?: string;
        DBClusterParameterGroupName?: string;
        DBSubnetGroupName?: string;
        DatabaseName?: string;
        DeletionProtection?: boolean;
        EnableCloudwatchLogsExports?: string[];
        EnableHttpEndpoint?: boolean;
        EnableIAMDatabaseAuthentication?: boolean;
        Engine: string;
        EngineMode?: string;
        EngineVersion?: string;
        GlobalClusterIdentifier?: string;
        KmsKeyId?: string;
        MasterUserPassword?: string;
        MasterUsername?: string;
        Port?: number;
        PreferredBackupWindow?: string;
        PreferredMaintenanceWindow?: string;
        ReplicationSourceIdentifier?: string;
        RestoreType?: string;
        ScalingConfiguration?: AWSRDSDBClusterScalingConfiguration;
        SnapshotIdentifier?: string;
        SourceDBClusterIdentifier?: string;
        SourceRegion?: string;
        StorageEncrypted?: boolean;
        Tags?: Tag[];
        UseLatestRestorableTime?: boolean;
        VpcSecurityGroupIds?: string[];
    };
    Type: "AWS::RDS::DBCluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBClusterDBClusterRole {
    FeatureName?: string;
    RoleArn: string;
}
export interface AWSRDSDBClusterScalingConfiguration {
    AutoPause?: boolean;
    MaxCapacity?: number;
    MinCapacity?: number;
    SecondsUntilAutoPause?: number;
}
export interface AWSRDSDBClusterParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        Family: string;
        Parameters: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::RDS::DBClusterParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllocatedStorage?: string;
        AllowMajorVersionUpgrade?: boolean;
        AssociatedRoles?: AWSRDSDBInstanceDBInstanceRole[];
        AutoMinorVersionUpgrade?: boolean;
        AvailabilityZone?: string;
        BackupRetentionPeriod?: number;
        CACertificateIdentifier?: string;
        CharacterSetName?: string;
        CopyTagsToSnapshot?: boolean;
        DBClusterIdentifier?: string;
        DBInstanceClass: string;
        DBInstanceIdentifier?: string;
        DBName?: string;
        DBParameterGroupName?: string;
        DBSecurityGroups?: string[];
        DBSnapshotIdentifier?: string;
        DBSubnetGroupName?: string;
        DeleteAutomatedBackups?: boolean;
        DeletionProtection?: boolean;
        Domain?: string;
        DomainIAMRoleName?: string;
        EnableCloudwatchLogsExports?: string[];
        EnableIAMDatabaseAuthentication?: boolean;
        EnablePerformanceInsights?: boolean;
        Engine?: string;
        EngineVersion?: string;
        Iops?: number;
        KmsKeyId?: string;
        LicenseModel?: string;
        MasterUserPassword?: string;
        MasterUsername?: string;
        MaxAllocatedStorage?: number;
        MonitoringInterval?: number;
        MonitoringRoleArn?: string;
        MultiAZ?: boolean;
        OptionGroupName?: string;
        PerformanceInsightsKMSKeyId?: string;
        PerformanceInsightsRetentionPeriod?: number;
        Port?: string;
        PreferredBackupWindow?: string;
        PreferredMaintenanceWindow?: string;
        ProcessorFeatures?: AWSRDSDBInstanceProcessorFeature[];
        PromotionTier?: number;
        PubliclyAccessible?: boolean;
        SourceDBInstanceIdentifier?: string;
        SourceRegion?: string;
        StorageEncrypted?: boolean;
        StorageType?: string;
        Tags?: Tag[];
        Timezone?: string;
        UseDefaultProcessorFeatures?: boolean;
        VPCSecurityGroups?: string[];
    };
    Type: "AWS::RDS::DBInstance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBInstanceDBInstanceRole {
    FeatureName: string;
    RoleArn: string;
}
export interface AWSRDSDBInstanceProcessorFeature {
    Name?: string;
    Value?: string;
}
export interface AWSRDSDBParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        Family: string;
        Parameters?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::RDS::DBParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBProxy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Auth: AWSRDSDBProxyAuthFormat[];
        DBProxyName: string;
        DebugLogging?: boolean;
        EngineFamily: string;
        IdleClientTimeout?: number;
        RequireTLS?: boolean;
        RoleArn: string;
        Tags?: AWSRDSDBProxyTagFormat[];
        VpcSecurityGroupIds?: string[];
        VpcSubnetIds: string[];
    };
    Type: "AWS::RDS::DBProxy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBProxyAuthFormat {
    AuthScheme?: string;
    Description?: string;
    IAMAuth?: string;
    SecretArn?: string;
    UserName?: string;
}
export interface AWSRDSDBProxyTagFormat {
    Key?: string;
    Value?: string;
}
export interface AWSRDSDBProxyEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DBProxyEndpointName: string;
        DBProxyName: string;
        Tags?: AWSRDSDBProxyEndpointTagFormat[];
        TargetRole?: string;
        VpcSecurityGroupIds?: string[];
        VpcSubnetIds: string[];
    };
    Type: "AWS::RDS::DBProxyEndpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBProxyEndpointTagFormat {
    Key?: string;
    Value?: string;
}
export interface AWSRDSDBProxyTargetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectionPoolConfigurationInfo?: AWSRDSDBProxyTargetGroupConnectionPoolConfigurationInfoFormat;
        DBClusterIdentifiers?: string[];
        DBInstanceIdentifiers?: string[];
        DBProxyName: string;
        TargetGroupName: string;
    };
    Type: "AWS::RDS::DBProxyTargetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBProxyTargetGroupConnectionPoolConfigurationInfoFormat {
    ConnectionBorrowTimeout?: number;
    InitQuery?: string;
    MaxConnectionsPercent?: number;
    MaxIdleConnectionsPercent?: number;
    SessionPinningFilters?: string[];
}
export interface AWSRDSDBSecurityGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DBSecurityGroupIngress: AWSRDSDBSecurityGroupIngress[];
        EC2VpcId?: string;
        GroupDescription: string;
        Tags?: Tag[];
    };
    Type: "AWS::RDS::DBSecurityGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBSecurityGroupIngress {
    CIDRIP?: string;
    EC2SecurityGroupId?: string;
    EC2SecurityGroupName?: string;
    EC2SecurityGroupOwnerId?: string;
}
export interface AWSRDSDBSecurityGroupIngress1 {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CIDRIP?: string;
        DBSecurityGroupName: string;
        EC2SecurityGroupId?: string;
        EC2SecurityGroupName?: string;
        EC2SecurityGroupOwnerId?: string;
    };
    Type: "AWS::RDS::DBSecurityGroupIngress";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSDBSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DBSubnetGroupDescription: string;
        DBSubnetGroupName?: string;
        SubnetIds: string[];
        Tags?: Tag[];
    };
    Type: "AWS::RDS::DBSubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSEventSubscription {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Enabled?: boolean;
        EventCategories?: string[];
        SnsTopicArn: string;
        SourceIds?: string[];
        SourceType?: string;
    };
    Type: "AWS::RDS::EventSubscription";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSGlobalCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        DeletionProtection?: boolean;
        Engine?: string;
        EngineVersion?: string;
        GlobalClusterIdentifier?: string;
        SourceDBClusterIdentifier?: string;
        StorageEncrypted?: boolean;
    };
    Type: "AWS::RDS::GlobalCluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSOptionGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EngineName: string;
        MajorEngineVersion: string;
        OptionConfigurations: AWSRDSOptionGroupOptionConfiguration[];
        OptionGroupDescription: string;
        Tags?: Tag[];
    };
    Type: "AWS::RDS::OptionGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRDSOptionGroupOptionConfiguration {
    DBSecurityGroupMemberships?: string[];
    OptionName: string;
    OptionSettings?: AWSRDSOptionGroupOptionSetting[];
    OptionVersion?: string;
    Port?: number;
    VpcSecurityGroupMemberships?: string[];
}
export interface AWSRDSOptionGroupOptionSetting {
    Name?: string;
    Value?: string;
}
export interface AWSRedshiftCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowVersionUpgrade?: boolean;
        AquaConfigurationStatus?: string;
        AutomatedSnapshotRetentionPeriod?: number;
        AvailabilityZone?: string;
        AvailabilityZoneRelocation?: boolean;
        AvailabilityZoneRelocationStatus?: string;
        Classic?: boolean;
        ClusterIdentifier?: string;
        ClusterParameterGroupName?: string;
        ClusterSecurityGroups?: string[];
        ClusterSubnetGroupName?: string;
        ClusterType: string;
        ClusterVersion?: string;
        DBName: string;
        DeferMaintenance?: boolean;
        DeferMaintenanceDuration?: number;
        DeferMaintenanceEndTime?: string;
        DeferMaintenanceStartTime?: string;
        DestinationRegion?: string;
        ElasticIp?: string;
        Encrypted?: boolean;
        Endpoint?: AWSRedshiftClusterEndpoint;
        EnhancedVpcRouting?: boolean;
        HsmClientCertificateIdentifier?: string;
        HsmConfigurationIdentifier?: string;
        IamRoles?: string[];
        KmsKeyId?: string;
        LoggingProperties?: AWSRedshiftClusterLoggingProperties;
        MaintenanceTrackName?: string;
        ManualSnapshotRetentionPeriod?: number;
        MasterUserPassword: string;
        MasterUsername: string;
        NodeType: string;
        NumberOfNodes?: number;
        OwnerAccount?: string;
        Port?: number;
        PreferredMaintenanceWindow?: string;
        PubliclyAccessible?: boolean;
        ResourceAction?: string;
        RevisionTarget?: string;
        RotateEncryptionKey?: boolean;
        SnapshotClusterIdentifier?: string;
        SnapshotCopyGrantName?: string;
        SnapshotCopyManual?: boolean;
        SnapshotCopyRetentionPeriod?: number;
        SnapshotIdentifier?: string;
        Tags?: Tag[];
        VpcSecurityGroupIds?: string[];
    };
    Type: "AWS::Redshift::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRedshiftClusterEndpoint {
    Address?: string;
    Port?: string;
}
export interface AWSRedshiftClusterLoggingProperties {
    BucketName: string;
    S3KeyPrefix?: string;
}
export interface AWSRedshiftClusterParameterGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        ParameterGroupFamily: string;
        Parameters?: AWSRedshiftClusterParameterGroupParameter[];
        Tags?: Tag[];
    };
    Type: "AWS::Redshift::ClusterParameterGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRedshiftClusterParameterGroupParameter {
    ParameterName: string;
    ParameterValue: string;
}
export interface AWSRedshiftClusterSecurityGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        Tags?: Tag[];
    };
    Type: "AWS::Redshift::ClusterSecurityGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRedshiftClusterSecurityGroupIngress {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CIDRIP?: string;
        ClusterSecurityGroupName: string;
        EC2SecurityGroupName?: string;
        EC2SecurityGroupOwnerId?: string;
    };
    Type: "AWS::Redshift::ClusterSecurityGroupIngress";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRedshiftClusterSubnetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description: string;
        SubnetIds: string[];
        Tags?: Tag[];
    };
    Type: "AWS::Redshift::ClusterSubnetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSResourceGroupsGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Configuration?: AWSResourceGroupsGroupConfigurationItem[];
        Description?: string;
        Name: string;
        ResourceQuery?: AWSResourceGroupsGroupResourceQuery;
        Resources?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::ResourceGroups::Group";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSResourceGroupsGroupConfigurationItem {
    Parameters?: AWSResourceGroupsGroupConfigurationParameter[];
    Type?: string;
}
export interface AWSResourceGroupsGroupConfigurationParameter {
    Name?: string;
    Values?: string[];
}
export interface AWSResourceGroupsGroupResourceQuery {
    Query?: AWSResourceGroupsGroupQuery;
    Type?: string;
}
export interface AWSResourceGroupsGroupQuery {
    ResourceTypeFilters?: string[];
    StackIdentifier?: string;
    TagFilters?: AWSResourceGroupsGroupTagFilter[];
}
export interface AWSResourceGroupsGroupTagFilter {
    Key?: string;
    Values?: string[];
}
export interface AWSRoboMakerFleet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Name?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::RoboMaker::Fleet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoboMakerRobot {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Architecture: string;
        Fleet?: string;
        GreengrassGroupId: string;
        Name?: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::RoboMaker::Robot";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoboMakerRobotApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CurrentRevisionId?: string;
        Name?: string;
        RobotSoftwareSuite: AWSRoboMakerRobotApplicationRobotSoftwareSuite;
        Sources: AWSRoboMakerRobotApplicationSourceConfig[];
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::RoboMaker::RobotApplication";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoboMakerRobotApplicationRobotSoftwareSuite {
    Name: string;
    Version: string;
}
export interface AWSRoboMakerRobotApplicationSourceConfig {
    Architecture: string;
    S3Bucket: string;
    S3Key: string;
}
export interface AWSRoboMakerRobotApplicationVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Application: string;
        CurrentRevisionId?: string;
    };
    Type: "AWS::RoboMaker::RobotApplicationVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoboMakerSimulationApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CurrentRevisionId?: string;
        Environment?: string;
        Name?: string;
        RenderingEngine?: AWSRoboMakerSimulationApplicationRenderingEngine;
        RobotSoftwareSuite: AWSRoboMakerSimulationApplicationRobotSoftwareSuite;
        SimulationSoftwareSuite: AWSRoboMakerSimulationApplicationSimulationSoftwareSuite;
        Sources?: AWSRoboMakerSimulationApplicationSourceConfig[];
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::RoboMaker::SimulationApplication";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoboMakerSimulationApplicationRenderingEngine {
    Name: string;
    Version: string;
}
export interface AWSRoboMakerSimulationApplicationRobotSoftwareSuite {
    Name: string;
    Version: string;
}
export interface AWSRoboMakerSimulationApplicationSimulationSoftwareSuite {
    Name: string;
    Version: string;
}
export interface AWSRoboMakerSimulationApplicationSourceConfig {
    Architecture: string;
    S3Bucket: string;
    S3Key: string;
}
export interface AWSRoboMakerSimulationApplicationVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Application: string;
        CurrentRevisionId?: string;
    };
    Type: "AWS::RoboMaker::SimulationApplicationVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53DNSSEC {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        HostedZoneId: string;
    };
    Type: "AWS::Route53::DNSSEC";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53HealthCheck {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        HealthCheckConfig: {
            [k: string]: unknown;
        };
        HealthCheckTags?: AWSRoute53HealthCheckHealthCheckTag[];
    };
    Type: "AWS::Route53::HealthCheck";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53HealthCheckHealthCheckTag {
    Key: string;
    Value: string;
}
export interface AWSRoute53HostedZone {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        HostedZoneConfig?: AWSRoute53HostedZoneHostedZoneConfig;
        HostedZoneTags?: AWSRoute53HostedZoneHostedZoneTag[];
        Name: string;
        QueryLoggingConfig?: AWSRoute53HostedZoneQueryLoggingConfig;
        VPCs?: AWSRoute53HostedZoneVPC[];
    };
    Type: "AWS::Route53::HostedZone";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53HostedZoneHostedZoneConfig {
    Comment?: string;
}
export interface AWSRoute53HostedZoneHostedZoneTag {
    Key: string;
    Value: string;
}
export interface AWSRoute53HostedZoneQueryLoggingConfig {
    CloudWatchLogsLogGroupArn: string;
}
export interface AWSRoute53HostedZoneVPC {
    VPCId: string;
    VPCRegion: string;
}
export interface AWSRoute53KeySigningKey {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        HostedZoneId: string;
        KeyManagementServiceArn: string;
        Name: string;
        Status: string;
    };
    Type: "AWS::Route53::KeySigningKey";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecordSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AliasTarget?: AWSRoute53RecordSetAliasTarget;
        Comment?: string;
        Failover?: string;
        GeoLocation?: AWSRoute53RecordSetGeoLocation;
        HealthCheckId?: string;
        HostedZoneId?: string;
        HostedZoneName?: string;
        MultiValueAnswer?: boolean;
        Name: string;
        Region?: string;
        ResourceRecords?: string[];
        SetIdentifier?: string;
        TTL?: string;
        Type: string;
        Weight?: number;
    };
    Type: "AWS::Route53::RecordSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecordSetAliasTarget {
    DNSName: string;
    EvaluateTargetHealth?: boolean;
    HostedZoneId: string;
}
export interface AWSRoute53RecordSetGeoLocation {
    ContinentCode?: string;
    CountryCode?: string;
    SubdivisionCode?: string;
}
export interface AWSRoute53RecordSetGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Comment?: string;
        HostedZoneId?: string;
        HostedZoneName?: string;
        RecordSets?: AWSRoute53RecordSetGroupRecordSet[];
    };
    Type: "AWS::Route53::RecordSetGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecordSetGroupRecordSet {
    AliasTarget?: AWSRoute53RecordSetGroupAliasTarget;
    Comment?: string;
    Failover?: string;
    GeoLocation?: AWSRoute53RecordSetGroupGeoLocation;
    HealthCheckId?: string;
    HostedZoneId?: string;
    HostedZoneName?: string;
    MultiValueAnswer?: boolean;
    Name: string;
    Region?: string;
    ResourceRecords?: string[];
    SetIdentifier?: string;
    TTL?: string;
    Type: string;
    Weight?: number;
}
export interface AWSRoute53RecordSetGroupAliasTarget {
    DNSName: string;
    EvaluateTargetHealth?: boolean;
    HostedZoneId: string;
}
export interface AWSRoute53RecordSetGroupGeoLocation {
    ContinentCode?: string;
    CountryCode?: string;
    SubdivisionCode?: string;
}
export interface AWSRoute53RecoveryControlCluster {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Name?: string;
    };
    Type: "AWS::Route53RecoveryControl::Cluster";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryControlControlPanel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClusterArn?: string;
        Name: string;
    };
    Type: "AWS::Route53RecoveryControl::ControlPanel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryControlRoutingControl {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ClusterArn?: string;
        ControlPanelArn?: string;
        Name: string;
    };
    Type: "AWS::Route53RecoveryControl::RoutingControl";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryControlSafetyRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AssertionRule?: AWSRoute53RecoveryControlSafetyRuleAssertionRule;
        ControlPanelArn: string;
        GatingRule?: AWSRoute53RecoveryControlSafetyRuleGatingRule;
        Name: string;
        RuleConfig: AWSRoute53RecoveryControlSafetyRuleRuleConfig;
    };
    Type: "AWS::Route53RecoveryControl::SafetyRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryControlSafetyRuleAssertionRule {
    AssertedControls: string[];
    WaitPeriodMs: number;
}
export interface AWSRoute53RecoveryControlSafetyRuleGatingRule {
    GatingControls: string[];
    TargetControls: string[];
    WaitPeriodMs: number;
}
export interface AWSRoute53RecoveryControlSafetyRuleRuleConfig {
    Inverted: boolean;
    Threshold: number;
    Type: string;
}
export interface AWSRoute53RecoveryReadinessCell {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CellName: string;
        Cells?: string[];
        Tags?: Tag[];
    };
    Type: "AWS::Route53RecoveryReadiness::Cell";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryReadinessReadinessCheck {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ReadinessCheckName: string;
        ResourceSetName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Route53RecoveryReadiness::ReadinessCheck";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryReadinessRecoveryGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Cells?: string[];
        RecoveryGroupName: string;
        Tags?: Tag[];
    };
    Type: "AWS::Route53RecoveryReadiness::RecoveryGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryReadinessResourceSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceSetName: string;
        ResourceSetType: string;
        Resources: AWSRoute53RecoveryReadinessResourceSetResource[];
        Tags?: Tag[];
    };
    Type: "AWS::Route53RecoveryReadiness::ResourceSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53RecoveryReadinessResourceSetResource {
    ComponentId?: string;
    DnsTargetResource?: AWSRoute53RecoveryReadinessResourceSetDNSTargetResource;
    ReadinessScopes?: string[];
    ResourceArn?: string;
}
export interface AWSRoute53RecoveryReadinessResourceSetDNSTargetResource {
    DomainName?: string;
    HostedZoneArn?: string;
    RecordSetId?: string;
    RecordType?: string;
    TargetResource?: AWSRoute53RecoveryReadinessResourceSetTargetResource;
}
export interface AWSRoute53RecoveryReadinessResourceSetTargetResource {
    NLBResource?: AWSRoute53RecoveryReadinessResourceSetNLBResource;
    R53Resource?: AWSRoute53RecoveryReadinessResourceSetR53ResourceRecord;
}
export interface AWSRoute53RecoveryReadinessResourceSetNLBResource {
    Arn?: string;
}
export interface AWSRoute53RecoveryReadinessResourceSetR53ResourceRecord {
    DomainName?: string;
    RecordSetId?: string;
}
export interface AWSRoute53ResolverFirewallDomainList {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        DomainFileUrl?: string;
        Domains?: string[];
        Name?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Route53Resolver::FirewallDomainList";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverFirewallRuleGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        FirewallRules?: AWSRoute53ResolverFirewallRuleGroupFirewallRule[];
        Name?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Route53Resolver::FirewallRuleGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverFirewallRuleGroupFirewallRule {
    Action: string;
    BlockOverrideDnsType?: string;
    BlockOverrideDomain?: string;
    BlockOverrideTtl?: number;
    BlockResponse?: string;
    FirewallDomainListId: string;
    Priority: number;
}
export interface AWSRoute53ResolverFirewallRuleGroupAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        FirewallRuleGroupId: string;
        MutationProtection?: string;
        Name?: string;
        Priority: number;
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::Route53Resolver::FirewallRuleGroupAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverResolverDNSSECConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ResourceId?: string;
    };
    Type: "AWS::Route53Resolver::ResolverDNSSECConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverResolverEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Direction: string;
        IpAddresses: AWSRoute53ResolverResolverEndpointIpAddressRequest[];
        Name?: string;
        SecurityGroupIds: string[];
        Tags?: Tag[];
    };
    Type: "AWS::Route53Resolver::ResolverEndpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverResolverEndpointIpAddressRequest {
    Ip?: string;
    SubnetId: string;
}
export interface AWSRoute53ResolverResolverQueryLoggingConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        DestinationArn?: string;
        Name?: string;
    };
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverResolverQueryLoggingConfigAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ResolverQueryLogConfigId?: string;
        ResourceId?: string;
    };
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverResolverRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DomainName: string;
        Name?: string;
        ResolverEndpointId?: string;
        RuleType: string;
        Tags?: Tag[];
        TargetIps?: AWSRoute53ResolverResolverRuleTargetAddress[];
    };
    Type: "AWS::Route53Resolver::ResolverRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSRoute53ResolverResolverRuleTargetAddress {
    Ip: string;
    Port?: string;
}
export interface AWSRoute53ResolverResolverRuleAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        ResolverRuleId: string;
        VPCId: string;
    };
    Type: "AWS::Route53Resolver::ResolverRuleAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3AccessPoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Bucket: string;
        Name?: string;
        Policy?: {
            [k: string]: unknown;
        };
        PolicyStatus?: {
            [k: string]: unknown;
        };
        PublicAccessBlockConfiguration?: AWSS3AccessPointPublicAccessBlockConfiguration;
        VpcConfiguration?: AWSS3AccessPointVpcConfiguration;
    };
    Type: "AWS::S3::AccessPoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3AccessPointPublicAccessBlockConfiguration {
    BlockPublicAcls?: boolean;
    BlockPublicPolicy?: boolean;
    IgnorePublicAcls?: boolean;
    RestrictPublicBuckets?: boolean;
}
export interface AWSS3AccessPointVpcConfiguration {
    VpcId?: string;
}
export interface AWSS3Bucket {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AccelerateConfiguration?: AWSS3BucketAccelerateConfiguration;
        AccessControl?: string;
        AnalyticsConfigurations?: AWSS3BucketAnalyticsConfiguration[];
        BucketEncryption?: AWSS3BucketBucketEncryption;
        BucketName?: string;
        CorsConfiguration?: AWSS3BucketCorsConfiguration;
        IntelligentTieringConfigurations?: AWSS3BucketIntelligentTieringConfiguration[];
        InventoryConfigurations?: AWSS3BucketInventoryConfiguration[];
        LifecycleConfiguration?: AWSS3BucketLifecycleConfiguration;
        LoggingConfiguration?: AWSS3BucketLoggingConfiguration;
        MetricsConfigurations?: AWSS3BucketMetricsConfiguration[];
        NotificationConfiguration?: AWSS3BucketNotificationConfiguration;
        ObjectLockConfiguration?: AWSS3BucketObjectLockConfiguration;
        ObjectLockEnabled?: boolean;
        OwnershipControls?: AWSS3BucketOwnershipControls;
        PublicAccessBlockConfiguration?: AWSS3BucketPublicAccessBlockConfiguration;
        ReplicationConfiguration?: AWSS3BucketReplicationConfiguration;
        Tags?: Tag[];
        VersioningConfiguration?: AWSS3BucketVersioningConfiguration;
        WebsiteConfiguration?: AWSS3BucketWebsiteConfiguration;
    };
    Type: "AWS::S3::Bucket";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3BucketAccelerateConfiguration {
    AccelerationStatus: string;
}
export interface AWSS3BucketAnalyticsConfiguration {
    Id: string;
    Prefix?: string;
    StorageClassAnalysis: AWSS3BucketStorageClassAnalysis;
    TagFilters?: AWSS3BucketTagFilter[];
}
export interface AWSS3BucketStorageClassAnalysis {
    DataExport?: AWSS3BucketDataExport;
}
export interface AWSS3BucketDataExport {
    Destination: AWSS3BucketDestination;
    OutputSchemaVersion: string;
}
export interface AWSS3BucketDestination {
    BucketAccountId?: string;
    BucketArn: string;
    Format: string;
    Prefix?: string;
}
export interface AWSS3BucketTagFilter {
    Key: string;
    Value: string;
}
export interface AWSS3BucketBucketEncryption {
    ServerSideEncryptionConfiguration: AWSS3BucketServerSideEncryptionRule[];
}
export interface AWSS3BucketServerSideEncryptionRule {
    BucketKeyEnabled?: boolean;
    ServerSideEncryptionByDefault?: AWSS3BucketServerSideEncryptionByDefault;
}
export interface AWSS3BucketServerSideEncryptionByDefault {
    KMSMasterKeyID?: string;
    SSEAlgorithm: string;
}
export interface AWSS3BucketCorsConfiguration {
    CorsRules: AWSS3BucketCorsRule[];
}
export interface AWSS3BucketCorsRule {
    AllowedHeaders?: string[];
    AllowedMethods: string[];
    AllowedOrigins: string[];
    ExposedHeaders?: string[];
    Id?: string;
    MaxAge?: number;
}
export interface AWSS3BucketIntelligentTieringConfiguration {
    Id: string;
    Prefix?: string;
    Status: string;
    TagFilters?: AWSS3BucketTagFilter[];
    Tierings: AWSS3BucketTiering[];
}
export interface AWSS3BucketTiering {
    AccessTier: string;
    Days: number;
}
export interface AWSS3BucketInventoryConfiguration {
    Destination: AWSS3BucketDestination;
    Enabled: boolean;
    Id: string;
    IncludedObjectVersions: string;
    OptionalFields?: string[];
    Prefix?: string;
    ScheduleFrequency: string;
}
export interface AWSS3BucketLifecycleConfiguration {
    Rules: AWSS3BucketRule[];
}
export interface AWSS3BucketRule {
    AbortIncompleteMultipartUpload?: AWSS3BucketAbortIncompleteMultipartUpload;
    ExpirationDate?: string;
    ExpirationInDays?: number;
    ExpiredObjectDeleteMarker?: boolean;
    Id?: string;
    NoncurrentVersionExpirationInDays?: number;
    NoncurrentVersionTransition?: AWSS3BucketNoncurrentVersionTransition;
    NoncurrentVersionTransitions?: AWSS3BucketNoncurrentVersionTransition[];
    Prefix?: string;
    Status: string;
    TagFilters?: AWSS3BucketTagFilter[];
    Transition?: AWSS3BucketTransition;
    Transitions?: AWSS3BucketTransition[];
}
export interface AWSS3BucketAbortIncompleteMultipartUpload {
    DaysAfterInitiation: number;
}
export interface AWSS3BucketNoncurrentVersionTransition {
    StorageClass: string;
    TransitionInDays: number;
}
export interface AWSS3BucketTransition {
    StorageClass: string;
    TransitionDate?: string;
    TransitionInDays?: number;
}
export interface AWSS3BucketLoggingConfiguration {
    DestinationBucketName?: string;
    LogFilePrefix?: string;
}
export interface AWSS3BucketMetricsConfiguration {
    AccessPointArn?: string;
    Id: string;
    Prefix?: string;
    TagFilters?: AWSS3BucketTagFilter[];
}
export interface AWSS3BucketNotificationConfiguration {
    LambdaConfigurations?: AWSS3BucketLambdaConfiguration[];
    QueueConfigurations?: AWSS3BucketQueueConfiguration[];
    TopicConfigurations?: AWSS3BucketTopicConfiguration[];
}
export interface AWSS3BucketLambdaConfiguration {
    Event: string;
    Filter?: AWSS3BucketNotificationFilter;
    Function: string;
}
export interface AWSS3BucketNotificationFilter {
    S3Key: AWSS3BucketS3KeyFilter;
}
export interface AWSS3BucketS3KeyFilter {
    Rules: AWSS3BucketFilterRule[];
}
export interface AWSS3BucketFilterRule {
    Name: string;
    Value: string;
}
export interface AWSS3BucketQueueConfiguration {
    Event: string;
    Filter?: AWSS3BucketNotificationFilter;
    Queue: string;
}
export interface AWSS3BucketTopicConfiguration {
    Event: string;
    Filter?: AWSS3BucketNotificationFilter;
    Topic: string;
}
export interface AWSS3BucketObjectLockConfiguration {
    ObjectLockEnabled?: string;
    Rule?: AWSS3BucketObjectLockRule;
}
export interface AWSS3BucketObjectLockRule {
    DefaultRetention?: AWSS3BucketDefaultRetention;
}
export interface AWSS3BucketDefaultRetention {
    Days?: number;
    Mode?: string;
    Years?: number;
}
export interface AWSS3BucketOwnershipControls {
    Rules: AWSS3BucketOwnershipControlsRule[];
}
export interface AWSS3BucketOwnershipControlsRule {
    ObjectOwnership?: string;
}
export interface AWSS3BucketPublicAccessBlockConfiguration {
    BlockPublicAcls?: boolean;
    BlockPublicPolicy?: boolean;
    IgnorePublicAcls?: boolean;
    RestrictPublicBuckets?: boolean;
}
export interface AWSS3BucketReplicationConfiguration {
    Role: string;
    Rules: AWSS3BucketReplicationRule[];
}
export interface AWSS3BucketReplicationRule {
    DeleteMarkerReplication?: AWSS3BucketDeleteMarkerReplication;
    Destination: AWSS3BucketReplicationDestination;
    Filter?: AWSS3BucketReplicationRuleFilter;
    Id?: string;
    Prefix?: string;
    Priority?: number;
    SourceSelectionCriteria?: AWSS3BucketSourceSelectionCriteria;
    Status: string;
}
export interface AWSS3BucketDeleteMarkerReplication {
    Status?: string;
}
export interface AWSS3BucketReplicationDestination {
    AccessControlTranslation?: AWSS3BucketAccessControlTranslation;
    Account?: string;
    Bucket: string;
    EncryptionConfiguration?: AWSS3BucketEncryptionConfiguration;
    Metrics?: AWSS3BucketMetrics;
    ReplicationTime?: AWSS3BucketReplicationTime;
    StorageClass?: string;
}
export interface AWSS3BucketAccessControlTranslation {
    Owner: string;
}
export interface AWSS3BucketEncryptionConfiguration {
    ReplicaKmsKeyID: string;
}
export interface AWSS3BucketMetrics {
    EventThreshold?: AWSS3BucketReplicationTimeValue;
    Status: string;
}
export interface AWSS3BucketReplicationTimeValue {
    Minutes: number;
}
export interface AWSS3BucketReplicationTime {
    Status: string;
    Time: AWSS3BucketReplicationTimeValue;
}
export interface AWSS3BucketReplicationRuleFilter {
    And?: AWSS3BucketReplicationRuleAndOperator;
    Prefix?: string;
    TagFilter?: AWSS3BucketTagFilter;
}
export interface AWSS3BucketReplicationRuleAndOperator {
    Prefix?: string;
    TagFilters?: AWSS3BucketTagFilter[];
}
export interface AWSS3BucketSourceSelectionCriteria {
    ReplicaModifications?: AWSS3BucketReplicaModifications;
    SseKmsEncryptedObjects?: AWSS3BucketSseKmsEncryptedObjects;
}
export interface AWSS3BucketReplicaModifications {
    Status: string;
}
export interface AWSS3BucketSseKmsEncryptedObjects {
    Status: string;
}
export interface AWSS3BucketVersioningConfiguration {
    Status: string;
}
export interface AWSS3BucketWebsiteConfiguration {
    ErrorDocument?: string;
    IndexDocument?: string;
    RedirectAllRequestsTo?: AWSS3BucketRedirectAllRequestsTo;
    RoutingRules?: AWSS3BucketRoutingRule[];
}
export interface AWSS3BucketRedirectAllRequestsTo {
    HostName: string;
    Protocol?: string;
}
export interface AWSS3BucketRoutingRule {
    RedirectRule: AWSS3BucketRedirectRule;
    RoutingRuleCondition?: AWSS3BucketRoutingRuleCondition;
}
export interface AWSS3BucketRedirectRule {
    HostName?: string;
    HttpRedirectCode?: string;
    Protocol?: string;
    ReplaceKeyPrefixWith?: string;
    ReplaceKeyWith?: string;
}
export interface AWSS3BucketRoutingRuleCondition {
    HttpErrorCodeReturnedEquals?: string;
    KeyPrefixEquals?: string;
}
export interface AWSS3BucketPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Bucket: string;
        PolicyDocument: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::S3::BucketPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3MultiRegionAccessPoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name?: string;
        PublicAccessBlockConfiguration?: AWSS3MultiRegionAccessPointPublicAccessBlockConfiguration;
        Regions: AWSS3MultiRegionAccessPointRegion[];
    };
    Type: "AWS::S3::MultiRegionAccessPoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3MultiRegionAccessPointPublicAccessBlockConfiguration {
    BlockPublicAcls?: boolean;
    BlockPublicPolicy?: boolean;
    IgnorePublicAcls?: boolean;
    RestrictPublicBuckets?: boolean;
}
export interface AWSS3MultiRegionAccessPointRegion {
    Bucket: string;
}
export interface AWSS3MultiRegionAccessPointPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MrapName: string;
        Policy: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::S3::MultiRegionAccessPointPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3StorageLens {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        StorageLensConfiguration: AWSS3StorageLensStorageLensConfiguration;
        Tags?: Tag[];
    };
    Type: "AWS::S3::StorageLens";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3StorageLensStorageLensConfiguration {
    AccountLevel: AWSS3StorageLensAccountLevel;
    AwsOrg?: AWSS3StorageLensAwsOrg;
    DataExport?: AWSS3StorageLensDataExport;
    Exclude?: AWSS3StorageLensBucketsAndRegions;
    Id: string;
    Include?: AWSS3StorageLensBucketsAndRegions;
    IsEnabled: boolean;
    StorageLensArn?: string;
}
export interface AWSS3StorageLensAccountLevel {
    ActivityMetrics?: AWSS3StorageLensActivityMetrics;
    BucketLevel: AWSS3StorageLensBucketLevel;
}
export interface AWSS3StorageLensActivityMetrics {
    IsEnabled?: boolean;
}
export interface AWSS3StorageLensBucketLevel {
    ActivityMetrics?: AWSS3StorageLensActivityMetrics;
    PrefixLevel?: AWSS3StorageLensPrefixLevel;
}
export interface AWSS3StorageLensPrefixLevel {
    StorageMetrics: AWSS3StorageLensPrefixLevelStorageMetrics;
}
export interface AWSS3StorageLensPrefixLevelStorageMetrics {
    IsEnabled?: boolean;
    SelectionCriteria?: AWSS3StorageLensSelectionCriteria;
}
export interface AWSS3StorageLensSelectionCriteria {
    Delimiter?: string;
    MaxDepth?: number;
    MinStorageBytesPercentage?: number;
}
export interface AWSS3StorageLensAwsOrg {
    Arn: string;
}
export interface AWSS3StorageLensDataExport {
    S3BucketDestination: AWSS3StorageLensS3BucketDestination;
}
export interface AWSS3StorageLensS3BucketDestination {
    AccountId: string;
    Arn: string;
    Encryption?: AWSS3StorageLensEncryption;
    Format: string;
    OutputSchemaVersion: string;
    Prefix?: string;
}
export interface AWSS3StorageLensEncryption {}
export interface AWSS3StorageLensBucketsAndRegions {
    Buckets?: string[];
    Regions?: string[];
}
export interface AWSS3ObjectLambdaAccessPoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        ObjectLambdaConfiguration?: AWSS3ObjectLambdaAccessPointObjectLambdaConfiguration;
    };
    Type: "AWS::S3ObjectLambda::AccessPoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3ObjectLambdaAccessPointObjectLambdaConfiguration {
    AllowedFeatures?: string[];
    CloudWatchMetricsEnabled?: boolean;
    SupportingAccessPoint: string;
    TransformationConfigurations: AWSS3ObjectLambdaAccessPointTransformationConfiguration[];
}
export interface AWSS3ObjectLambdaAccessPointTransformationConfiguration {
    Actions?: string[];
    ContentTransformation?: {
        [k: string]: unknown;
    };
}
export interface AWSS3ObjectLambdaAccessPointPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ObjectLambdaAccessPoint: string;
        PolicyDocument: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::S3ObjectLambda::AccessPointPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3OutpostsAccessPoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Bucket: string;
        Name: string;
        Policy?: {
            [k: string]: unknown;
        };
        VpcConfiguration: AWSS3OutpostsAccessPointVpcConfiguration;
    };
    Type: "AWS::S3Outposts::AccessPoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3OutpostsAccessPointVpcConfiguration {
    VpcId?: string;
}
export interface AWSS3OutpostsBucket {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BucketName: string;
        LifecycleConfiguration?: AWSS3OutpostsBucketLifecycleConfiguration;
        OutpostId: string;
        Tags?: Tag[];
    };
    Type: "AWS::S3Outposts::Bucket";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3OutpostsBucketLifecycleConfiguration {
    Rules: AWSS3OutpostsBucketRule[];
}
export interface AWSS3OutpostsBucketRule {
    AbortIncompleteMultipartUpload?: AWSS3OutpostsBucketAbortIncompleteMultipartUpload;
    ExpirationDate?: string;
    ExpirationInDays?: number;
    Filter?: {
        [k: string]: unknown;
    };
    Id?: string;
    Status?: string;
}
export interface AWSS3OutpostsBucketAbortIncompleteMultipartUpload {
    DaysAfterInitiation: number;
}
export interface AWSS3OutpostsBucketPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Bucket: string;
        PolicyDocument: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::S3Outposts::BucketPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSS3OutpostsEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessType?: string;
        CustomerOwnedIpv4Pool?: string;
        OutpostId: string;
        SecurityGroupId: string;
        SubnetId: string;
    };
    Type: "AWS::S3Outposts::Endpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSDBDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
    };
    Type: "AWS::SDB::Domain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESConfigurationSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Name?: string;
    };
    Type: "AWS::SES::ConfigurationSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESConfigurationSetEventDestination {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConfigurationSetName: string;
        EventDestination: AWSSESConfigurationSetEventDestinationEventDestination;
    };
    Type: "AWS::SES::ConfigurationSetEventDestination";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESConfigurationSetEventDestinationEventDestination {
    CloudWatchDestination?: AWSSESConfigurationSetEventDestinationCloudWatchDestination;
    Enabled?: boolean;
    KinesisFirehoseDestination?: AWSSESConfigurationSetEventDestinationKinesisFirehoseDestination;
    MatchingEventTypes: string[];
    Name?: string;
}
export interface AWSSESConfigurationSetEventDestinationCloudWatchDestination {
    DimensionConfigurations?: AWSSESConfigurationSetEventDestinationDimensionConfiguration[];
}
export interface AWSSESConfigurationSetEventDestinationDimensionConfiguration {
    DefaultDimensionValue: string;
    DimensionName: string;
    DimensionValueSource: string;
}
export interface AWSSESConfigurationSetEventDestinationKinesisFirehoseDestination {
    DeliveryStreamARN: string;
    IAMRoleARN: string;
}
export interface AWSSESContactList {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ContactListName?: string;
        Description?: string;
        Tags?: Tag[];
        Topics?: AWSSESContactListTopic[];
    };
    Type: "AWS::SES::ContactList";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESContactListTopic {
    DefaultSubscriptionStatus: string;
    Description?: string;
    DisplayName: string;
    TopicName: string;
}
export interface AWSSESReceiptFilter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Filter: AWSSESReceiptFilterFilter;
    };
    Type: "AWS::SES::ReceiptFilter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESReceiptFilterFilter {
    IpFilter: AWSSESReceiptFilterIpFilter;
    Name?: string;
}
export interface AWSSESReceiptFilterIpFilter {
    Cidr: string;
    Policy: string;
}
export interface AWSSESReceiptRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        After?: string;
        Rule: AWSSESReceiptRuleRule;
        RuleSetName: string;
    };
    Type: "AWS::SES::ReceiptRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESReceiptRuleRule {
    Actions?: AWSSESReceiptRuleAction[];
    Enabled?: boolean;
    Name?: string;
    Recipients?: string[];
    ScanEnabled?: boolean;
    TlsPolicy?: string;
}
export interface AWSSESReceiptRuleAction {
    AddHeaderAction?: AWSSESReceiptRuleAddHeaderAction;
    BounceAction?: AWSSESReceiptRuleBounceAction;
    LambdaAction?: AWSSESReceiptRuleLambdaAction;
    S3Action?: AWSSESReceiptRuleS3Action;
    SNSAction?: AWSSESReceiptRuleSNSAction;
    StopAction?: AWSSESReceiptRuleStopAction;
    WorkmailAction?: AWSSESReceiptRuleWorkmailAction;
}
export interface AWSSESReceiptRuleAddHeaderAction {
    HeaderName: string;
    HeaderValue: string;
}
export interface AWSSESReceiptRuleBounceAction {
    Message: string;
    Sender: string;
    SmtpReplyCode: string;
    StatusCode?: string;
    TopicArn?: string;
}
export interface AWSSESReceiptRuleLambdaAction {
    FunctionArn: string;
    InvocationType?: string;
    TopicArn?: string;
}
export interface AWSSESReceiptRuleS3Action {
    BucketName: string;
    KmsKeyArn?: string;
    ObjectKeyPrefix?: string;
    TopicArn?: string;
}
export interface AWSSESReceiptRuleSNSAction {
    Encoding?: string;
    TopicArn?: string;
}
export interface AWSSESReceiptRuleStopAction {
    Scope: string;
    TopicArn?: string;
}
export interface AWSSESReceiptRuleWorkmailAction {
    OrganizationArn: string;
    TopicArn?: string;
}
export interface AWSSESReceiptRuleSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        RuleSetName?: string;
    };
    Type: "AWS::SES::ReceiptRuleSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESTemplate {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Template?: AWSSESTemplateTemplate;
    };
    Type: "AWS::SES::Template";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSESTemplateTemplate {
    HtmlPart?: string;
    SubjectPart?: string;
    TemplateName?: string;
    TextPart?: string;
}
export interface AWSSNSSubscription {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeliveryPolicy?: {
            [k: string]: unknown;
        };
        Endpoint?: string;
        FilterPolicy?: {
            [k: string]: unknown;
        };
        Protocol: string;
        RawMessageDelivery?: boolean;
        RedrivePolicy?: {
            [k: string]: unknown;
        };
        Region?: string;
        SubscriptionRoleArn?: string;
        TopicArn: string;
    };
    Type: "AWS::SNS::Subscription";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSNSTopic {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ContentBasedDeduplication?: boolean;
        DisplayName?: string;
        FifoTopic?: boolean;
        KmsMasterKeyId?: string;
        Subscription?: AWSSNSTopicSubscription[];
        Tags?: Tag[];
        TopicName?: string;
    };
    Type: "AWS::SNS::Topic";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSNSTopicSubscription {
    Endpoint: string;
    Protocol: string;
}
export interface AWSSNSTopicPolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyDocument: {
            [k: string]: unknown;
        };
        Topics: string[];
    };
    Type: "AWS::SNS::TopicPolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSQSQueue {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        ContentBasedDeduplication?: boolean;
        DeduplicationScope?: string;
        DelaySeconds?: number;
        FifoQueue?: boolean;
        FifoThroughputLimit?: string;
        KmsDataKeyReusePeriodSeconds?: number;
        KmsMasterKeyId?: string;
        MaximumMessageSize?: number;
        MessageRetentionPeriod?: number;
        QueueName?: string;
        ReceiveMessageWaitTimeSeconds?: number;
        RedriveAllowPolicy?: {
            [k: string]: unknown;
        };
        RedrivePolicy?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
        VisibilityTimeout?: number;
    };
    Type: "AWS::SQS::Queue";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSQSQueuePolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PolicyDocument: {
            [k: string]: unknown;
        };
        Queues: string[];
    };
    Type: "AWS::SQS::QueuePolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApplyOnlyAtCronInterval?: boolean;
        AssociationName?: string;
        AutomationTargetParameterName?: string;
        CalendarNames?: string[];
        ComplianceSeverity?: string;
        DocumentVersion?: string;
        InstanceId?: string;
        MaxConcurrency?: string;
        MaxErrors?: string;
        Name: string;
        OutputLocation?: AWSSSMAssociationInstanceAssociationOutputLocation;
        Parameters?: {
            [k: string]: unknown;
        };
        ScheduleExpression?: string;
        SyncCompliance?: string;
        Targets?: AWSSSMAssociationTarget[];
        WaitForSuccessTimeoutSeconds?: number;
    };
    Type: "AWS::SSM::Association";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMAssociationInstanceAssociationOutputLocation {
    S3Location?: AWSSSMAssociationS3OutputLocation;
}
export interface AWSSSMAssociationS3OutputLocation {
    OutputS3BucketName?: string;
    OutputS3KeyPrefix?: string;
    OutputS3Region?: string;
}
export interface AWSSSMAssociationTarget {
    Key: string;
    Values: string[];
}
export interface AWSSSMDocument {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Attachments?: AWSSSMDocumentAttachmentsSource[];
        Content: {
            [k: string]: unknown;
        };
        DocumentFormat?: string;
        DocumentType?: string;
        Name?: string;
        Requires?: AWSSSMDocumentDocumentRequires[];
        Tags?: Tag[];
        TargetType?: string;
        VersionName?: string;
    };
    Type: "AWS::SSM::Document";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMDocumentAttachmentsSource {
    Key?: string;
    Name?: string;
    Values?: string[];
}
export interface AWSSSMDocumentDocumentRequires {
    Name?: string;
    Version?: string;
}
export interface AWSSSMMaintenanceWindow {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowUnassociatedTargets: boolean;
        Cutoff: number;
        Description?: string;
        Duration: number;
        EndDate?: string;
        Name: string;
        Schedule: string;
        ScheduleOffset?: number;
        ScheduleTimezone?: string;
        StartDate?: string;
        Tags?: Tag[];
    };
    Type: "AWS::SSM::MaintenanceWindow";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMMaintenanceWindowTarget {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name?: string;
        OwnerInformation?: string;
        ResourceType: string;
        Targets: AWSSSMMaintenanceWindowTargetTargets[];
        WindowId: string;
    };
    Type: "AWS::SSM::MaintenanceWindowTarget";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMMaintenanceWindowTargetTargets {
    Key: string;
    Values: string[];
}
export interface AWSSSMMaintenanceWindowTask {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CutoffBehavior?: string;
        Description?: string;
        LoggingInfo?: AWSSSMMaintenanceWindowTaskLoggingInfo;
        MaxConcurrency?: string;
        MaxErrors?: string;
        Name?: string;
        Priority: number;
        ServiceRoleArn?: string;
        Targets?: AWSSSMMaintenanceWindowTaskTarget[];
        TaskArn: string;
        TaskInvocationParameters?: AWSSSMMaintenanceWindowTaskTaskInvocationParameters;
        TaskParameters?: {
            [k: string]: unknown;
        };
        TaskType: string;
        WindowId: string;
    };
    Type: "AWS::SSM::MaintenanceWindowTask";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMMaintenanceWindowTaskLoggingInfo {
    Region: string;
    S3Bucket: string;
    S3Prefix?: string;
}
export interface AWSSSMMaintenanceWindowTaskTarget {
    Key: string;
    Values: string[];
}
export interface AWSSSMMaintenanceWindowTaskTaskInvocationParameters {
    MaintenanceWindowAutomationParameters?: AWSSSMMaintenanceWindowTaskMaintenanceWindowAutomationParameters;
    MaintenanceWindowLambdaParameters?: AWSSSMMaintenanceWindowTaskMaintenanceWindowLambdaParameters;
    MaintenanceWindowRunCommandParameters?: AWSSSMMaintenanceWindowTaskMaintenanceWindowRunCommandParameters;
    MaintenanceWindowStepFunctionsParameters?: AWSSSMMaintenanceWindowTaskMaintenanceWindowStepFunctionsParameters;
}
export interface AWSSSMMaintenanceWindowTaskMaintenanceWindowAutomationParameters {
    DocumentVersion?: string;
    Parameters?: {
        [k: string]: unknown;
    };
}
export interface AWSSSMMaintenanceWindowTaskMaintenanceWindowLambdaParameters {
    ClientContext?: string;
    Payload?: string;
    Qualifier?: string;
}
export interface AWSSSMMaintenanceWindowTaskMaintenanceWindowRunCommandParameters {
    Comment?: string;
    DocumentHash?: string;
    DocumentHashType?: string;
    NotificationConfig?: AWSSSMMaintenanceWindowTaskNotificationConfig;
    OutputS3BucketName?: string;
    OutputS3KeyPrefix?: string;
    Parameters?: {
        [k: string]: unknown;
    };
    ServiceRoleArn?: string;
    TimeoutSeconds?: number;
}
export interface AWSSSMMaintenanceWindowTaskNotificationConfig {
    NotificationArn: string;
    NotificationEvents?: string[];
    NotificationType?: string;
}
export interface AWSSSMMaintenanceWindowTaskMaintenanceWindowStepFunctionsParameters {
    Input?: string;
    Name?: string;
}
export interface AWSSSMParameter {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AllowedPattern?: string;
        DataType?: string;
        Description?: string;
        Name?: string;
        Policies?: string;
        Tags?: {
            [k: string]: unknown;
        };
        Tier?: string;
        Type: string;
        Value: string;
    };
    Type: "AWS::SSM::Parameter";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMPatchBaseline {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ApprovalRules?: AWSSSMPatchBaselineRuleGroup;
        ApprovedPatches?: string[];
        ApprovedPatchesComplianceLevel?: string;
        ApprovedPatchesEnableNonSecurity?: boolean;
        Description?: string;
        GlobalFilters?: AWSSSMPatchBaselinePatchFilterGroup;
        Name: string;
        OperatingSystem?: string;
        PatchGroups?: string[];
        RejectedPatches?: string[];
        RejectedPatchesAction?: string;
        Sources?: AWSSSMPatchBaselinePatchSource[];
        Tags?: Tag[];
    };
    Type: "AWS::SSM::PatchBaseline";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMPatchBaselineRuleGroup {
    PatchRules?: AWSSSMPatchBaselineRule[];
}
export interface AWSSSMPatchBaselineRule {
    ApproveAfterDays?: number;
    ApproveUntilDate?: AWSSSMPatchBaselinePatchStringDate;
    ComplianceLevel?: string;
    EnableNonSecurity?: boolean;
    PatchFilterGroup?: AWSSSMPatchBaselinePatchFilterGroup;
}
export interface AWSSSMPatchBaselinePatchStringDate {}
export interface AWSSSMPatchBaselinePatchFilterGroup {
    PatchFilters?: AWSSSMPatchBaselinePatchFilter[];
}
export interface AWSSSMPatchBaselinePatchFilter {
    Key?: string;
    Values?: string[];
}
export interface AWSSSMPatchBaselinePatchSource {
    Configuration?: string;
    Name?: string;
    Products?: string[];
}
export interface AWSSSMResourceDataSync {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BucketName?: string;
        BucketPrefix?: string;
        BucketRegion?: string;
        KMSKeyArn?: string;
        S3Destination?: AWSSSMResourceDataSyncS3Destination;
        SyncFormat?: string;
        SyncName: string;
        SyncSource?: AWSSSMResourceDataSyncSyncSource;
        SyncType?: string;
    };
    Type: "AWS::SSM::ResourceDataSync";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMResourceDataSyncS3Destination {
    BucketName: string;
    BucketPrefix?: string;
    BucketRegion: string;
    KMSKeyArn?: string;
    SyncFormat: string;
}
export interface AWSSSMResourceDataSyncSyncSource {
    AwsOrganizationsSource?: AWSSSMResourceDataSyncAwsOrganizationsSource;
    IncludeFutureRegions?: boolean;
    SourceRegions: string[];
    SourceType: string;
}
export interface AWSSSMResourceDataSyncAwsOrganizationsSource {
    OrganizationSourceType: string;
    OrganizationalUnits?: string[];
}
export interface AWSSSMContactsContact {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Alias: string;
        DisplayName: string;
        Plan: AWSSSMContactsContactStage[];
        Type: string;
    };
    Type: "AWS::SSMContacts::Contact";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMContactsContactStage {
    DurationInMinutes: number;
    Targets?: AWSSSMContactsContactTargets[];
}
export interface AWSSSMContactsContactTargets {
    ChannelTargetInfo?: AWSSSMContactsContactChannelTargetInfo;
    ContactTargetInfo?: AWSSSMContactsContactContactTargetInfo;
}
export interface AWSSSMContactsContactChannelTargetInfo {
    ChannelId: string;
    RetryIntervalInMinutes: number;
}
export interface AWSSSMContactsContactContactTargetInfo {
    ContactId: string;
    IsEssential: boolean;
}
export interface AWSSSMContactsContactChannel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ChannelAddress: string;
        ChannelName: string;
        ChannelType: string;
        ContactId: string;
        DeferActivation?: boolean;
    };
    Type: "AWS::SSMContacts::ContactChannel";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMIncidentsReplicationSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeletionProtected?: boolean;
        Regions: AWSSSMIncidentsReplicationSetReplicationRegion[];
    };
    Type: "AWS::SSMIncidents::ReplicationSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMIncidentsReplicationSetReplicationRegion {
    RegionConfiguration?: AWSSSMIncidentsReplicationSetRegionConfiguration;
    RegionName?: string;
}
export interface AWSSSMIncidentsReplicationSetRegionConfiguration {
    SseKmsKeyId: string;
}
export interface AWSSSMIncidentsResponsePlan {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Actions?: AWSSSMIncidentsResponsePlanAction[];
        ChatChannel?: AWSSSMIncidentsResponsePlanChatChannel;
        DisplayName?: string;
        Engagements?: string[];
        IncidentTemplate: AWSSSMIncidentsResponsePlanIncidentTemplate;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::SSMIncidents::ResponsePlan";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSMIncidentsResponsePlanAction {
    SsmAutomation?: AWSSSMIncidentsResponsePlanSsmAutomation;
}
export interface AWSSSMIncidentsResponsePlanSsmAutomation {
    DocumentName: string;
    DocumentVersion?: string;
    Parameters?: AWSSSMIncidentsResponsePlanSsmParameter[];
    RoleArn: string;
    TargetAccount?: string;
}
export interface AWSSSMIncidentsResponsePlanSsmParameter {
    Key: string;
    Values: string[];
}
export interface AWSSSMIncidentsResponsePlanChatChannel {
    ChatbotSns?: string[];
}
export interface AWSSSMIncidentsResponsePlanIncidentTemplate {
    DedupeString?: string;
    Impact: number;
    NotificationTargets?: AWSSSMIncidentsResponsePlanNotificationTargetItem[];
    Summary?: string;
    Title: string;
}
export interface AWSSSMIncidentsResponsePlanNotificationTargetItem {
    SnsTopicArn?: string;
}
export interface AWSSSOAssignment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InstanceArn: string;
        PermissionSetArn: string;
        PrincipalId: string;
        PrincipalType: string;
        TargetId: string;
        TargetType: string;
    };
    Type: "AWS::SSO::Assignment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSOInstanceAccessControlAttributeConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AccessControlAttributes?: AWSSSOInstanceAccessControlAttributeConfigurationAccessControlAttribute[];
        InstanceArn: string;
    };
    Type: "AWS::SSO::InstanceAccessControlAttributeConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSSOInstanceAccessControlAttributeConfigurationAccessControlAttribute {
    Key: string;
    Value: AWSSSOInstanceAccessControlAttributeConfigurationAccessControlAttributeValue;
}
export interface AWSSSOInstanceAccessControlAttributeConfigurationAccessControlAttributeValue {
    Source: string[];
}
export interface AWSSSOPermissionSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        InlinePolicy?: {
            [k: string]: unknown;
        };
        InstanceArn: string;
        ManagedPolicies?: string[];
        Name: string;
        RelayStateType?: string;
        SessionDuration?: string;
        Tags?: Tag[];
    };
    Type: "AWS::SSO::PermissionSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerApp {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AppName: string;
        AppType: string;
        DomainId: string;
        ResourceSpec?: AWSSageMakerAppResourceSpec;
        Tags?: Tag[];
        UserProfileName: string;
    };
    Type: "AWS::SageMaker::App";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerAppResourceSpec {
    InstanceType?: string;
    SageMakerImageArn?: string;
    SageMakerImageVersionArn?: string;
}
export interface AWSSageMakerAppImageConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AppImageConfigName: string;
        KernelGatewayImageConfig?: AWSSageMakerAppImageConfigKernelGatewayImageConfig;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::AppImageConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerAppImageConfigKernelGatewayImageConfig {
    FileSystemConfig?: AWSSageMakerAppImageConfigFileSystemConfig;
    KernelSpecs: AWSSageMakerAppImageConfigKernelSpec[];
}
export interface AWSSageMakerAppImageConfigFileSystemConfig {
    DefaultGid?: number;
    DefaultUid?: number;
    MountPath?: string;
}
export interface AWSSageMakerAppImageConfigKernelSpec {
    DisplayName?: string;
    Name: string;
}
export interface AWSSageMakerCodeRepository {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CodeRepositoryName?: string;
        GitConfig: AWSSageMakerCodeRepositoryGitConfig;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::CodeRepository";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerCodeRepositoryGitConfig {
    Branch?: string;
    RepositoryUrl: string;
    SecretArn?: string;
}
export interface AWSSageMakerDataQualityJobDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DataQualityAppSpecification: AWSSageMakerDataQualityJobDefinitionDataQualityAppSpecification;
        DataQualityBaselineConfig?: AWSSageMakerDataQualityJobDefinitionDataQualityBaselineConfig;
        DataQualityJobInput: AWSSageMakerDataQualityJobDefinitionDataQualityJobInput;
        DataQualityJobOutputConfig: AWSSageMakerDataQualityJobDefinitionMonitoringOutputConfig;
        JobDefinitionName?: string;
        JobResources: AWSSageMakerDataQualityJobDefinitionMonitoringResources;
        NetworkConfig?: AWSSageMakerDataQualityJobDefinitionNetworkConfig;
        RoleArn: string;
        StoppingCondition?: AWSSageMakerDataQualityJobDefinitionStoppingCondition;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::DataQualityJobDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerDataQualityJobDefinitionDataQualityAppSpecification {
    ContainerArguments?: string[];
    ContainerEntrypoint?: string[];
    Environment?: {
        [k: string]: unknown;
    };
    ImageUri: string;
    PostAnalyticsProcessorSourceUri?: string;
    RecordPreprocessorSourceUri?: string;
}
export interface AWSSageMakerDataQualityJobDefinitionDataQualityBaselineConfig {
    BaseliningJobName?: string;
    ConstraintsResource?: AWSSageMakerDataQualityJobDefinitionConstraintsResource;
    StatisticsResource?: AWSSageMakerDataQualityJobDefinitionStatisticsResource;
}
export interface AWSSageMakerDataQualityJobDefinitionConstraintsResource {
    S3Uri?: string;
}
export interface AWSSageMakerDataQualityJobDefinitionStatisticsResource {
    S3Uri?: string;
}
export interface AWSSageMakerDataQualityJobDefinitionDataQualityJobInput {
    EndpointInput: AWSSageMakerDataQualityJobDefinitionEndpointInput;
}
export interface AWSSageMakerDataQualityJobDefinitionEndpointInput {
    EndpointName: string;
    LocalPath: string;
    S3DataDistributionType?: string;
    S3InputMode?: string;
}
export interface AWSSageMakerDataQualityJobDefinitionMonitoringOutputConfig {
    KmsKeyId?: string;
    MonitoringOutputs: AWSSageMakerDataQualityJobDefinitionMonitoringOutput[];
}
export interface AWSSageMakerDataQualityJobDefinitionMonitoringOutput {
    S3Output: AWSSageMakerDataQualityJobDefinitionS3Output;
}
export interface AWSSageMakerDataQualityJobDefinitionS3Output {
    LocalPath: string;
    S3UploadMode?: string;
    S3Uri: string;
}
export interface AWSSageMakerDataQualityJobDefinitionMonitoringResources {
    ClusterConfig: AWSSageMakerDataQualityJobDefinitionClusterConfig;
}
export interface AWSSageMakerDataQualityJobDefinitionClusterConfig {
    InstanceCount: number;
    InstanceType: string;
    VolumeKmsKeyId?: string;
    VolumeSizeInGB: number;
}
export interface AWSSageMakerDataQualityJobDefinitionNetworkConfig {
    EnableInterContainerTrafficEncryption?: boolean;
    EnableNetworkIsolation?: boolean;
    VpcConfig?: AWSSageMakerDataQualityJobDefinitionVpcConfig;
}
export interface AWSSageMakerDataQualityJobDefinitionVpcConfig {
    SecurityGroupIds: string[];
    Subnets: string[];
}
export interface AWSSageMakerDataQualityJobDefinitionStoppingCondition {
    MaxRuntimeInSeconds: number;
}
export interface AWSSageMakerDevice {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Device?: {
            [k: string]: unknown;
        };
        DeviceFleetName: string;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::Device";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerDeviceFleet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        DeviceFleetName: string;
        OutputConfig: AWSSageMakerDeviceFleetEdgeOutputConfig;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::DeviceFleet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerDeviceFleetEdgeOutputConfig {
    KmsKeyId?: string;
    S3OutputLocation: string;
}
export interface AWSSageMakerDomain {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AppNetworkAccessType?: string;
        AuthMode: string;
        DefaultUserSettings: AWSSageMakerDomainUserSettings;
        DomainName: string;
        KmsKeyId?: string;
        SubnetIds: string[];
        Tags?: Tag[];
        VpcId: string;
    };
    Type: "AWS::SageMaker::Domain";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerDomainUserSettings {
    ExecutionRole?: string;
    JupyterServerAppSettings?: AWSSageMakerDomainJupyterServerAppSettings;
    KernelGatewayAppSettings?: AWSSageMakerDomainKernelGatewayAppSettings;
    SecurityGroups?: string[];
    SharingSettings?: AWSSageMakerDomainSharingSettings;
}
export interface AWSSageMakerDomainJupyterServerAppSettings {
    DefaultResourceSpec?: AWSSageMakerDomainResourceSpec;
}
export interface AWSSageMakerDomainResourceSpec {
    InstanceType?: string;
    SageMakerImageArn?: string;
    SageMakerImageVersionArn?: string;
}
export interface AWSSageMakerDomainKernelGatewayAppSettings {
    CustomImages?: AWSSageMakerDomainCustomImage[];
    DefaultResourceSpec?: AWSSageMakerDomainResourceSpec;
}
export interface AWSSageMakerDomainCustomImage {
    AppImageConfigName: string;
    ImageName: string;
    ImageVersionNumber?: number;
}
export interface AWSSageMakerDomainSharingSettings {
    NotebookOutputOption?: string;
    S3KmsKeyId?: string;
    S3OutputPath?: string;
}
export interface AWSSageMakerEndpoint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DeploymentConfig?: AWSSageMakerEndpointDeploymentConfig;
        EndpointConfigName: string;
        EndpointName?: string;
        ExcludeRetainedVariantProperties?: AWSSageMakerEndpointVariantProperty[];
        RetainAllVariantProperties?: boolean;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::Endpoint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerEndpointDeploymentConfig {
    AutoRollbackConfiguration?: AWSSageMakerEndpointAutoRollbackConfig;
    BlueGreenUpdatePolicy: AWSSageMakerEndpointBlueGreenUpdatePolicy;
}
export interface AWSSageMakerEndpointAutoRollbackConfig {
    Alarms: AWSSageMakerEndpointAlarm[];
}
export interface AWSSageMakerEndpointAlarm {
    AlarmName: string;
}
export interface AWSSageMakerEndpointBlueGreenUpdatePolicy {
    MaximumExecutionTimeoutInSeconds?: number;
    TerminationWaitInSeconds?: number;
    TrafficRoutingConfiguration: AWSSageMakerEndpointTrafficRoutingConfig;
}
export interface AWSSageMakerEndpointTrafficRoutingConfig {
    CanarySize?: AWSSageMakerEndpointCapacitySize;
    Type: string;
    WaitIntervalInSeconds?: number;
}
export interface AWSSageMakerEndpointCapacitySize {
    Type: string;
    Value: number;
}
export interface AWSSageMakerEndpointVariantProperty {
    VariantPropertyType?: string;
}
export interface AWSSageMakerEndpointConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AsyncInferenceConfig?: AWSSageMakerEndpointConfigAsyncInferenceConfig;
        DataCaptureConfig?: AWSSageMakerEndpointConfigDataCaptureConfig;
        EndpointConfigName?: string;
        KmsKeyId?: string;
        ProductionVariants: AWSSageMakerEndpointConfigProductionVariant[];
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::EndpointConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerEndpointConfigAsyncInferenceConfig {
    ClientConfig?: AWSSageMakerEndpointConfigAsyncInferenceClientConfig;
    OutputConfig: AWSSageMakerEndpointConfigAsyncInferenceOutputConfig;
}
export interface AWSSageMakerEndpointConfigAsyncInferenceClientConfig {
    MaxConcurrentInvocationsPerInstance?: number;
}
export interface AWSSageMakerEndpointConfigAsyncInferenceOutputConfig {
    KmsKeyId?: string;
    NotificationConfig?: AWSSageMakerEndpointConfigAsyncInferenceNotificationConfig;
    S3OutputPath: string;
}
export interface AWSSageMakerEndpointConfigAsyncInferenceNotificationConfig {
    ErrorTopic?: string;
    SuccessTopic?: string;
}
export interface AWSSageMakerEndpointConfigDataCaptureConfig {
    CaptureContentTypeHeader?: AWSSageMakerEndpointConfigCaptureContentTypeHeader;
    CaptureOptions: AWSSageMakerEndpointConfigCaptureOption[];
    DestinationS3Uri: string;
    EnableCapture?: boolean;
    InitialSamplingPercentage: number;
    KmsKeyId?: string;
}
export interface AWSSageMakerEndpointConfigCaptureContentTypeHeader {
    CsvContentTypes?: string[];
    JsonContentTypes?: string[];
}
export interface AWSSageMakerEndpointConfigCaptureOption {
    CaptureMode: string;
}
export interface AWSSageMakerEndpointConfigProductionVariant {
    AcceleratorType?: string;
    InitialInstanceCount: number;
    InitialVariantWeight: number;
    InstanceType: string;
    ModelName: string;
    VariantName: string;
}
export interface AWSSageMakerFeatureGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        EventTimeFeatureName: string;
        FeatureDefinitions: AWSSageMakerFeatureGroupFeatureDefinition[];
        FeatureGroupName: string;
        OfflineStoreConfig?: {
            [k: string]: unknown;
        };
        OnlineStoreConfig?: {
            [k: string]: unknown;
        };
        RecordIdentifierFeatureName: string;
        RoleArn?: string;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::FeatureGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerFeatureGroupFeatureDefinition {
    FeatureName: string;
    FeatureType: string;
}
export interface AWSSageMakerImage {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ImageDescription?: string;
        ImageDisplayName?: string;
        ImageName: string;
        ImageRoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::Image";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerImageVersion {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BaseImage: string;
        ImageName: string;
    };
    Type: "AWS::SageMaker::ImageVersion";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerModel {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Containers?: AWSSageMakerModelContainerDefinition[];
        EnableNetworkIsolation?: boolean;
        ExecutionRoleArn: string;
        InferenceExecutionConfig?: AWSSageMakerModelInferenceExecutionConfig;
        ModelName?: string;
        PrimaryContainer?: AWSSageMakerModelContainerDefinition;
        Tags?: Tag[];
        VpcConfig?: AWSSageMakerModelVpcConfig;
    };
    Type: "AWS::SageMaker::Model";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerModelContainerDefinition {
    ContainerHostname?: string;
    Environment?: {
        [k: string]: unknown;
    };
    Image?: string;
    ImageConfig?: AWSSageMakerModelImageConfig;
    Mode?: string;
    ModelDataUrl?: string;
    ModelPackageName?: string;
    MultiModelConfig?: AWSSageMakerModelMultiModelConfig;
}
export interface AWSSageMakerModelImageConfig {
    RepositoryAccessMode: string;
    RepositoryAuthConfig?: AWSSageMakerModelRepositoryAuthConfig;
}
export interface AWSSageMakerModelRepositoryAuthConfig {
    RepositoryCredentialsProviderArn: string;
}
export interface AWSSageMakerModelMultiModelConfig {
    ModelCacheSetting?: string;
}
export interface AWSSageMakerModelInferenceExecutionConfig {
    Mode: string;
}
export interface AWSSageMakerModelVpcConfig {
    SecurityGroupIds: string[];
    Subnets: string[];
}
export interface AWSSageMakerModelBiasJobDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        JobDefinitionName?: string;
        JobResources: AWSSageMakerModelBiasJobDefinitionMonitoringResources;
        ModelBiasAppSpecification: AWSSageMakerModelBiasJobDefinitionModelBiasAppSpecification;
        ModelBiasBaselineConfig?: AWSSageMakerModelBiasJobDefinitionModelBiasBaselineConfig;
        ModelBiasJobInput: AWSSageMakerModelBiasJobDefinitionModelBiasJobInput;
        ModelBiasJobOutputConfig: AWSSageMakerModelBiasJobDefinitionMonitoringOutputConfig;
        NetworkConfig?: AWSSageMakerModelBiasJobDefinitionNetworkConfig;
        RoleArn: string;
        StoppingCondition?: AWSSageMakerModelBiasJobDefinitionStoppingCondition;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::ModelBiasJobDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerModelBiasJobDefinitionMonitoringResources {
    ClusterConfig: AWSSageMakerModelBiasJobDefinitionClusterConfig;
}
export interface AWSSageMakerModelBiasJobDefinitionClusterConfig {
    InstanceCount: number;
    InstanceType: string;
    VolumeKmsKeyId?: string;
    VolumeSizeInGB: number;
}
export interface AWSSageMakerModelBiasJobDefinitionModelBiasAppSpecification {
    ConfigUri: string;
    Environment?: {
        [k: string]: unknown;
    };
    ImageUri: string;
}
export interface AWSSageMakerModelBiasJobDefinitionModelBiasBaselineConfig {
    BaseliningJobName?: string;
    ConstraintsResource?: AWSSageMakerModelBiasJobDefinitionConstraintsResource;
}
export interface AWSSageMakerModelBiasJobDefinitionConstraintsResource {
    S3Uri?: string;
}
export interface AWSSageMakerModelBiasJobDefinitionModelBiasJobInput {
    EndpointInput: AWSSageMakerModelBiasJobDefinitionEndpointInput;
    GroundTruthS3Input: AWSSageMakerModelBiasJobDefinitionMonitoringGroundTruthS3Input;
}
export interface AWSSageMakerModelBiasJobDefinitionEndpointInput {
    EndTimeOffset?: string;
    EndpointName: string;
    FeaturesAttribute?: string;
    InferenceAttribute?: string;
    LocalPath: string;
    ProbabilityAttribute?: string;
    ProbabilityThresholdAttribute?: number;
    S3DataDistributionType?: string;
    S3InputMode?: string;
    StartTimeOffset?: string;
}
export interface AWSSageMakerModelBiasJobDefinitionMonitoringGroundTruthS3Input {
    S3Uri: string;
}
export interface AWSSageMakerModelBiasJobDefinitionMonitoringOutputConfig {
    KmsKeyId?: string;
    MonitoringOutputs: AWSSageMakerModelBiasJobDefinitionMonitoringOutput[];
}
export interface AWSSageMakerModelBiasJobDefinitionMonitoringOutput {
    S3Output: AWSSageMakerModelBiasJobDefinitionS3Output;
}
export interface AWSSageMakerModelBiasJobDefinitionS3Output {
    LocalPath: string;
    S3UploadMode?: string;
    S3Uri: string;
}
export interface AWSSageMakerModelBiasJobDefinitionNetworkConfig {
    EnableInterContainerTrafficEncryption?: boolean;
    EnableNetworkIsolation?: boolean;
    VpcConfig?: AWSSageMakerModelBiasJobDefinitionVpcConfig;
}
export interface AWSSageMakerModelBiasJobDefinitionVpcConfig {
    SecurityGroupIds: string[];
    Subnets: string[];
}
export interface AWSSageMakerModelBiasJobDefinitionStoppingCondition {
    MaxRuntimeInSeconds: number;
}
export interface AWSSageMakerModelExplainabilityJobDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        JobDefinitionName?: string;
        JobResources: AWSSageMakerModelExplainabilityJobDefinitionMonitoringResources;
        ModelExplainabilityAppSpecification: AWSSageMakerModelExplainabilityJobDefinitionModelExplainabilityAppSpecification;
        ModelExplainabilityBaselineConfig?: AWSSageMakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig;
        ModelExplainabilityJobInput: AWSSageMakerModelExplainabilityJobDefinitionModelExplainabilityJobInput;
        ModelExplainabilityJobOutputConfig: AWSSageMakerModelExplainabilityJobDefinitionMonitoringOutputConfig;
        NetworkConfig?: AWSSageMakerModelExplainabilityJobDefinitionNetworkConfig;
        RoleArn: string;
        StoppingCondition?: AWSSageMakerModelExplainabilityJobDefinitionStoppingCondition;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::ModelExplainabilityJobDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerModelExplainabilityJobDefinitionMonitoringResources {
    ClusterConfig: AWSSageMakerModelExplainabilityJobDefinitionClusterConfig;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionClusterConfig {
    InstanceCount: number;
    InstanceType: string;
    VolumeKmsKeyId?: string;
    VolumeSizeInGB: number;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionModelExplainabilityAppSpecification {
    ConfigUri: string;
    Environment?: {
        [k: string]: unknown;
    };
    ImageUri: string;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig {
    BaseliningJobName?: string;
    ConstraintsResource?: AWSSageMakerModelExplainabilityJobDefinitionConstraintsResource;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionConstraintsResource {
    S3Uri?: string;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionModelExplainabilityJobInput {
    EndpointInput: AWSSageMakerModelExplainabilityJobDefinitionEndpointInput;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionEndpointInput {
    EndpointName: string;
    FeaturesAttribute?: string;
    InferenceAttribute?: string;
    LocalPath: string;
    ProbabilityAttribute?: string;
    S3DataDistributionType?: string;
    S3InputMode?: string;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionMonitoringOutputConfig {
    KmsKeyId?: string;
    MonitoringOutputs: AWSSageMakerModelExplainabilityJobDefinitionMonitoringOutput[];
}
export interface AWSSageMakerModelExplainabilityJobDefinitionMonitoringOutput {
    S3Output: AWSSageMakerModelExplainabilityJobDefinitionS3Output;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionS3Output {
    LocalPath: string;
    S3UploadMode?: string;
    S3Uri: string;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionNetworkConfig {
    EnableInterContainerTrafficEncryption?: boolean;
    EnableNetworkIsolation?: boolean;
    VpcConfig?: AWSSageMakerModelExplainabilityJobDefinitionVpcConfig;
}
export interface AWSSageMakerModelExplainabilityJobDefinitionVpcConfig {
    SecurityGroupIds: string[];
    Subnets: string[];
}
export interface AWSSageMakerModelExplainabilityJobDefinitionStoppingCondition {
    MaxRuntimeInSeconds: number;
}
export interface AWSSageMakerModelPackageGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ModelPackageGroupDescription?: string;
        ModelPackageGroupName: string;
        ModelPackageGroupPolicy?: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::ModelPackageGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerModelQualityJobDefinition {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        JobDefinitionName?: string;
        JobResources: AWSSageMakerModelQualityJobDefinitionMonitoringResources;
        ModelQualityAppSpecification: AWSSageMakerModelQualityJobDefinitionModelQualityAppSpecification;
        ModelQualityBaselineConfig?: AWSSageMakerModelQualityJobDefinitionModelQualityBaselineConfig;
        ModelQualityJobInput: AWSSageMakerModelQualityJobDefinitionModelQualityJobInput;
        ModelQualityJobOutputConfig: AWSSageMakerModelQualityJobDefinitionMonitoringOutputConfig;
        NetworkConfig?: AWSSageMakerModelQualityJobDefinitionNetworkConfig;
        RoleArn: string;
        StoppingCondition?: AWSSageMakerModelQualityJobDefinitionStoppingCondition;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::ModelQualityJobDefinition";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerModelQualityJobDefinitionMonitoringResources {
    ClusterConfig: AWSSageMakerModelQualityJobDefinitionClusterConfig;
}
export interface AWSSageMakerModelQualityJobDefinitionClusterConfig {
    InstanceCount: number;
    InstanceType: string;
    VolumeKmsKeyId?: string;
    VolumeSizeInGB: number;
}
export interface AWSSageMakerModelQualityJobDefinitionModelQualityAppSpecification {
    ContainerArguments?: string[];
    ContainerEntrypoint?: string[];
    Environment?: {
        [k: string]: unknown;
    };
    ImageUri: string;
    PostAnalyticsProcessorSourceUri?: string;
    ProblemType: string;
    RecordPreprocessorSourceUri?: string;
}
export interface AWSSageMakerModelQualityJobDefinitionModelQualityBaselineConfig {
    BaseliningJobName?: string;
    ConstraintsResource?: AWSSageMakerModelQualityJobDefinitionConstraintsResource;
}
export interface AWSSageMakerModelQualityJobDefinitionConstraintsResource {
    S3Uri?: string;
}
export interface AWSSageMakerModelQualityJobDefinitionModelQualityJobInput {
    EndpointInput: AWSSageMakerModelQualityJobDefinitionEndpointInput;
    GroundTruthS3Input: AWSSageMakerModelQualityJobDefinitionMonitoringGroundTruthS3Input;
}
export interface AWSSageMakerModelQualityJobDefinitionEndpointInput {
    EndTimeOffset?: string;
    EndpointName: string;
    InferenceAttribute?: string;
    LocalPath: string;
    ProbabilityAttribute?: string;
    ProbabilityThresholdAttribute?: number;
    S3DataDistributionType?: string;
    S3InputMode?: string;
    StartTimeOffset?: string;
}
export interface AWSSageMakerModelQualityJobDefinitionMonitoringGroundTruthS3Input {
    S3Uri: string;
}
export interface AWSSageMakerModelQualityJobDefinitionMonitoringOutputConfig {
    KmsKeyId?: string;
    MonitoringOutputs: AWSSageMakerModelQualityJobDefinitionMonitoringOutput[];
}
export interface AWSSageMakerModelQualityJobDefinitionMonitoringOutput {
    S3Output: AWSSageMakerModelQualityJobDefinitionS3Output;
}
export interface AWSSageMakerModelQualityJobDefinitionS3Output {
    LocalPath: string;
    S3UploadMode?: string;
    S3Uri: string;
}
export interface AWSSageMakerModelQualityJobDefinitionNetworkConfig {
    EnableInterContainerTrafficEncryption?: boolean;
    EnableNetworkIsolation?: boolean;
    VpcConfig?: AWSSageMakerModelQualityJobDefinitionVpcConfig;
}
export interface AWSSageMakerModelQualityJobDefinitionVpcConfig {
    SecurityGroupIds: string[];
    Subnets: string[];
}
export interface AWSSageMakerModelQualityJobDefinitionStoppingCondition {
    MaxRuntimeInSeconds: number;
}
export interface AWSSageMakerMonitoringSchedule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        EndpointName?: string;
        FailureReason?: string;
        LastMonitoringExecutionSummary?: AWSSageMakerMonitoringScheduleMonitoringExecutionSummary;
        MonitoringScheduleConfig: AWSSageMakerMonitoringScheduleMonitoringScheduleConfig;
        MonitoringScheduleName: string;
        MonitoringScheduleStatus?: string;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::MonitoringSchedule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerMonitoringScheduleMonitoringExecutionSummary {
    CreationTime: string;
    EndpointName?: string;
    FailureReason?: string;
    LastModifiedTime: string;
    MonitoringExecutionStatus: string;
    MonitoringScheduleName: string;
    ProcessingJobArn?: string;
    ScheduledTime: string;
}
export interface AWSSageMakerMonitoringScheduleMonitoringScheduleConfig {
    MonitoringJobDefinition?: AWSSageMakerMonitoringScheduleMonitoringJobDefinition;
    MonitoringJobDefinitionName?: string;
    MonitoringType?: string;
    ScheduleConfig?: AWSSageMakerMonitoringScheduleScheduleConfig;
}
export interface AWSSageMakerMonitoringScheduleMonitoringJobDefinition {
    BaselineConfig?: AWSSageMakerMonitoringScheduleBaselineConfig;
    Environment?: {
        [k: string]: unknown;
    };
    MonitoringAppSpecification: AWSSageMakerMonitoringScheduleMonitoringAppSpecification;
    MonitoringInputs: AWSSageMakerMonitoringScheduleMonitoringInput[];
    MonitoringOutputConfig: AWSSageMakerMonitoringScheduleMonitoringOutputConfig;
    MonitoringResources: AWSSageMakerMonitoringScheduleMonitoringResources;
    NetworkConfig?: AWSSageMakerMonitoringScheduleNetworkConfig;
    RoleArn: string;
    StoppingCondition?: AWSSageMakerMonitoringScheduleStoppingCondition;
}
export interface AWSSageMakerMonitoringScheduleBaselineConfig {
    ConstraintsResource?: AWSSageMakerMonitoringScheduleConstraintsResource;
    StatisticsResource?: AWSSageMakerMonitoringScheduleStatisticsResource;
}
export interface AWSSageMakerMonitoringScheduleConstraintsResource {
    S3Uri?: string;
}
export interface AWSSageMakerMonitoringScheduleStatisticsResource {
    S3Uri?: string;
}
export interface AWSSageMakerMonitoringScheduleMonitoringAppSpecification {
    ContainerArguments?: string[];
    ContainerEntrypoint?: string[];
    ImageUri: string;
    PostAnalyticsProcessorSourceUri?: string;
    RecordPreprocessorSourceUri?: string;
}
export interface AWSSageMakerMonitoringScheduleMonitoringInput {
    EndpointInput: AWSSageMakerMonitoringScheduleEndpointInput;
}
export interface AWSSageMakerMonitoringScheduleEndpointInput {
    EndpointName: string;
    LocalPath: string;
    S3DataDistributionType?: string;
    S3InputMode?: string;
}
export interface AWSSageMakerMonitoringScheduleMonitoringOutputConfig {
    KmsKeyId?: string;
    MonitoringOutputs: AWSSageMakerMonitoringScheduleMonitoringOutput[];
}
export interface AWSSageMakerMonitoringScheduleMonitoringOutput {
    S3Output: AWSSageMakerMonitoringScheduleS3Output;
}
export interface AWSSageMakerMonitoringScheduleS3Output {
    LocalPath: string;
    S3UploadMode?: string;
    S3Uri: string;
}
export interface AWSSageMakerMonitoringScheduleMonitoringResources {
    ClusterConfig: AWSSageMakerMonitoringScheduleClusterConfig;
}
export interface AWSSageMakerMonitoringScheduleClusterConfig {
    InstanceCount: number;
    InstanceType: string;
    VolumeKmsKeyId?: string;
    VolumeSizeInGB: number;
}
export interface AWSSageMakerMonitoringScheduleNetworkConfig {
    EnableInterContainerTrafficEncryption?: boolean;
    EnableNetworkIsolation?: boolean;
    VpcConfig?: AWSSageMakerMonitoringScheduleVpcConfig;
}
export interface AWSSageMakerMonitoringScheduleVpcConfig {
    SecurityGroupIds: string[];
    Subnets: string[];
}
export interface AWSSageMakerMonitoringScheduleStoppingCondition {
    MaxRuntimeInSeconds: number;
}
export interface AWSSageMakerMonitoringScheduleScheduleConfig {
    ScheduleExpression: string;
}
export interface AWSSageMakerNotebookInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceleratorTypes?: string[];
        AdditionalCodeRepositories?: string[];
        DefaultCodeRepository?: string;
        DirectInternetAccess?: string;
        InstanceType: string;
        KmsKeyId?: string;
        LifecycleConfigName?: string;
        NotebookInstanceName?: string;
        RoleArn: string;
        RootAccess?: string;
        SecurityGroupIds?: string[];
        SubnetId?: string;
        Tags?: Tag[];
        VolumeSizeInGB?: number;
    };
    Type: "AWS::SageMaker::NotebookInstance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerNotebookInstanceLifecycleConfig {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        NotebookInstanceLifecycleConfigName?: string;
        OnCreate?: AWSSageMakerNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook[];
        OnStart?: AWSSageMakerNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook[];
    };
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook {
    Content?: string;
}
export interface AWSSageMakerPipeline {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PipelineDefinition: {
            [k: string]: unknown;
        };
        PipelineDescription?: string;
        PipelineDisplayName?: string;
        PipelineName: string;
        RoleArn: string;
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::Pipeline";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerProject {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ProjectDescription?: string;
        ProjectName: string;
        ServiceCatalogProvisioningDetails: {
            [k: string]: unknown;
        };
        Tags?: Tag[];
    };
    Type: "AWS::SageMaker::Project";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerUserProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DomainId: string;
        SingleSignOnUserIdentifier?: string;
        SingleSignOnUserValue?: string;
        Tags?: Tag[];
        UserProfileName: string;
        UserSettings?: AWSSageMakerUserProfileUserSettings;
    };
    Type: "AWS::SageMaker::UserProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerUserProfileUserSettings {
    ExecutionRole?: string;
    JupyterServerAppSettings?: AWSSageMakerUserProfileJupyterServerAppSettings;
    KernelGatewayAppSettings?: AWSSageMakerUserProfileKernelGatewayAppSettings;
    SecurityGroups?: string[];
    SharingSettings?: AWSSageMakerUserProfileSharingSettings;
}
export interface AWSSageMakerUserProfileJupyterServerAppSettings {
    DefaultResourceSpec?: AWSSageMakerUserProfileResourceSpec;
}
export interface AWSSageMakerUserProfileResourceSpec {
    InstanceType?: string;
    SageMakerImageArn?: string;
    SageMakerImageVersionArn?: string;
}
export interface AWSSageMakerUserProfileKernelGatewayAppSettings {
    CustomImages?: AWSSageMakerUserProfileCustomImage[];
    DefaultResourceSpec?: AWSSageMakerUserProfileResourceSpec;
}
export interface AWSSageMakerUserProfileCustomImage {
    AppImageConfigName: string;
    ImageName: string;
    ImageVersionNumber?: number;
}
export interface AWSSageMakerUserProfileSharingSettings {
    NotebookOutputOption?: string;
    S3KmsKeyId?: string;
    S3OutputPath?: string;
}
export interface AWSSageMakerWorkteam {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        MemberDefinitions?: AWSSageMakerWorkteamMemberDefinition[];
        NotificationConfiguration?: AWSSageMakerWorkteamNotificationConfiguration;
        Tags?: Tag[];
        WorkteamName?: string;
    };
    Type: "AWS::SageMaker::Workteam";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSageMakerWorkteamMemberDefinition {
    CognitoMemberDefinition: AWSSageMakerWorkteamCognitoMemberDefinition;
}
export interface AWSSageMakerWorkteamCognitoMemberDefinition {
    CognitoClientId: string;
    CognitoUserGroup: string;
    CognitoUserPool: string;
}
export interface AWSSageMakerWorkteamNotificationConfiguration {
    NotificationTopicArn: string;
}
export interface AWSSecretsManagerResourcePolicy {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BlockPublicPolicy?: boolean;
        ResourcePolicy: {
            [k: string]: unknown;
        };
        SecretId: string;
    };
    Type: "AWS::SecretsManager::ResourcePolicy";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSecretsManagerRotationSchedule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        HostedRotationLambda?: AWSSecretsManagerRotationScheduleHostedRotationLambda;
        RotationLambdaARN?: string;
        RotationRules?: AWSSecretsManagerRotationScheduleRotationRules;
        SecretId: string;
    };
    Type: "AWS::SecretsManager::RotationSchedule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSecretsManagerRotationScheduleHostedRotationLambda {
    KmsKeyArn?: string;
    MasterSecretArn?: string;
    MasterSecretKmsKeyArn?: string;
    RotationLambdaName?: string;
    RotationType: string;
    VpcSecurityGroupIds?: string;
    VpcSubnetIds?: string;
}
export interface AWSSecretsManagerRotationScheduleRotationRules {
    AutomaticallyAfterDays?: number;
}
export interface AWSSecretsManagerSecret {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        GenerateSecretString?: AWSSecretsManagerSecretGenerateSecretString;
        KmsKeyId?: string;
        Name?: string;
        ReplicaRegions?: AWSSecretsManagerSecretReplicaRegion[];
        SecretString?: string;
        Tags?: Tag[];
    };
    Type: "AWS::SecretsManager::Secret";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSecretsManagerSecretGenerateSecretString {
    ExcludeCharacters?: string;
    ExcludeLowercase?: boolean;
    ExcludeNumbers?: boolean;
    ExcludePunctuation?: boolean;
    ExcludeUppercase?: boolean;
    GenerateStringKey?: string;
    IncludeSpace?: boolean;
    PasswordLength?: number;
    RequireEachIncludedType?: boolean;
    SecretStringTemplate?: string;
}
export interface AWSSecretsManagerSecretReplicaRegion {
    KmsKeyId?: string;
    Region: string;
}
export interface AWSSecretsManagerSecretTargetAttachment {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        SecretId: string;
        TargetId: string;
        TargetType: string;
    };
    Type: "AWS::SecretsManager::SecretTargetAttachment";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSecurityHubHub {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::SecurityHub::Hub";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogAcceptedPortfolioShare {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        PortfolioId: string;
    };
    Type: "AWS::ServiceCatalog::AcceptedPortfolioShare";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogCloudFormationProduct {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        Description?: string;
        Distributor?: string;
        Name: string;
        Owner: string;
        ProvisioningArtifactParameters: AWSServiceCatalogCloudFormationProductProvisioningArtifactProperties[];
        ReplaceProvisioningArtifacts?: boolean;
        SupportDescription?: string;
        SupportEmail?: string;
        SupportUrl?: string;
        Tags?: Tag[];
    };
    Type: "AWS::ServiceCatalog::CloudFormationProduct";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogCloudFormationProductProvisioningArtifactProperties {
    Description?: string;
    DisableTemplateValidation?: boolean;
    Info: {
        [k: string]: unknown;
    };
    Name?: string;
}
export interface AWSServiceCatalogCloudFormationProvisionedProduct {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        AcceptLanguage?: string;
        NotificationArns?: string[];
        PathId?: string;
        PathName?: string;
        ProductId?: string;
        ProductName?: string;
        ProvisionedProductName?: string;
        ProvisioningArtifactId?: string;
        ProvisioningArtifactName?: string;
        ProvisioningParameters?: AWSServiceCatalogCloudFormationProvisionedProductProvisioningParameter[];
        ProvisioningPreferences?: AWSServiceCatalogCloudFormationProvisionedProductProvisioningPreferences;
        Tags?: Tag[];
    };
    Type: "AWS::ServiceCatalog::CloudFormationProvisionedProduct";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogCloudFormationProvisionedProductProvisioningParameter {
    Key: string;
    Value: string;
}
export interface AWSServiceCatalogCloudFormationProvisionedProductProvisioningPreferences {
    StackSetAccounts?: string[];
    StackSetFailureToleranceCount?: number;
    StackSetFailureTolerancePercentage?: number;
    StackSetMaxConcurrencyCount?: number;
    StackSetMaxConcurrencyPercentage?: number;
    StackSetOperationType?: string;
    StackSetRegions?: string[];
}
export interface AWSServiceCatalogLaunchNotificationConstraint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        Description?: string;
        NotificationArns: string[];
        PortfolioId: string;
        ProductId: string;
    };
    Type: "AWS::ServiceCatalog::LaunchNotificationConstraint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogLaunchRoleConstraint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        Description?: string;
        LocalRoleName?: string;
        PortfolioId: string;
        ProductId: string;
        RoleArn?: string;
    };
    Type: "AWS::ServiceCatalog::LaunchRoleConstraint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogLaunchTemplateConstraint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        Description?: string;
        PortfolioId: string;
        ProductId: string;
        Rules: string;
    };
    Type: "AWS::ServiceCatalog::LaunchTemplateConstraint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogPortfolio {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        Description?: string;
        DisplayName: string;
        ProviderName: string;
        Tags?: Tag[];
    };
    Type: "AWS::ServiceCatalog::Portfolio";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogPortfolioPrincipalAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        PortfolioId: string;
        PrincipalARN: string;
        PrincipalType: string;
    };
    Type: "AWS::ServiceCatalog::PortfolioPrincipalAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogPortfolioProductAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        PortfolioId: string;
        ProductId: string;
        SourcePortfolioId?: string;
    };
    Type: "AWS::ServiceCatalog::PortfolioProductAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogPortfolioShare {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        AccountId: string;
        PortfolioId: string;
        ShareTagOptions?: boolean;
    };
    Type: "AWS::ServiceCatalog::PortfolioShare";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogResourceUpdateConstraint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        Description?: string;
        PortfolioId: string;
        ProductId: string;
        TagUpdateOnProvisionedProduct: string;
    };
    Type: "AWS::ServiceCatalog::ResourceUpdateConstraint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogServiceAction {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        Definition: AWSServiceCatalogServiceActionDefinitionParameter[];
        DefinitionType: string;
        Description?: string;
        Name: string;
    };
    Type: "AWS::ServiceCatalog::ServiceAction";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogServiceActionDefinitionParameter {
    Key: string;
    Value: string;
}
export interface AWSServiceCatalogServiceActionAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ProductId: string;
        ProvisioningArtifactId: string;
        ServiceActionId: string;
    };
    Type: "AWS::ServiceCatalog::ServiceActionAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogStackSetConstraint {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AcceptLanguage?: string;
        AccountList: string[];
        AdminRole: string;
        Description: string;
        ExecutionRole: string;
        PortfolioId: string;
        ProductId: string;
        RegionList: string[];
        StackInstanceControl: string;
    };
    Type: "AWS::ServiceCatalog::StackSetConstraint";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogTagOption {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Active?: boolean;
        Key: string;
        Value: string;
    };
    Type: "AWS::ServiceCatalog::TagOption";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogTagOptionAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceId: string;
        TagOptionId: string;
    };
    Type: "AWS::ServiceCatalog::TagOptionAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogAppRegistryApplication {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ServiceCatalogAppRegistry::Application";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogAppRegistryAttributeGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Attributes: {
            [k: string]: unknown;
        };
        Description?: string;
        Name: string;
        Tags?: {
            [k: string]: unknown;
        };
    };
    Type: "AWS::ServiceCatalogAppRegistry::AttributeGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogAppRegistryAttributeGroupAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Application: string;
        AttributeGroup: string;
    };
    Type: "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceCatalogAppRegistryResourceAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Application: string;
        Resource: string;
        ResourceType: string;
    };
    Type: "AWS::ServiceCatalogAppRegistry::ResourceAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceDiscoveryHttpNamespace {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Tags?: Tag[];
    };
    Type: "AWS::ServiceDiscovery::HttpNamespace";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceDiscoveryInstance {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        InstanceAttributes: {
            [k: string]: unknown;
        };
        InstanceId?: string;
        ServiceId: string;
    };
    Type: "AWS::ServiceDiscovery::Instance";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceDiscoveryPrivateDnsNamespace {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Properties?: AWSServiceDiscoveryPrivateDnsNamespaceProperties;
        Tags?: Tag[];
        Vpc: string;
    };
    Type: "AWS::ServiceDiscovery::PrivateDnsNamespace";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceDiscoveryPrivateDnsNamespaceProperties {
    DnsProperties?: AWSServiceDiscoveryPrivateDnsNamespacePrivateDnsPropertiesMutable;
}
export interface AWSServiceDiscoveryPrivateDnsNamespacePrivateDnsPropertiesMutable {
    SOA?: AWSServiceDiscoveryPrivateDnsNamespaceSOA;
}
export interface AWSServiceDiscoveryPrivateDnsNamespaceSOA {
    TTL?: number;
}
export interface AWSServiceDiscoveryPublicDnsNamespace {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name: string;
        Properties?: AWSServiceDiscoveryPublicDnsNamespaceProperties;
        Tags?: Tag[];
    };
    Type: "AWS::ServiceDiscovery::PublicDnsNamespace";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceDiscoveryPublicDnsNamespaceProperties {
    DnsProperties?: AWSServiceDiscoveryPublicDnsNamespacePublicDnsPropertiesMutable;
}
export interface AWSServiceDiscoveryPublicDnsNamespacePublicDnsPropertiesMutable {
    SOA?: AWSServiceDiscoveryPublicDnsNamespaceSOA;
}
export interface AWSServiceDiscoveryPublicDnsNamespaceSOA {
    TTL?: number;
}
export interface AWSServiceDiscoveryService {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Description?: string;
        DnsConfig?: AWSServiceDiscoveryServiceDnsConfig;
        HealthCheckConfig?: AWSServiceDiscoveryServiceHealthCheckConfig;
        HealthCheckCustomConfig?: AWSServiceDiscoveryServiceHealthCheckCustomConfig;
        Name?: string;
        NamespaceId?: string;
        Tags?: Tag[];
        Type?: string;
    };
    Type: "AWS::ServiceDiscovery::Service";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSServiceDiscoveryServiceDnsConfig {
    DnsRecords: AWSServiceDiscoveryServiceDnsRecord[];
    NamespaceId?: string;
    RoutingPolicy?: string;
}
export interface AWSServiceDiscoveryServiceDnsRecord {
    TTL: number;
    Type: string;
}
export interface AWSServiceDiscoveryServiceHealthCheckConfig {
    FailureThreshold?: number;
    ResourcePath?: string;
    Type: string;
}
export interface AWSServiceDiscoveryServiceHealthCheckCustomConfig {
    FailureThreshold?: number;
}
export interface AWSSignerProfilePermission {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Action: string;
        Principal: string;
        ProfileName: string;
        ProfileVersion?: string;
        StatementId: string;
    };
    Type: "AWS::Signer::ProfilePermission";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSignerSigningProfile {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        PlatformId: string;
        SignatureValidityPeriod?: AWSSignerSigningProfileSignatureValidityPeriod;
        Tags?: Tag[];
    };
    Type: "AWS::Signer::SigningProfile";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSignerSigningProfileSignatureValidityPeriod {
    Type?: string;
    Value?: number;
}
export interface AWSStepFunctionsActivity {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        Tags?: AWSStepFunctionsActivityTagsEntry[];
    };
    Type: "AWS::StepFunctions::Activity";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSStepFunctionsActivityTagsEntry {
    Key: string;
    Value: string;
}
export interface AWSStepFunctionsStateMachine {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Definition?: AWSStepFunctionsStateMachineDefinition;
        DefinitionS3Location?: AWSStepFunctionsStateMachineS3Location;
        DefinitionString?: string;
        DefinitionSubstitutions?: {
            [k: string]: unknown;
        };
        LoggingConfiguration?: AWSStepFunctionsStateMachineLoggingConfiguration;
        RoleArn: string;
        StateMachineName?: string;
        StateMachineType?: string;
        Tags?: AWSStepFunctionsStateMachineTagsEntry[];
        TracingConfiguration?: AWSStepFunctionsStateMachineTracingConfiguration;
    };
    Type: "AWS::StepFunctions::StateMachine";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSStepFunctionsStateMachineDefinition {}
export interface AWSStepFunctionsStateMachineS3Location {
    Bucket: string;
    Key: string;
    Version?: string;
}
export interface AWSStepFunctionsStateMachineLoggingConfiguration {
    Destinations?: AWSStepFunctionsStateMachineLogDestination[];
    IncludeExecutionData?: boolean;
    Level?: string;
}
export interface AWSStepFunctionsStateMachineLogDestination {
    CloudWatchLogsLogGroup?: AWSStepFunctionsStateMachineCloudWatchLogsLogGroup;
}
export interface AWSStepFunctionsStateMachineCloudWatchLogsLogGroup {
    LogGroupArn?: string;
}
export interface AWSStepFunctionsStateMachineTagsEntry {
    Key: string;
    Value: string;
}
export interface AWSStepFunctionsStateMachineTracingConfiguration {
    Enabled?: boolean;
}
export interface AWSSyntheticsCanary {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ArtifactS3Location: string;
        Code: AWSSyntheticsCanaryCode;
        ExecutionRoleArn: string;
        FailureRetentionPeriod?: number;
        Name: string;
        RunConfig?: AWSSyntheticsCanaryRunConfig;
        RuntimeVersion: string;
        Schedule: AWSSyntheticsCanarySchedule;
        StartCanaryAfterCreation: boolean;
        SuccessRetentionPeriod?: number;
        Tags?: Tag[];
        VPCConfig?: AWSSyntheticsCanaryVPCConfig;
        VisualReference?: AWSSyntheticsCanaryVisualReference;
    };
    Type: "AWS::Synthetics::Canary";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSSyntheticsCanaryCode {
    Handler: string;
    S3Bucket?: string;
    S3Key?: string;
    S3ObjectVersion?: string;
    Script?: string;
}
export interface AWSSyntheticsCanaryRunConfig {
    ActiveTracing?: boolean;
    EnvironmentVariables?: {
        [k: string]: unknown;
    };
    MemoryInMB?: number;
    TimeoutInSeconds?: number;
}
export interface AWSSyntheticsCanarySchedule {
    DurationInSeconds?: string;
    Expression: string;
}
export interface AWSSyntheticsCanaryVPCConfig {
    SecurityGroupIds: string[];
    SubnetIds: string[];
    VpcId?: string;
}
export interface AWSSyntheticsCanaryVisualReference {
    BaseCanaryRunId: string;
    BaseScreenshots?: AWSSyntheticsCanaryBaseScreenshot[];
}
export interface AWSSyntheticsCanaryBaseScreenshot {
    IgnoreCoordinates?: string[];
    ScreenshotName: string;
}
export interface AWSTimestreamDatabase {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        DatabaseName?: string;
        KmsKeyId?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Timestream::Database";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSTimestreamTable {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DatabaseName: string;
        RetentionProperties?: {
            [k: string]: unknown;
        };
        TableName?: string;
        Tags?: Tag[];
    };
    Type: "AWS::Timestream::Table";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSTransferServer {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        Certificate?: string;
        Domain?: string;
        EndpointDetails?: AWSTransferServerEndpointDetails;
        EndpointType?: string;
        IdentityProviderDetails?: AWSTransferServerIdentityProviderDetails;
        IdentityProviderType?: string;
        LoggingRole?: string;
        ProtocolDetails?: AWSTransferServerProtocolDetails;
        Protocols?: AWSTransferServerProtocol[];
        SecurityPolicyName?: string;
        Tags?: Tag[];
        WorkflowDetails?: AWSTransferServerWorkflowDetails;
    };
    Type: "AWS::Transfer::Server";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSTransferServerEndpointDetails {
    AddressAllocationIds?: string[];
    SecurityGroupIds?: string[];
    SubnetIds?: string[];
    VpcEndpointId?: string;
    VpcId?: string;
}
export interface AWSTransferServerIdentityProviderDetails {
    DirectoryId?: string;
    InvocationRole?: string;
    Url?: string;
}
export interface AWSTransferServerProtocolDetails {
    PassiveIp?: string;
}
export interface AWSTransferServerProtocol {}
export interface AWSTransferServerWorkflowDetails {
    OnUpload: AWSTransferServerWorkflowDetail[];
}
export interface AWSTransferServerWorkflowDetail {
    ExecutionRole: string;
    WorkflowId: string;
}
export interface AWSTransferUser {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        HomeDirectory?: string;
        HomeDirectoryMappings?: AWSTransferUserHomeDirectoryMapEntry[];
        HomeDirectoryType?: string;
        Policy?: string;
        PosixProfile?: AWSTransferUserPosixProfile;
        Role: string;
        ServerId: string;
        SshPublicKeys?: AWSTransferUserSshPublicKey[];
        Tags?: Tag[];
        UserName: string;
    };
    Type: "AWS::Transfer::User";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSTransferUserHomeDirectoryMapEntry {
    Entry: string;
    Target: string;
}
export interface AWSTransferUserPosixProfile {
    Gid: number;
    SecondaryGids?: number[];
    Uid: number;
}
export interface AWSTransferUserSshPublicKey {}
export interface AWSWAFByteMatchSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ByteMatchTuples?: AWSWAFByteMatchSetByteMatchTuple[];
        Name: string;
    };
    Type: "AWS::WAF::ByteMatchSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFByteMatchSetByteMatchTuple {
    FieldToMatch: AWSWAFByteMatchSetFieldToMatch;
    PositionalConstraint: string;
    TargetString?: string;
    TargetStringBase64?: string;
    TextTransformation: string;
}
export interface AWSWAFByteMatchSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFIPSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        IPSetDescriptors?: AWSWAFIPSetIPSetDescriptor[];
        Name: string;
    };
    Type: "AWS::WAF::IPSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFIPSetIPSetDescriptor {
    Type: string;
    Value: string;
}
export interface AWSWAFRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MetricName: string;
        Name: string;
        Predicates?: AWSWAFRulePredicate[];
    };
    Type: "AWS::WAF::Rule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRulePredicate {
    DataId: string;
    Negated: boolean;
    Type: string;
}
export interface AWSWAFSizeConstraintSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        SizeConstraints: AWSWAFSizeConstraintSetSizeConstraint[];
    };
    Type: "AWS::WAF::SizeConstraintSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFSizeConstraintSetSizeConstraint {
    ComparisonOperator: string;
    FieldToMatch: AWSWAFSizeConstraintSetFieldToMatch;
    Size: number;
    TextTransformation: string;
}
export interface AWSWAFSizeConstraintSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFSqlInjectionMatchSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        SqlInjectionMatchTuples?: AWSWAFSqlInjectionMatchSetSqlInjectionMatchTuple[];
    };
    Type: "AWS::WAF::SqlInjectionMatchSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFSqlInjectionMatchSetSqlInjectionMatchTuple {
    FieldToMatch: AWSWAFSqlInjectionMatchSetFieldToMatch;
    TextTransformation: string;
}
export interface AWSWAFSqlInjectionMatchSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFWebACL {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DefaultAction: AWSWAFWebACLWafAction;
        MetricName: string;
        Name: string;
        Rules?: AWSWAFWebACLActivatedRule[];
    };
    Type: "AWS::WAF::WebACL";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFWebACLWafAction {
    Type: string;
}
export interface AWSWAFWebACLActivatedRule {
    Action?: AWSWAFWebACLWafAction;
    Priority: number;
    RuleId: string;
}
export interface AWSWAFXssMatchSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        XssMatchTuples: AWSWAFXssMatchSetXssMatchTuple[];
    };
    Type: "AWS::WAF::XssMatchSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFXssMatchSetXssMatchTuple {
    FieldToMatch: AWSWAFXssMatchSetFieldToMatch;
    TextTransformation: string;
}
export interface AWSWAFXssMatchSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFRegionalByteMatchSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ByteMatchTuples?: AWSWAFRegionalByteMatchSetByteMatchTuple[];
        Name: string;
    };
    Type: "AWS::WAFRegional::ByteMatchSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalByteMatchSetByteMatchTuple {
    FieldToMatch: AWSWAFRegionalByteMatchSetFieldToMatch;
    PositionalConstraint: string;
    TargetString?: string;
    TargetStringBase64?: string;
    TextTransformation: string;
}
export interface AWSWAFRegionalByteMatchSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFRegionalGeoMatchSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        GeoMatchConstraints?: AWSWAFRegionalGeoMatchSetGeoMatchConstraint[];
        Name: string;
    };
    Type: "AWS::WAFRegional::GeoMatchSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalGeoMatchSetGeoMatchConstraint {
    Type: string;
    Value: string;
}
export interface AWSWAFRegionalIPSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        IPSetDescriptors?: AWSWAFRegionalIPSetIPSetDescriptor[];
        Name: string;
    };
    Type: "AWS::WAFRegional::IPSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalIPSetIPSetDescriptor {
    Type: string;
    Value: string;
}
export interface AWSWAFRegionalRateBasedRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MatchPredicates?: AWSWAFRegionalRateBasedRulePredicate[];
        MetricName: string;
        Name: string;
        RateKey: string;
        RateLimit: number;
    };
    Type: "AWS::WAFRegional::RateBasedRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalRateBasedRulePredicate {
    DataId: string;
    Negated: boolean;
    Type: string;
}
export interface AWSWAFRegionalRegexPatternSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        RegexPatternStrings: string[];
    };
    Type: "AWS::WAFRegional::RegexPatternSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        MetricName: string;
        Name: string;
        Predicates?: AWSWAFRegionalRulePredicate[];
    };
    Type: "AWS::WAFRegional::Rule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalRulePredicate {
    DataId: string;
    Negated: boolean;
    Type: string;
}
export interface AWSWAFRegionalSizeConstraintSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        SizeConstraints?: AWSWAFRegionalSizeConstraintSetSizeConstraint[];
    };
    Type: "AWS::WAFRegional::SizeConstraintSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalSizeConstraintSetSizeConstraint {
    ComparisonOperator: string;
    FieldToMatch: AWSWAFRegionalSizeConstraintSetFieldToMatch;
    Size: number;
    TextTransformation: string;
}
export interface AWSWAFRegionalSizeConstraintSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFRegionalSqlInjectionMatchSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        SqlInjectionMatchTuples?: AWSWAFRegionalSqlInjectionMatchSetSqlInjectionMatchTuple[];
    };
    Type: "AWS::WAFRegional::SqlInjectionMatchSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalSqlInjectionMatchSetSqlInjectionMatchTuple {
    FieldToMatch: AWSWAFRegionalSqlInjectionMatchSetFieldToMatch;
    TextTransformation: string;
}
export interface AWSWAFRegionalSqlInjectionMatchSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFRegionalWebACL {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        DefaultAction: AWSWAFRegionalWebACLAction;
        MetricName: string;
        Name: string;
        Rules?: AWSWAFRegionalWebACLRule[];
    };
    Type: "AWS::WAFRegional::WebACL";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalWebACLAction {
    Type: string;
}
export interface AWSWAFRegionalWebACLRule {
    Action: AWSWAFRegionalWebACLAction;
    Priority: number;
    RuleId: string;
}
export interface AWSWAFRegionalWebACLAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceArn: string;
        WebACLId: string;
    };
    Type: "AWS::WAFRegional::WebACLAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalXssMatchSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Name: string;
        XssMatchTuples?: AWSWAFRegionalXssMatchSetXssMatchTuple[];
    };
    Type: "AWS::WAFRegional::XssMatchSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFRegionalXssMatchSetXssMatchTuple {
    FieldToMatch: AWSWAFRegionalXssMatchSetFieldToMatch;
    TextTransformation: string;
}
export interface AWSWAFRegionalXssMatchSetFieldToMatch {
    Data?: string;
    Type: string;
}
export interface AWSWAFv2IPSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Addresses: string[];
        Description?: string;
        IPAddressVersion: string;
        Name?: string;
        Scope: string;
        Tags?: Tag[];
    };
    Type: "AWS::WAFv2::IPSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFv2LoggingConfiguration {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        LogDestinationConfigs: string[];
        LoggingFilter?: {
            [k: string]: unknown;
        };
        RedactedFields?: AWSWAFv2LoggingConfigurationFieldToMatch[];
        ResourceArn: string;
    };
    Type: "AWS::WAFv2::LoggingConfiguration";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFv2LoggingConfigurationFieldToMatch {
    JsonBody?: {
        [k: string]: unknown;
    };
    Method?: {
        [k: string]: unknown;
    };
    QueryString?: {
        [k: string]: unknown;
    };
    SingleHeader?: {
        [k: string]: unknown;
    };
    UriPath?: {
        [k: string]: unknown;
    };
}
export interface AWSWAFv2RegexPatternSet {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Description?: string;
        Name?: string;
        RegularExpressionList: string[];
        Scope: string;
        Tags?: Tag[];
    };
    Type: "AWS::WAFv2::RegexPatternSet";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWAFv2RuleGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        Capacity: number;
        CustomResponseBodies?: {
            [k: string]: AWSWAFv2RuleGroupCustomResponseBody;
        };
        Description?: string;
        Name?: string;
        Rules?: AWSWAFv2RuleGroupRule[];
        Scope: string;
        Tags?: Tag[];
        VisibilityConfig: AWSWAFv2RuleGroupVisibilityConfig;
    };
    Type: "AWS::WAFv2::RuleGroup";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSWAFv2RuleGroupCustomResponseBody {
    Content: string;
    ContentType: string;
}
export interface AWSWAFv2RuleGroupRule {
    Action?: AWSWAFv2RuleGroupRuleAction;
    Name: string;
    Priority: number;
    RuleLabels?: AWSWAFv2RuleGroupLabel[];
    Statement: AWSWAFv2RuleGroupStatement;
    VisibilityConfig: AWSWAFv2RuleGroupVisibilityConfig;
}
export interface AWSWAFv2RuleGroupRuleAction {
    Allow?: {
        [k: string]: unknown;
    };
    Block?: {
        [k: string]: unknown;
    };
    Count?: {
        [k: string]: unknown;
    };
}
export interface AWSWAFv2RuleGroupLabel {
    Name: string;
}
export interface AWSWAFv2RuleGroupStatement {
    AndStatement?: AWSWAFv2RuleGroupAndStatement;
    ByteMatchStatement?: AWSWAFv2RuleGroupByteMatchStatement;
    GeoMatchStatement?: AWSWAFv2RuleGroupGeoMatchStatement;
    IPSetReferenceStatement?: AWSWAFv2RuleGroupIPSetReferenceStatement;
    LabelMatchStatement?: AWSWAFv2RuleGroupLabelMatchStatement;
    NotStatement?: AWSWAFv2RuleGroupNotStatement;
    OrStatement?: AWSWAFv2RuleGroupOrStatement;
    RateBasedStatement?: AWSWAFv2RuleGroupRateBasedStatement;
    RegexPatternSetReferenceStatement?: AWSWAFv2RuleGroupRegexPatternSetReferenceStatement;
    SizeConstraintStatement?: AWSWAFv2RuleGroupSizeConstraintStatement;
    SqliMatchStatement?: AWSWAFv2RuleGroupSqliMatchStatement;
    XssMatchStatement?: AWSWAFv2RuleGroupXssMatchStatement;
}
export interface AWSWAFv2RuleGroupAndStatement {
    Statements: AWSWAFv2RuleGroupStatement[];
}
export interface AWSWAFv2RuleGroupByteMatchStatement {
    FieldToMatch: AWSWAFv2RuleGroupFieldToMatch;
    PositionalConstraint: string;
    SearchString?: string;
    SearchStringBase64?: string;
    TextTransformations: AWSWAFv2RuleGroupTextTransformation[];
}
export interface AWSWAFv2RuleGroupFieldToMatch {
    AllQueryArguments?: {
        [k: string]: unknown;
    };
    Body?: {
        [k: string]: unknown;
    };
    JsonBody?: AWSWAFv2RuleGroupJsonBody;
    Method?: {
        [k: string]: unknown;
    };
    QueryString?: {
        [k: string]: unknown;
    };
    SingleHeader?: {
        [k: string]: unknown;
    };
    SingleQueryArgument?: {
        [k: string]: unknown;
    };
    UriPath?: {
        [k: string]: unknown;
    };
}
export interface AWSWAFv2RuleGroupJsonBody {
    InvalidFallbackBehavior?: string;
    MatchPattern: AWSWAFv2RuleGroupJsonMatchPattern;
    MatchScope: string;
}
export interface AWSWAFv2RuleGroupJsonMatchPattern {
    All?: {
        [k: string]: unknown;
    };
    IncludedPaths?: string[];
}
export interface AWSWAFv2RuleGroupTextTransformation {
    Priority: number;
    Type: string;
}
export interface AWSWAFv2RuleGroupGeoMatchStatement {
    CountryCodes?: string[];
    ForwardedIPConfig?: AWSWAFv2RuleGroupForwardedIPConfiguration;
}
export interface AWSWAFv2RuleGroupForwardedIPConfiguration {
    FallbackBehavior: string;
    HeaderName: string;
}
export interface AWSWAFv2RuleGroupIPSetReferenceStatement {
    Arn: string;
    IPSetForwardedIPConfig?: AWSWAFv2RuleGroupIPSetForwardedIPConfiguration;
}
export interface AWSWAFv2RuleGroupIPSetForwardedIPConfiguration {
    FallbackBehavior: string;
    HeaderName: string;
    Position: string;
}
export interface AWSWAFv2RuleGroupLabelMatchStatement {
    Key: string;
    Scope: string;
}
export interface AWSWAFv2RuleGroupNotStatement {
    Statement: AWSWAFv2RuleGroupStatement;
}
export interface AWSWAFv2RuleGroupOrStatement {
    Statements: AWSWAFv2RuleGroupStatement[];
}
export interface AWSWAFv2RuleGroupRateBasedStatement {
    AggregateKeyType: string;
    ForwardedIPConfig?: AWSWAFv2RuleGroupForwardedIPConfiguration;
    Limit: number;
    ScopeDownStatement?: AWSWAFv2RuleGroupStatement;
}
export interface AWSWAFv2RuleGroupRegexPatternSetReferenceStatement {
    Arn: string;
    FieldToMatch: AWSWAFv2RuleGroupFieldToMatch;
    TextTransformations: AWSWAFv2RuleGroupTextTransformation[];
}
export interface AWSWAFv2RuleGroupSizeConstraintStatement {
    ComparisonOperator: string;
    FieldToMatch: AWSWAFv2RuleGroupFieldToMatch;
    Size: number;
    TextTransformations: AWSWAFv2RuleGroupTextTransformation[];
}
export interface AWSWAFv2RuleGroupSqliMatchStatement {
    FieldToMatch: AWSWAFv2RuleGroupFieldToMatch;
    TextTransformations: AWSWAFv2RuleGroupTextTransformation[];
}
export interface AWSWAFv2RuleGroupXssMatchStatement {
    FieldToMatch: AWSWAFv2RuleGroupFieldToMatch;
    TextTransformations: AWSWAFv2RuleGroupTextTransformation[];
}
export interface AWSWAFv2RuleGroupVisibilityConfig {
    CloudWatchMetricsEnabled: boolean;
    MetricName: string;
    SampledRequestsEnabled: boolean;
}
export interface AWSWAFv2WebACL {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        CustomResponseBodies?: {
            [k: string]: AWSWAFv2WebACLCustomResponseBody;
        };
        DefaultAction: AWSWAFv2WebACLDefaultAction;
        Description?: string;
        Name?: string;
        Rules?: AWSWAFv2WebACLRule[];
        Scope: string;
        Tags?: Tag[];
        VisibilityConfig: AWSWAFv2WebACLVisibilityConfig;
    };
    Type: "AWS::WAFv2::WebACL";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9]+$".
 */
export interface AWSWAFv2WebACLCustomResponseBody {
    Content: string;
    ContentType: string;
}
export interface AWSWAFv2WebACLDefaultAction {
    Allow?: AWSWAFv2WebACLAllowAction;
    Block?: AWSWAFv2WebACLBlockAction;
}
export interface AWSWAFv2WebACLAllowAction {
    CustomRequestHandling?: AWSWAFv2WebACLCustomRequestHandling;
}
export interface AWSWAFv2WebACLCustomRequestHandling {
    InsertHeaders: AWSWAFv2WebACLCustomHTTPHeader[];
}
export interface AWSWAFv2WebACLCustomHTTPHeader {
    Name: string;
    Value: string;
}
export interface AWSWAFv2WebACLBlockAction {
    CustomResponse?: AWSWAFv2WebACLCustomResponse;
}
export interface AWSWAFv2WebACLCustomResponse {
    CustomResponseBodyKey?: string;
    ResponseCode: number;
    ResponseHeaders?: AWSWAFv2WebACLCustomHTTPHeader[];
}
export interface AWSWAFv2WebACLRule {
    Action?: AWSWAFv2WebACLRuleAction;
    Name: string;
    OverrideAction?: AWSWAFv2WebACLOverrideAction;
    Priority: number;
    RuleLabels?: AWSWAFv2WebACLLabel[];
    Statement: AWSWAFv2WebACLStatement;
    VisibilityConfig: AWSWAFv2WebACLVisibilityConfig;
}
export interface AWSWAFv2WebACLRuleAction {
    Allow?: AWSWAFv2WebACLAllowAction;
    Block?: AWSWAFv2WebACLBlockAction;
    Count?: AWSWAFv2WebACLCountAction;
}
export interface AWSWAFv2WebACLCountAction {
    CustomRequestHandling?: AWSWAFv2WebACLCustomRequestHandling;
}
export interface AWSWAFv2WebACLOverrideAction {
    Count?: {
        [k: string]: unknown;
    };
    None?: {
        [k: string]: unknown;
    };
}
export interface AWSWAFv2WebACLLabel {
    Name: string;
}
export interface AWSWAFv2WebACLStatement {
    AndStatement?: AWSWAFv2WebACLAndStatement;
    ByteMatchStatement?: AWSWAFv2WebACLByteMatchStatement;
    GeoMatchStatement?: AWSWAFv2WebACLGeoMatchStatement;
    IPSetReferenceStatement?: AWSWAFv2WebACLIPSetReferenceStatement;
    LabelMatchStatement?: AWSWAFv2WebACLLabelMatchStatement;
    ManagedRuleGroupStatement?: AWSWAFv2WebACLManagedRuleGroupStatement;
    NotStatement?: AWSWAFv2WebACLNotStatement;
    OrStatement?: AWSWAFv2WebACLOrStatement;
    RateBasedStatement?: AWSWAFv2WebACLRateBasedStatement;
    RegexPatternSetReferenceStatement?: AWSWAFv2WebACLRegexPatternSetReferenceStatement;
    RuleGroupReferenceStatement?: AWSWAFv2WebACLRuleGroupReferenceStatement;
    SizeConstraintStatement?: AWSWAFv2WebACLSizeConstraintStatement;
    SqliMatchStatement?: AWSWAFv2WebACLSqliMatchStatement;
    XssMatchStatement?: AWSWAFv2WebACLXssMatchStatement;
}
export interface AWSWAFv2WebACLAndStatement {
    Statements: AWSWAFv2WebACLStatement[];
}
export interface AWSWAFv2WebACLByteMatchStatement {
    FieldToMatch: AWSWAFv2WebACLFieldToMatch;
    PositionalConstraint: string;
    SearchString?: string;
    SearchStringBase64?: string;
    TextTransformations: AWSWAFv2WebACLTextTransformation[];
}
export interface AWSWAFv2WebACLFieldToMatch {
    AllQueryArguments?: {
        [k: string]: unknown;
    };
    Body?: {
        [k: string]: unknown;
    };
    JsonBody?: AWSWAFv2WebACLJsonBody;
    Method?: {
        [k: string]: unknown;
    };
    QueryString?: {
        [k: string]: unknown;
    };
    SingleHeader?: {
        [k: string]: unknown;
    };
    SingleQueryArgument?: {
        [k: string]: unknown;
    };
    UriPath?: {
        [k: string]: unknown;
    };
}
export interface AWSWAFv2WebACLJsonBody {
    InvalidFallbackBehavior?: string;
    MatchPattern: AWSWAFv2WebACLJsonMatchPattern;
    MatchScope: string;
}
export interface AWSWAFv2WebACLJsonMatchPattern {
    All?: {
        [k: string]: unknown;
    };
    IncludedPaths?: string[];
}
export interface AWSWAFv2WebACLTextTransformation {
    Priority: number;
    Type: string;
}
export interface AWSWAFv2WebACLGeoMatchStatement {
    CountryCodes?: string[];
    ForwardedIPConfig?: AWSWAFv2WebACLForwardedIPConfiguration;
}
export interface AWSWAFv2WebACLForwardedIPConfiguration {
    FallbackBehavior: string;
    HeaderName: string;
}
export interface AWSWAFv2WebACLIPSetReferenceStatement {
    Arn: string;
    IPSetForwardedIPConfig?: AWSWAFv2WebACLIPSetForwardedIPConfiguration;
}
export interface AWSWAFv2WebACLIPSetForwardedIPConfiguration {
    FallbackBehavior: string;
    HeaderName: string;
    Position: string;
}
export interface AWSWAFv2WebACLLabelMatchStatement {
    Key: string;
    Scope: string;
}
export interface AWSWAFv2WebACLManagedRuleGroupStatement {
    ExcludedRules?: AWSWAFv2WebACLExcludedRule[];
    Name: string;
    ScopeDownStatement?: AWSWAFv2WebACLStatement;
    VendorName: string;
    Version?: string;
}
export interface AWSWAFv2WebACLExcludedRule {
    Name: string;
}
export interface AWSWAFv2WebACLNotStatement {
    Statement: AWSWAFv2WebACLStatement;
}
export interface AWSWAFv2WebACLOrStatement {
    Statements: AWSWAFv2WebACLStatement[];
}
export interface AWSWAFv2WebACLRateBasedStatement {
    AggregateKeyType: string;
    ForwardedIPConfig?: AWSWAFv2WebACLForwardedIPConfiguration;
    Limit: number;
    ScopeDownStatement?: AWSWAFv2WebACLStatement;
}
export interface AWSWAFv2WebACLRegexPatternSetReferenceStatement {
    Arn: string;
    FieldToMatch: AWSWAFv2WebACLFieldToMatch;
    TextTransformations: AWSWAFv2WebACLTextTransformation[];
}
export interface AWSWAFv2WebACLRuleGroupReferenceStatement {
    Arn: string;
    ExcludedRules?: AWSWAFv2WebACLExcludedRule[];
}
export interface AWSWAFv2WebACLSizeConstraintStatement {
    ComparisonOperator: string;
    FieldToMatch: AWSWAFv2WebACLFieldToMatch;
    Size: number;
    TextTransformations: AWSWAFv2WebACLTextTransformation[];
}
export interface AWSWAFv2WebACLSqliMatchStatement {
    FieldToMatch: AWSWAFv2WebACLFieldToMatch;
    TextTransformations: AWSWAFv2WebACLTextTransformation[];
}
export interface AWSWAFv2WebACLXssMatchStatement {
    FieldToMatch: AWSWAFv2WebACLFieldToMatch;
    TextTransformations: AWSWAFv2WebACLTextTransformation[];
}
export interface AWSWAFv2WebACLVisibilityConfig {
    CloudWatchMetricsEnabled: boolean;
    MetricName: string;
    SampledRequestsEnabled: boolean;
}
export interface AWSWAFv2WebACLAssociation {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ResourceArn: string;
        WebACLArn: string;
    };
    Type: "AWS::WAFv2::WebACLAssociation";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWorkSpacesConnectionAlias {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        ConnectionString: string;
        Tags?: Tag[];
    };
    Type: "AWS::WorkSpaces::ConnectionAlias";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWorkSpacesWorkspace {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        BundleId: string;
        DirectoryId: string;
        RootVolumeEncryptionEnabled?: boolean;
        Tags?: Tag[];
        UserName: string;
        UserVolumeEncryptionEnabled?: boolean;
        VolumeEncryptionKey?: string;
        WorkspaceProperties?: AWSWorkSpacesWorkspaceWorkspaceProperties;
    };
    Type: "AWS::WorkSpaces::Workspace";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSWorkSpacesWorkspaceWorkspaceProperties {
    ComputeTypeName?: string;
    RootVolumeSizeGib?: number;
    RunningMode?: string;
    RunningModeAutoStopTimeoutInMinutes?: number;
    UserVolumeSizeGib?: number;
}
export interface AWSXRayGroup {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        FilterExpression?: string;
        GroupName?: string;
        InsightsConfiguration?: AWSXRayGroupInsightsConfiguration;
        Tags?: {
            [k: string]: unknown;
        }[];
    };
    Type: "AWS::XRay::Group";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSXRayGroupInsightsConfiguration {
    InsightsEnabled?: boolean;
    NotificationsEnabled?: boolean;
}
export interface AWSXRaySamplingRule {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties?: {
        RuleName?: string;
        SamplingRule?: AWSXRaySamplingRuleSamplingRule;
        SamplingRuleRecord?: AWSXRaySamplingRuleSamplingRuleRecord;
        SamplingRuleUpdate?: AWSXRaySamplingRuleSamplingRuleUpdate;
        Tags?: {
            [k: string]: unknown;
        }[];
    };
    Type: "AWS::XRay::SamplingRule";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AWSXRaySamplingRuleSamplingRule {
    Attributes?: {
        [k: string]: unknown;
    };
    FixedRate?: number;
    HTTPMethod?: string;
    Host?: string;
    Priority?: number;
    ReservoirSize?: number;
    ResourceARN?: string;
    RuleARN?: string;
    RuleName?: string;
    ServiceName?: string;
    ServiceType?: string;
    URLPath?: string;
    Version?: number;
}
export interface AWSXRaySamplingRuleSamplingRuleRecord {
    CreatedAt?: string;
    ModifiedAt?: string;
    SamplingRule?: AWSXRaySamplingRuleSamplingRule;
}
export interface AWSXRaySamplingRuleSamplingRuleUpdate {
    Attributes?: {
        [k: string]: unknown;
    };
    FixedRate?: number;
    HTTPMethod?: string;
    Host?: string;
    Priority?: number;
    ReservoirSize?: number;
    ResourceARN?: string;
    RuleARN?: string;
    RuleName?: string;
    ServiceName?: string;
    ServiceType?: string;
    URLPath?: string;
}
export interface AlexaASKSkill {
    DeletionPolicy?: "Delete" | "Retain" | "Snapshot";
    DependsOn?: string | string[];
    Metadata?: {
        [k: string]: unknown;
    };
    Properties: {
        AuthenticationConfiguration: AlexaASKSkillAuthenticationConfiguration;
        SkillPackage: AlexaASKSkillSkillPackage;
        VendorId: string;
    };
    Type: "Alexa::ASK::Skill";
    UpdateReplacePolicy?: "Delete" | "Retain" | "Snapshot";
}
export interface AlexaASKSkillAuthenticationConfiguration {
    ClientId: string;
    ClientSecret: string;
    RefreshToken: string;
}
export interface AlexaASKSkillSkillPackage {
    Overrides?: AlexaASKSkillOverrides;
    S3Bucket: string;
    S3BucketRole?: string;
    S3Key: string;
    S3ObjectVersion?: string;
}
export interface AlexaASKSkillOverrides {
    Manifest?: {
        [k: string]: unknown;
    };
}
